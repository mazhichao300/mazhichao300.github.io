<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python2的一些小语法</title>
    <link href="/2017/08/25/python_syntax/"/>
    <url>/2017/08/25/python_syntax/</url>
    
    <content type="html"><![CDATA[<h3 id="Python保留N位小数点"><a href="#Python保留N位小数点" class="headerlink" title="Python保留N位小数点"></a>Python保留N位小数点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">3</span><br>n = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 默认两个Int除，结果也是int，需要转为float</span><br><br><span class="hljs-comment"># 方法一：用round</span><br><span class="hljs-built_in">round</span>(<span class="hljs-built_in">float</span>(a) / b, n)<br><br><span class="hljs-comment"># 方法二：用format</span><br><span class="hljs-built_in">format</span>(<span class="hljs-built_in">float</span>(a) / b, <span class="hljs-string">&#x27;.2f&#x27;</span>)<br><br><span class="hljs-comment"># 方法三：用 % 格式化</span><br><span class="hljs-string">&#x27;%.2f&#x27;</span> %(<span class="hljs-built_in">float</span>(a) / b)<br><br><span class="hljs-comment">#方法三扩展，展现百分比， %%表示输出%</span><br><span class="hljs-string">&#x27;%.2f%%&#x27;</span> %(<span class="hljs-number">100.0</span> * a / b)<br></code></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p><code>threading</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span> name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;hello, %s&quot;</span> % name<br><br>threads = []<br>t1 = threading.Thread(target=func1, args=(<span class="hljs-string">&#x27;ma&#x27;</span>))<br>t2 = threading.Thread(target=func2, args=(<span class="hljs-string">&#x27;world&#x27;</span>))<br>threads.append(t1)<br>threads.append(t2)<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.setDaemon(<span class="hljs-literal">True</span>)<br>    t.start()<br><br></code></pre></td></tr></table></figure><h3 id="判断变量类型"><a href="#判断变量类型" class="headerlink" title="判断变量类型"></a>判断变量类型</h3><p><code>isinstance(x, type)</code></p><ul><li>判断int： isinstance(x,int)</li><li>判断string: isinstance(s, basestring) or isinstance(s, (str, unicode))</li></ul><h3 id="urllib2网络请求"><a href="#urllib2网络请求" class="headerlink" title="urllib2网络请求"></a>urllib2网络请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># GET请求</span><br><span class="hljs-keyword">import</span> urllib,urllib2 <br><br>uri = <span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>  <br><br>ret = urllib2.urlopen(uri).read()<br><br><span class="hljs-comment">#POST请求</span><br>url = <span class="hljs-string">&#x27;http://www.someserver.com/cgi-bin/register.cgi&#x27;</span>   <br>  <br>values = &#123;<span class="hljs-string">&#x27;name&#x27;</span> : <span class="hljs-string">&#x27;Michael Foord&#x27;</span>,   <br>          <span class="hljs-string">&#x27;location&#x27;</span> : <span class="hljs-string">&#x27;Northampton&#x27;</span>,   <br>          <span class="hljs-string">&#x27;language&#x27;</span> : <span class="hljs-string">&#x27;Python&#x27;</span> &#125;   <br>  <br>data = urllib.urlencode(values)   <span class="hljs-comment"># 具体data格式视服务端而定，比如json，data = json.dumps(values)</span><br>  <br>req = urllib2.Request(url, data)   <br>  <br>response = urllib2.urlopen(req)   <br>  <br>the_page = response.read()   <br><br></code></pre></td></tr></table></figure><p><strong>为urlopen设置可选参数:</strong> <code>timeout</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">urllib2.urlopen(r, data=<span class="hljs-literal">None</span>, timeout=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="模块路径设置"><a href="#模块路径设置" class="headerlink" title="模块路径设置"></a>模块路径设置</h3><ul><li>代码中动态添加： <code>sys.path.append(&#39;/home/xxx/xxx&#39;)</code></li><li>设置环境变量<code>PYTHONPATH</code></li></ul><h3 id="JSON处理"><a href="#JSON处理" class="headerlink" title="JSON处理"></a>JSON处理</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">json</span>.dumps()<br><br><span class="hljs-type">json</span>.loads()<br></code></pre></td></tr></table></figure><p><a href="http://www.runoob.com/python/python-json.html">详情参考</a></p><h3 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h3><p>常用的时间戳： <code>int(time.time())</code><br><a href="http://www.cnblogs.com/snow-backup/p/5063665.html">更多用法可参考</a></p><h3 id="python函数是引用还是传值"><a href="#python函数是引用还是传值" class="headerlink" title="python函数是引用还是传值"></a>python函数是引用还是传值</h3><p>python不允许程序员选择采用传值还是传引用。Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值’来传递对象。</p><p><a href="http://www.cnblogs.com/loleina/p/5276918.html">python函数传参是传值还是传引用？</a></p><h3 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">config = &#123;<br>    <span class="hljs-string">&#x27;host&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;port&#x27;</span>: <span class="hljs-number">3306</span>,<br>    <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;passwd&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;db&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    <span class="hljs-string">&#x27;charset&#x27;</span>: <span class="hljs-string">&#x27;utf8&#x27;</span><br>&#125;<br>conn = mdb.connect(**config)<br><br><span class="hljs-comment"># 如果使用事务引擎，可以设置自动提交事务，或者在每次操作完成后手动提交事务conn.commit()</span><br>conn.autocommit(<span class="hljs-number">1</span>)    <span class="hljs-comment"># conn.autocommit(True) </span><br><br><span class="hljs-comment"># 使用cursor()方法获取操作游标</span><br>cursor = conn.cursor()<br>cursor.execute(sql)<br><br><span class="hljs-comment"># 关闭游标连接</span><br>cursor.close()<br><span class="hljs-comment"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/conanwang/p/6028110.html">Python连接MySQL数据库</a></p><h3 id="python遍历dict"><a href="#python遍历dict" class="headerlink" title="python遍历dict"></a>python遍历dict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-built_in">dict</span>.items()  <span class="hljs-comment"># 获取(k, v)数组</span><br><br><span class="hljs-built_in">dict</span>.keys()   <span class="hljs-comment">#获取key数组</span><br><br><span class="hljs-built_in">dict</span>.values() <span class="hljs-comment"># 获取value数组</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br>    key = i<br>    value = <span class="hljs-built_in">dict</span>[key]<br><br><span class="hljs-keyword">for</span> (k, v) <span class="hljs-built_in">int</span> <span class="hljs-built_in">dict</span>.items():<br>    key = k<br>    value = v<br></code></pre></td></tr></table></figure><h3 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h3><p>先安装<code>pymongo</code>模块, <a href="http://api.mongodb.com/python/current/tutorial.html">pymongo官方文档</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<br><br>client = MongoClient(<span class="hljs-string">&quot;10.85.139.145&quot;</span>, <span class="hljs-number">8088</span>)<br>db = client.test<br>collection = db.user<br><br>res = collection.find_one(&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;python&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="AttributeError-‘module’-object-has-no-attribute’xxx’"><a href="#AttributeError-‘module’-object-has-no-attribute’xxx’" class="headerlink" title="AttributeError: ‘module’ object has no attribute’xxx’"></a>AttributeError: ‘module’ object has no attribute’xxx’</h3><p>本来import自己写的一个脚本模块，正常运行；但是在模块中加了一个函数后，再运行就报错如标题。<br>排查发现是<code>.pyc</code>文件导致，删除后正常。</p><p>.pyc文件是由.py文件经过编译后生成的字节码文件，其加载速度相对于之前的.py文件有所提高，而且还可以实现源码隐藏，以及一定程度上的反编译。可能pyc有时更新不即时，导致错误。</p><p><a href="https://stackoverflow.com/questions/15839555/when-are-pyc-files-refreshed">When are .pyc files refreshed?</a></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/wo_renfanzi/article/details/51477796">%格式化和format格式化</a></li><li><a href="http://www.cnblogs.com/fnng/p/3670789.html">python 多线程就这么简单</a></li><li><a href="https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string">How to check if type of a variable is string?</a></li><li><a href="http://blog.csdn.net/mack415858775/article/details/39696107">python通过get方式,post方式发送http请求和接收http响应-urllib urllib2</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外地户口如何在上海办理沪C</title>
    <link href="/2017/07/18/how_hu_c/"/>
    <url>/2017/07/18/how_hu_c/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文根据自己的实际上牌经历，记录一下外地户口办理沪C牌照的流程。</p></blockquote><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>拥有上海市长期居住证，且居住证地址在外环外（据说只要不在沪C限行区就可以，具体请咨询相关部门，本人的居住证地址在外环外）。</p><h2 id="办理流程"><a href="#办理流程" class="headerlink" title="办理流程"></a>办理流程</h2><h3 id="先去交购置税（沪南路2638号）"><a href="#先去交购置税（沪南路2638号）" class="headerlink" title="先去交购置税（沪南路2638号）"></a>先去交购置税（沪南路2638号）</h3><ol><li>取号交税（居住证，身份证，购置税申请表，发票报税联，合格证），刷卡交钱</li><li>刷卡后等待一会，12号窗口拿完税证明</li></ol><h3 id="沪C额度审核"><a href="#沪C额度审核" class="headerlink" title="沪C额度审核"></a>沪C额度审核</h3><ol><li>取号（需要看完税证明）</li><li>窗口办理（居住证，身份证，发票等，具体需要材料取号处有公示）</li></ol><p>注：交税和额度审核不需要网上说的派出所有关证明二，也不需要户口本，个人身份证明只要身份证和居住证。</p><h2 id="去办理牌照（沪南路下盐路）"><a href="#去办理牌照（沪南路下盐路）" class="headerlink" title="去办理牌照（沪南路下盐路）"></a>去办理牌照（沪南路下盐路）</h2><h3 id="先验车"><a href="#先验车" class="headerlink" title="先验车"></a>先验车</h3><ul><li>车排队时，去前面的小房子填表（帖照片，拓印，填信息，按照示例填写即可），交10元</li><li>把表提供给验车的小伙子，等待完成验车</li></ul><h3 id="去办理牌照（3楼，具体地址可问验车的小伙子，很近）"><a href="#去办理牌照（3楼，具体地址可问验车的小伙子，很近）" class="headerlink" title="去办理牌照（3楼，具体地址可问验车的小伙子，很近）"></a>去办理牌照（3楼，具体地址可问验车的小伙子，很近）</h3><ul><li>前台检查材料（合格证，完税证明，发票，保险单，身份证，居住证以及相关复印，居住证、身份证要复印在一起，前台给3块可搞定复印）</li><li>进入大厅，左手第一个窗口递交材料，给号码排队</li><li>等待叫号，给选号二维码（我的身份证地址和实际户籍不一致，这里还提供了户口本）</li><li>有工作人员带着去选号，按照要求选即可（20选1）</li><li>选定后，交345（只现金）</li><li>等待出注册证和行驶证</li><li>办理铁牌邮寄（15块）或者按照要求时间自取（一般2-3天）</li></ul><p>个人周一早上9点到的交税处，一共2个半小时全部完成，未找黄牛，材料复印3份就足够了。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>沪C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux awk命令</title>
    <link href="/2017/07/12/linux_awk/"/>
    <url>/2017/07/12/linux_awk/</url>
    
    <content type="html"><![CDATA[<blockquote><p>awk是一个强大的文本分析工具，简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p></blockquote><blockquote><p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p></blockquote><blockquote><p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;&#123;pattern + action&#125;&#x27; &#123;filenames&#125;<br></code></pre></td></tr></table></figure><p>pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/passwd | awk -F <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span></span><br>nobody<br>root<br>daemon<br></code></pre></td></tr></table></figure><p>awk工作流程：读入有’\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”，所以$1就是用户名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">文件number.txt中有5列（以tab分割），统计第三列之和</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">awk <span class="hljs-string">&#x27;BEGIN &#123;sum=0&#125; &#123;sum+=$3&#125; END &#123;print sum&#125;&#x27;</span> number.txt</span><br>71188417507<br></code></pre></td></tr></table></figure><p>awk工作流程：先执行BEGIN， 然后读入每行，按tab分割后执行<code>action &#123;sum+=$3&#125;</code>， 最后执行END将结果打印出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">awk  <span class="hljs-string">&#x27;/1425977238827502/&#x27;</span> wrong.txt</span><br>67205476    1425977238827502    20209908    3752441 86800893918921209<br></code></pre></td></tr></table></figure><p>匹配模式，搜索wrong.txt中包含1425977238827502的行，没有action，输出整行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">awk  <span class="hljs-string">&#x27;/1425977238827502/ &#123;print $1&#125;&#x27;</span> wrong.txt</span><br>67205476<br></code></pre></td></tr></table></figure><p>匹配模式，搜索wrong.txt中包含1425977238827502的行，按照action输出每一列。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.gnu.org/software/gawk/manual/gawk.html">The GNU Awk User’s Guide</a></li><li><a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html">linux awk命令详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>awk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最好的方法给孩子</title>
    <link href="/2017/07/08/best_method_to_child/"/>
    <url>/2017/07/08/best_method_to_child/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近在读<a href="http://baike.baidu.com/link?url=B4CVBSSVvBrDvNIiCxqbfvOQHN6yCTIyjslNGy3pb8cAuZd5Q-D3B9CtunmLgChfo3OqamRysAd-3_ctbGPs5g1mqRgxNhblnyhLSO65FE7">王芳</a>的《最好的方法给孩子》，所提到的一些教育理念和一些实践方法，个人比较认同，在此记录。</p></blockquote><h2 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h2><p>多陪伴，教给孩子解决问题的办法，多给孩子锻炼的机会（不要事事都帮孩子做）。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>陪伴：利用好零碎时间，规划好整块陪伴时间，同时要做到有效陪伴</li><li>教会孩子道歉：真诚的接受孩子的道歉</li><li>学英语：语境很重要，父母最好跟着一起学</li><li>记忆力：先培养观察力，小游戏，从房间出来后问孩子指定物品在哪里</li><li>寓教于乐：利用孩子喜欢游戏的心态，家庭查字典比赛等</li><li>扩展孩子的知识面：讲故事，天文地理、百科、新闻等</li><li>仪式感：通过庄严温馨的仪式让孩子树立目标感，也做一个有趣的人</li><li>聪明的父母慢半拍：不要事事帮孩子做好，不能剥夺孩子的实践机会</li><li>专注力</li><li>乐观：事情多想好的一面，解决不好的一面</li><li>时间管理（不拖延）：沙漏，闹钟</li><li>家庭知识竞赛机制</li></ul><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://book.douban.com/subject/26707322/">《最好的方法给孩子》</a></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教育</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx Map</title>
    <link href="/2017/06/27/nginx_map/"/>
    <url>/2017/06/27/nginx_map/</url>
    
    <content type="html"><![CDATA[<blockquote><p>项目中一个接口需要跨域支持，允许一部分的域名进行调用，这里配合nginx map进行允许跨域处理。</p></blockquote><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>map为一个变量设置的映射表，在http段中进行配置。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>映射表由两列组成，匹配模式和对应的值。在 map 块里的参数指定了源变量值和结果值的对应关系。匹配模式可以是一个简单的字符串或者正则表达式，使用正则表达式要用(‘<del>‘)。<br>一个正则表达式如果以 “</del>” 开头，表示这个正则表达式对大小写敏感。以 “~*”开头，表示这个正则表达式对大小写不敏感。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">map</span> <span class="hljs-variable">$var1</span> <span class="hljs-variable">$var2</span> &#123; <br>    <span class="hljs-attribute">default</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">x</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="跨域支持实例"><a href="#跨域支持实例" class="headerlink" title="跨域支持实例"></a>跨域支持实例</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">map</span> <span class="hljs-variable">$http_origin</span> <span class="hljs-variable">$corsHost</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-string">&quot;~https://www.baidu.com&quot;</span>   <span class="hljs-variable">$http_origin</span>;<br>    <span class="hljs-string">&quot;~.xx.com&quot;</span>   <span class="hljs-variable">$http_origin</span>;<br>    <span class="hljs-string">&quot;~.yy.com&quot;</span>   <span class="hljs-variable">$http_origin</span>;<br>&#125;<br><br>server &#123;<br>    listen <span class="hljs-number">80</span>;<br>    ...<br><br>    location ~ ^/api &#123;<br>       <span class="hljs-built_in"> root</span> xxx;<br>        fastcgi_pass xxx;<br>        add_header      Access-Control-Allow-Origin <span class="hljs-variable">$corsHost</span>;<br>        add_header      Access-Control-Allow-Credentials<span class="hljs-built_in"> true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot mybatis</title>
    <link href="/2017/05/08/spring_boot_mybatis/"/>
    <url>/2017/05/08/spring_boot_mybatis/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何整合spring boot与Mybatis</p></blockquote><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>运行起spring boot比较容易，要注意的是入口类要放到所有其他类的父目录。</p><h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h1><ul><li><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">官方文档</a></li><li><a href="https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples/mybatis-spring-boot-sample-xml">github例子</a></li></ul><h1 id="打成war包，供部署到独立的tomcat"><a href="#打成war包，供部署到独立的tomcat" class="headerlink" title="打成war包，供部署到独立的tomcat"></a>打成war包，供部署到独立的tomcat</h1><p>spring boot默认是打成一个集成tomcat的jar包，spring boot同样提供了打包war的方式。</p><h2 id="修改打包方式"><a href="#修改打包方式" class="headerlink" title="修改打包方式"></a>修改打包方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">pom.xml中修改打包方式<br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="移除嵌入式tomcat依赖"><a href="#移除嵌入式tomcat依赖" class="headerlink" title="移除嵌入式tomcat依赖"></a>移除嵌入式tomcat依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">pom.xml dependencies下添加<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="修改入口类-继承SpringBootServletInitializer并重写configure方法"><a href="#修改入口类-继承SpringBootServletInitializer并重写configure方法" class="headerlink" title="修改入口类-继承SpringBootServletInitializer并重写configure方法"></a>修改入口类-继承SpringBootServletInitializer并重写configure方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SpringBootServletInitializer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title function_">configure</span><span class="hljs-params">(SpringApplicationBuilder application)</span> &#123;<br>        <span class="hljs-keyword">return</span> application.sources(Application.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，可以通过mvn clean package导出war包。同样，也可以使用嵌入式tomcat进行调试。</p><h1 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h1><h2 id="找不到主程序"><a href="#找不到主程序" class="headerlink" title="找不到主程序"></a>找不到主程序</h2><p>class文件未生成，重新编译即可</p><h2 id="archive-for-required-library-tomcat-embed-cannot-be-read"><a href="#archive-for-required-library-tomcat-embed-cannot-be-read" class="headerlink" title="archive for required library tomcat-embed cannot be read"></a>archive for required library tomcat-embed cannot be read</h2><p>原因是Jar包损坏，将.m2下的相应目录删除，重新下载即解决。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql索引实现原理</title>
    <link href="/2017/04/21/mysql_index/"/>
    <url>/2017/04/21/mysql_index/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文说明mysql索引的实现原理以及索引使用</p></blockquote><h2 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h2><p>如果你要从一本书中找一段内容，有两种方式：</p><ol><li>一页一页的翻，直至找到内容；</li><li>先通过<code>目录</code>定位到相应章节，再去查找；</li></ol><p>正常情况下，第二种方式是可以明显加快查找速度的。在这里，<code>目录</code>就可以理解为索引。</p><h2 id="索引实现原理"><a href="#索引实现原理" class="headerlink" title="索引实现原理"></a>索引实现原理</h2><p>Mysql的索引是存储引擎实现的，MyIsam、InnoDB是采用BTree数据结构实现的索引。<br><a href="https://zh.wikipedia.org/wiki/B%E6%A0%91"><strong>BTree介绍</strong></a></p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p><code>unique key</code>：索引值必须唯一。主键也是唯一索引的一种，关键字是<code>primary key</code>。</p><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>InnoDB不支持，Myisam支持，一般在<code>char</code>、<code>varchar</code>或<code>text</code>列上创建。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Create</span> <span class="hljs-keyword">table</span> 表名<br>(id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> anto_increment,<br>title <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>FULLTEXT(title)<br>)type<span class="hljs-operator">=</span>myisam<br></code></pre></td></tr></table></figure><h3 id="单列索引与多列索引"><a href="#单列索引与多列索引" class="headerlink" title="单列索引与多列索引"></a>单列索引与多列索引</h3><p>索引可以是单列索引也可以是多列索引(复合索引)，多列索引的<code>最左前缀原则</code>：在sql where子句中列的顺序要保持和多索引的一致或以多列索引顺序出现，只要出现非顺序出现、断层都无法利用到多列索引或者只能用到多列索引的部分列。</p><p>例如, <code>index(a, b, c)</code>:</p><ol><li><code>where a=1</code>可以命中索引的a字段</li><li><code>where a=1 and b=2</code>可以命中索引的a, b字段</li><li><code>where a=1 and b=2 and c=3</code>可以命中索引的全部字段</li><li><code>where a=1 and c=3</code>只能命中a字段</li><li><code>where b=2</code>等非以a字段开头的查询都无法命中索引</li></ol><p><strong>可以总结为</strong>：若要命中索引，where子条件一定要以a字段开始，具体能命中索引中的几列，用最左前缀方式与索引列进行匹配即可知。</p><h3 id="MyIsam和InnoDB索引的不同之处"><a href="#MyIsam和InnoDB索引的不同之处" class="headerlink" title="MyIsam和InnoDB索引的不同之处"></a>MyIsam和InnoDB索引的不同之处</h3><p><code>MyIsam</code>可以不提供主键，表中数据是按顺序储存，索引BTree的叶节点的value字段不会存储真正的值，而是对应数据行的地址。</p><p><code>InnoDB</code>必须要提供主键，表结构就是一个按照主键生成的BTree，其他索引保存的则是主键索引的值，非主键索引查询时，要先查到主键索引值，再通过主键索引值到表结构中查询相应的行。</p><p>**<code>MyIsam</code>**查询性能更好些，但是不支持事务；<br>**<code>InnoDB</code>**支持事务。</p><h3 id="explain语句"><a href="#explain语句" class="headerlink" title="explain语句"></a>explain语句</h3><p><code>explain</code>可以用来提供sql语句执行信息，可以配合<code>select delete insert replace update</code>使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> shopinfo_for_proto <span class="hljs-keyword">where</span>  userid<span class="hljs-operator">=</span><span class="hljs-number">22681834</span> <span class="hljs-keyword">and</span> zdid<span class="hljs-operator">=</span><span class="hljs-number">85570921</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>              <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key    <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> Extra       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> shopinfo_for_proto <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> userid        <span class="hljs-operator">|</span> userid <span class="hljs-operator">|</span> <span class="hljs-number">8</span>       <span class="hljs-operator">|</span> const <span class="hljs-operator">|</span>   <span class="hljs-number">16</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br></code></pre></td></tr></table></figure><p>从中可以分析出是否命中了缓存，<code>key</code>表示实际命中的缓存，<code>key_len</code>表示命中的缓存大小，可以用来分析命中了多列索引中的几列。</p><p><code>explain</code>输出的各字段的<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">详细解释见官网</a></p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven使用</title>
    <link href="/2017/04/18/maven/"/>
    <url>/2017/04/18/maven/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章用来记录使用Maven过程中的一些问题和总结。</p></blockquote><h3 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h3><h3 id="解决依赖下载慢的问题"><a href="#解决依赖下载慢的问题" class="headerlink" title="解决依赖下载慢的问题"></a>解决依赖下载慢的问题</h3><p>下载慢是由于国内访问官方站点网络不稳定导致，使用阿里云mirror镜像可解决此问题，配置mirror:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置私服"><a href="#配置私服" class="headerlink" title="配置私服"></a>配置私服</h3><p>配置repository即可</p><h3 id="深度理解mirror-repository关系"><a href="#深度理解mirror-repository关系" class="headerlink" title="深度理解mirror,repository关系"></a>深度理解<code>mirror</code>,<code>repository</code>关系</h3><p><strong>repository</strong>是仓库，里面存放的是各种jar包和maven插件，可以分为remote库和本地库。</p><p><strong>mirror</strong>则是仓库的镜像，比如maven官方仓库A，阿里云提供了一个仓库B，和A完全一致，就称为A的镜像。</p><p><a href="https://my.oschina.net/sunchp/blog/100634">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM类加载机制</title>
    <link href="/2017/04/11/jvm_class_load/"/>
    <url>/2017/04/11/jvm_class_load/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM类加载过程"><a href="#JVM类加载过程" class="headerlink" title="JVM类加载过程"></a>JVM类加载过程</h2><ol><li>加载</li><li>验证</li><li>准备</li><li>解析</li><li>初始化</li><li>使用</li><li>卸载</li></ol><h2 id="JVM类加载器-双亲委派模型"><a href="#JVM类加载器-双亲委派模型" class="headerlink" title="JVM类加载器-双亲委派模型"></a>JVM类加载器-双亲委派模型</h2><h3 id="类加载模型图"><a href="#类加载模型图" class="headerlink" title="类加载模型图"></a>类加载模型图</h3><p><img src="http://oniemuf9p.bkt.clouddn.com/jvm_class_loader_model.png"></p><h3 id="双亲委派模型工作过程"><a href="#双亲委派模型工作过程" class="headerlink" title="双亲委派模型工作过程"></a>双亲委派模型工作过程</h3><p>如果一个类加载器收到了类加载请求，它不会自己直接加载，而是会委派自己的父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时（它的搜索范围中没有找到反需的类），子加载器才会尝试自己去加载。  </p><h3 id="双亲委派模型的优点"><a href="#双亲委派模型的优点" class="headerlink" title="双亲委派模型的优点"></a>双亲委派模型的优点</h3><p>保证稳定性和安全性，比如java.lang.Object类只会由启动类加载器进行加载，如果用户自定义了一个java.lang.Object类是不会被加载的。这样保证了Object类的全局唯一性，也不会被别有用心的人替换。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《深入理解JAVA虚拟机》- 周志明</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>类加载</tag>
      
      <tag>双亲委派模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM内存模型</title>
    <link href="/2017/04/10/jvm_memory_model/"/>
    <url>/2017/04/10/jvm_memory_model/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM内存区域划分"><a href="#JVM内存区域划分" class="headerlink" title="JVM内存区域划分"></a>JVM内存区域划分</h2><h3 id="内存区域划分图"><a href="#内存区域划分图" class="headerlink" title="内存区域划分图"></a>内存区域划分图</h3><p><img src="http://oniemuf9p.bkt.clouddn.com/jvm_memory_model.png"></p><h3 id="各区域说明"><a href="#各区域说明" class="headerlink" title="各区域说明"></a>各区域说明</h3><h4 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h4><p>存储下一条要执行的字节码指令，线程私有</p><h4 id="JAVA虚拟机栈"><a href="#JAVA虚拟机栈" class="headerlink" title="JAVA虚拟机栈"></a>JAVA虚拟机栈</h4><p>线程私有，每个方法被执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。<br><code>局部变量表</code>存储了编译期可知的各种基本的数据类型（boolean,byte,char,short,int,float,double,long），对象引用和returnAddress类型（指向了一条字节码指令的地址）。</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>与栈类似，区别是虚拟机栈为执行JAVA方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。</p><h4 id="JAVA堆"><a href="#JAVA堆" class="headerlink" title="JAVA堆"></a>JAVA堆</h4><p>线程共享的一块内存区域，用于存放对象实例。是GC的主要区域，因此也被称为GC堆。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。也被称为永久代。</p><h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p>GC区域主要为：</p><ul><li>JAVA堆</li><li>方法区：主要回收两部分内容，废弃常量和无用的类，回收的效率较低。</li></ul><p>以下所指的GC等同于JAVA堆的回收。</p><h3 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h3><ol><li>标记-清除：先标记需要回收的对象，再进行清理，会产生内存碎片；</li><li>标记-整理：先标记，再将所有存活对象向一端移动以解决碎片问题；</li><li>复制算法：将空间分为两部分，每次只使用一块空间，回收时将存活对象复制到另一块空间，再将已使用的那块空间整个清理掉。</li></ol><h3 id="JAVA堆的内存划分"><a href="#JAVA堆的内存划分" class="headerlink" title="JAVA堆的内存划分"></a>JAVA堆的内存划分</h3><p><img src="http://oniemuf9p.bkt.clouddn.com/jvm_heap.png"></p><p>现在主要使用分代收集策略，将堆分为老年代和新生代，新生代又分为eden空间和survivor空间（8:1）。老年代采用标记-整理算法，新生代采用复制算法。</p><h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><ul><li>对象优先分配在Eden区，当Eden区没有足够空间进行分配时，虚拟机将进行一次Minor GC;</li><li>大对象在分配时直接进行老年代，长期存活的对象进行老年代</li><li>Minor GC时，JVM会检测之前进行到老年代的平均大小是否大于老年代的剩余空间，如果大于则进行一次Full GC， 如果小于，还要看是否允许担保失败，如果允许则进行Minor GC, 否则进行Full GC.</li></ul><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>深入理解JAVA虚拟机-周志明</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用markdown书写PPT</title>
    <link href="/2017/03/27/markdown-ppt/"/>
    <url>/2017/03/27/markdown-ppt/</url>
    
    <content type="html"><![CDATA[<blockquote><p>使用<a href="https://github.com/adamzap/landslide">LandSlide</a>将MarkDown生成为HTML文件，用来分享。</p></blockquote><h2 id="LandSlide安装"><a href="#LandSlide安装" class="headerlink" title="LandSlide安装"></a>LandSlide安装</h2><h3 id="使用pip安装"><a href="#使用pip安装" class="headerlink" title="使用pip安装"></a>使用<code>pip</code>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">//先安装pip，如果已经安装，跳过此步<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo easy_install pip</span><br><br>//安装landslide<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">pip install landslide</span><br></code></pre></td></tr></table></figure><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/adamzap/landslide.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> landslide</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">python setup.py build</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo python setup.py install</span><br></code></pre></td></tr></table></figure><h2 id="编写md文件"><a href="#编写md文件" class="headerlink" title="编写md文件"></a>编写md文件</h2><p>官方测试用例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Landslide</span><br><br> ---<br><br> # Overview<br><br> Generate HTML5 slideshows from markdown, ReST, or textile.<br><br> ![](<span class="hljs-link">http://i.imgur.com/bc2xk.png</span>)&#123;ImgCap&#125;python&#123;/ImgCap&#125;<br><br> Landslide is primarily written in Python, but it&#x27;s themes use:<br><br><span class="hljs-bullet"> -</span> HTML5<br><span class="hljs-bullet"> -</span> Javascript<br><span class="hljs-bullet"> -</span> CSS<br><br> ---<br><br> # Code Sample<br><br> Landslide supports code snippets<br><br><span class="hljs-code">     !python</span><br><span class="hljs-code">     def log(self, message, level=&#x27;notice&#x27;):</span><br><span class="hljs-code">         if self.logger and not callable(self.logger):</span><br><span class="hljs-code">             raise ValueError(u&quot;Invalid logger set, must be a callable&quot;)</span><br><span class="hljs-code"></span><br><span class="hljs-code">         if self.verbose and self.logger:</span><br><span class="hljs-code">             self.logger(message, level)</span><br></code></pre></td></tr></table></figure><p><strong>简单说明：</strong></p><ul><li><code>---</code>用来表示当前页面结束</li><li>代码段只支持<code>tab</code>符号方式</li></ul><h2 id="生成HTML文件"><a href="#生成HTML文件" class="headerlink" title="生成HTML文件"></a>生成HTML文件</h2><p><code>$ landslide test.md -i -o &gt; test.html</code></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">h</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       展示帮助</span><br><span class="hljs-attribute">← →</span><span class="hljs-punctuation">:</span> <span class="hljs-string">     上/下一张幻灯片</span><br><span class="hljs-attribute">ESC</span><span class="hljs-punctuation">:</span> <span class="hljs-string">     展示目录</span><br><span class="hljs-attribute">n</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       显示当前是第几张幻灯片</span><br><span class="hljs-attribute">b</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       屏幕全黑</span><br><span class="hljs-attribute">e</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       使当前幻灯片最大化</span><br><span class="hljs-attribute">3</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       展示伪3D效果</span><br><span class="hljs-attribute">c</span><span class="hljs-punctuation">:</span> <span class="hljs-string">       取消显示前后幻灯片预览，只显示当前幻灯片</span><br></code></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.jianshu.com/p/e063303317cb">用Markdown写一个极客范儿的PPT</a></li><li><a href="https://github.com/adamzap/landslide">官网</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
      <tag>ppt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP发送HTML格式邮件</title>
    <link href="/2017/03/17/php-email-html/"/>
    <url>/2017/03/17/php-email-html/</url>
    
    <content type="html"><![CDATA[<blockquote><p>经常会有定期发送邮件报表的需求，这里使用HTML写报表模板，然后填充数据后发送。</p></blockquote><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// $htmlTemplate为HTML模板</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$find</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$htmlTemplate</span>);<br><br><span class="hljs-variable">$to</span> = <span class="hljs-string">&#x27;xxx@baidu.com&#x27;</span>;<br><span class="hljs-variable">$subject</span> = <span class="hljs-string">&#x27;数据日报-&#x27;</span> . <span class="hljs-variable">$day</span>;<br><span class="hljs-variable">$header</span> = <span class="hljs-string">&quot;MIME-Version: 1.0\r\n&quot;</span>; <span class="hljs-comment">//设置MIME版本</span><br><span class="hljs-variable">$header</span> .= <span class="hljs-string">&quot;Content-type: text/html; charset=utf-8\r\n&quot;</span>; <span class="hljs-comment">//设置内容类型和字符集</span><br><span class="hljs-variable">$header</span> .= <span class="hljs-string">&quot;Content-Transfer-Encoding: 8bit\r\n&quot;</span>;<br><span class="hljs-variable">$header</span> .= <span class="hljs-string">&quot;From: xx &lt;xx@baidu.com&gt;\r\n&quot;</span>; <span class="hljs-comment">//设置发件人</span><br><span class="hljs-variable">$header</span> .= <span class="hljs-string">&quot;Cc: xx@mailexample.com\r\n&quot;</span>; <span class="hljs-comment">// 设置抄送</span><br><span class="hljs-title function_ invoke__">mail</span>(<span class="hljs-variable">$to</span>, <span class="hljs-variable">$subject</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$header</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>email</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP Fatal error Allowed memory size exhauste</title>
    <link href="/2017/03/17/php-fatal-memory-exhauste/"/>
    <url>/2017/03/17/php-fatal-memory-exhauste/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有时运行PHP会报错误<code>Fatal error: Allowed memory size of 134217728 bytes exhauste</code>，直接原因是PHP所占用的内存超过了设定大小</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="修改内存限制"><a href="#修改内存限制" class="headerlink" title="修改内存限制"></a>修改内存限制</h3><ul><li>取消限制<code>ini_set(&quot;memory_limit&quot;,&quot;-1&quot;);</code></li><li>根据需要设定上限<code>ini_set(&quot;memory_limit&quot;,&quot;2048M&quot;);</code></li></ul><h3 id="通过优化程序以减少内存占用"><a href="#通过优化程序以减少内存占用" class="headerlink" title="通过优化程序以减少内存占用"></a>通过优化程序以减少内存占用</h3><ul><li>变量使用后，及时<code>unset()</code>等</li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上海市浦东新区公积金租赁提取</title>
    <link href="/2017/03/08/sh-gongjijin/"/>
    <url>/2017/03/08/sh-gongjijin/</url>
    
    <content type="html"><![CDATA[<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>家庭名下上海市内无房产，在上海市租房居住。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>查询好自己的公积金帐号</li><li>准备好上海市内的一张借记卡，并问清开户支行</li><li>已婚的带好结婚证</li></ul><h3 id="办理流程"><a href="#办理流程" class="headerlink" title="办理流程"></a>办理流程</h3><h4 id="公积金管理中心办理流程"><a href="#公积金管理中心办理流程" class="headerlink" title="公积金管理中心办理流程"></a>公积金管理中心办理流程</h4><ul><li>前往浦东新区公积金管理中心，地址：浦城路812号2楼</li><li>按照要求填写两个表格：提取申请表和房屋状况查询申请表（为了查询名下是否在上海有房产）</li><li>取号等待办理</li></ul><h4 id="手机短信申请续提-初次申请不可用"><a href="#手机短信申请续提-初次申请不可用" class="headerlink" title="手机短信申请续提-初次申请不可用"></a>手机短信申请续提-初次申请不可用</h4><p>上笔提取完全终止后，婚姻信息，卡号，支行，提取金额，租房地址等全都不变，仅提取时间推后，可使用经过验证的预留手机号发短信申请，步骤如下：</p><ul><li>联通：1065502112329，电信：1065902112329，移动：1065751612329</li><li>查询，发送<code>TQZLCX</code>至上述号码，查询最近一次租赁提取记录</li><li>按照短信返回内容中的指令继续操作即可</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>家庭为单位最多每月提取2000元，每3个月打款一次。</li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小米Max刷机，救砖</title>
    <link href="/2017/01/06/how_to_install_rom_mi_max/"/>
    <url>/2017/01/06/how_to_install_rom_mi_max/</url>
    
    <content type="html"><![CDATA[<h2 id="小米Max刷机"><a href="#小米Max刷机" class="headerlink" title="小米Max刷机"></a>小米Max刷机</h2><h2 id="小米Max救砖"><a href="#小米Max救砖" class="headerlink" title="小米Max救砖"></a>小米Max救砖</h2><p>使用官方的线刷包可以救砖</p>]]></content>
    
    
    <categories>
      
      <category>手机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小米Max</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>insert or update</title>
    <link href="/2016/12/06/mysql_insert_or_update/"/>
    <url>/2016/12/06/mysql_insert_or_update/</url>
    
    <content type="html"><![CDATA[<blockquote><p>实现记录有则更新，无则插入</p></blockquote><h2 id="ON-DUPLICATE-KEY-UPDATE"><a href="#ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="ON DUPLICATE KEY UPDATE"></a>ON DUPLICATE KEY UPDATE</h2><p>需要先设置UNIQUE KEY索引，然后使用ON DUPLICATE KEY UPDATE语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)<br>ON DUPLICATE KEY UPDATE c=3;<br></code></pre></td></tr></table></figure><hr><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://lobert.iteye.com/blog/1604122">ON DUPLICATE KEY UPDATE重复插入时更新</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql load data infile</title>
    <link href="/2016/12/06/mysql_load_data_infile/"/>
    <url>/2016/12/06/mysql_load_data_infile/</url>
    
    <content type="html"><![CDATA[<blockquote><p>背景：兄弟团队每天定时提供一份全量文件，我们需要将数据更新到DB中。</p></blockquote><h2 id="最开始的方案是"><a href="#最开始的方案是" class="headerlink" title="最开始的方案是"></a>最开始的方案是</h2><p>逐条数据到DB中判断，有则更新，无则插入，同时对变动过的记录更新时间戳，最后将表中此次未更新的记录全部删掉。但是因数据量较大（300W条），hhvm执行到一定程度就会内存溢出，然后停止运行。</p><h2 id="load-data-infile"><a href="#load-data-infile" class="headerlink" title="load data infile"></a>load data infile</h2><p>Mysql提供了load data infile，可以快速将文件中的数据导入表中，设置unique key索引并指定replace即可做到有则替换，无则插入。详细用法参照<a href="http://blog.csdn.net/zhao1234567890123456/article/details/41054557">LOAD DATA INFILE</a></p><h2 id="load-data-infile中文乱码解决办法"><a href="#load-data-infile中文乱码解决办法" class="headerlink" title="load data infile中文乱码解决办法"></a>load data infile中文乱码解决办法</h2><p><a href="http://lijunjie.iteye.com/blog/258494">load data infile 中文乱码解决</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信用卡安全</title>
    <link href="/2016/12/05/card-safe/"/>
    <url>/2016/12/05/card-safe/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2016.8.11下午收到两条短信，北京银行信用卡被盗刷1.8W余元，2016.12.5日，盗刷款项全部追回，这里记录一下。</p></blockquote><h2 id="被盗刷后做的事情"><a href="#被盗刷后做的事情" class="headerlink" title="被盗刷后做的事情"></a>被盗刷后做的事情</h2><ol><li>电话客服，挂失了卡片（挂失太快，又由于无交易密码，ATM不认，也无法到通过交易自证卡片在身边，客服建议尽快报警）；</li><li>让同事对卡片拍照，相当于人证了（不知道是否有用）；</li><li>报警（不出警，要求自己到派出所）；</li><li>第二天到银行补帐单记录，提交给派出所；</li><li>将报警回执、盗刷情况说明、身份证、卡片复印件传真给银行，同时银行将争议交易挂帐，无需还款；</li><li>漫长的等待；</li></ol><p>大概一周后（具体天数不记得了），派出所刑侦部门电话我，说不能立案，理由是：损失目前还不属于我的，不能由我报案。</p><h2 id="总结一下不足点"><a href="#总结一下不足点" class="headerlink" title="总结一下不足点"></a>总结一下不足点</h2><ol><li>自证卡片在身边要更充分些：就近刷卡，卡片复印让派出所盖章取证，ATM查询（甚至可以故意ATM吞卡）；</li><li>一切靠自己</li></ol><p>设不设密码之争：这个感觉难有定论，如果卡被复制盗刷感觉是无密码更好些（因为自己不用承担泄露密码的责任）；如果卡丢了，估计自己要承担责任了。</p><h2 id="总之："><a href="#总之：" class="headerlink" title="总之："></a>总之：</h2><ol><li>保护好卡片，刷卡时不能让卡离开自己的视线；</li><li>换芯片卡；</li><li>尽量用支付宝、微信吧</li><li>我会继续不设密码</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信用卡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的安全漏洞简介</title>
    <link href="/2016/08/22/web-safe/"/>
    <url>/2016/08/22/web-safe/</url>
    
    <content type="html"><![CDATA[<h1 id="安全漏洞分类"><a href="#安全漏洞分类" class="headerlink" title="安全漏洞分类"></a>安全漏洞分类</h1><p>作用于服务端的漏洞，作用于客户端的漏洞</p><h1 id="常见的服务端漏洞"><a href="#常见的服务端漏洞" class="headerlink" title="常见的服务端漏洞"></a>常见的服务端漏洞</h1><h2 id="不好的设计"><a href="#不好的设计" class="headerlink" title="不好的设计"></a>不好的设计</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php">基于机制不可知来隐藏敏感信息是不安全的<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 用可预测的COOKIE值判断管理员</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;admin&#x27;</span> == <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;role&#x27;</span>]) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcom, admin&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can do whatever you want&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// 基于MD5生成TOKEN</span><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$passwd</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br><br><span class="hljs-comment">// hello hacker, we use double md5, crack it if you can</span><br><span class="hljs-comment">// http://www.cmd5.com/</span><br><span class="hljs-variable">$passwd</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$passwd</span>));<br><br><span class="hljs-title function_ invoke__">register</span>(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$passwd</span>);<br></code></pre></td></tr></table></figure><h2 id="非法文件上传"><a href="#非法文件上传" class="headerlink" title="非法文件上传"></a>非法文件上传</h2><h3 id="形成漏洞的前提："><a href="#形成漏洞的前提：" class="headerlink" title="形成漏洞的前提："></a>形成漏洞的前提：</h3><ul><li>上传的文件能够被Web容器解释执行。所以文件上传后所在的目录要是Web容器所覆盖到的路径。</li><li>用户能够从Web上访问这个文件。如果文件上传了，但用户无法通过Web访问，或者无法得到Web容器解释这个脚本，那么也不能称之为漏洞。</li></ul><h3 id="错误的做法："><a href="#错误的做法：" class="headerlink" title="错误的做法："></a>错误的做法：</h3><ul><li>对于上传的文件不做限制   </li><li>允许上传的文件改名，对改的名字不做限制</li></ul><h3 id="正确的做法："><a href="#正确的做法：" class="headerlink" title="正确的做法："></a>正确的做法：</h3><ul><li>白名单限制上传文件的类型  </li><li>抛弃原始文件名，按规则生成新的文件名</li><li>只提供上传功能：不要允许改名</li><li>上传的文件单独存放，取消执行权限</li></ul><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// http://10.94.43.36:8112/sqlinject.php?username=&amp;password=%27%20or%20%27%27=%27</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;connect failed&quot;</span>. <span class="hljs-title function_ invoke__">mysql_error</span>());<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-variable">$conn</span>);<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select name,password from student where </span><br><span class="hljs-string">    name=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;<br><br><span class="hljs-variable">$ret</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$conn</span>);<br><br><span class="hljs-variable">$result</span> = [];<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$ret</span>)) &#123;<br>    <span class="hljs-variable">$result</span>[] = <span class="hljs-variable">$row</span>;<br>&#125;<br><br><span class="hljs-variable">$data</span> = [<br>   <span class="hljs-string">&#x27;sql&#x27;</span> =&gt; <span class="hljs-variable">$sql</span>,<br>   <span class="hljs-string">&#x27;data&#x27;</span> =&gt; <span class="hljs-variable">$result</span>,<br>];<br><br><span class="hljs-keyword">exit</span>(<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$data</span>));<br></code></pre></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>不可信的用户输入跨越边界进入SHELL</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// http://10.94.43.36:8112/rce.php?cmd=whoami</span><br><span class="hljs-comment">// system函数</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;system&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br><br><span class="hljs-comment">// http://10.94.43.36:8112/rce.php?eval=echo%20%27helloword%27;</span><br><span class="hljs-comment">// eval函数: eval() 函数把字符串按照 PHP 代码来计算。</span><br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;eval&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h2><p>不可信的用户输入跨越边界进入网络访问或文件系统</p><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>报错信息（sql, stacktrace）<br>物理路径泄露<br>用户信息泄露</p><p>本身不会带来很严重问题，但是可能会帮助黑客更快的攻克你的系统</p><h1 id="常见的客户端漏洞"><a href="#常见的客户端漏洞" class="headerlink" title="常见的客户端漏洞"></a>常见的客户端漏洞</h1><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>什么是XSS？跨站脚本攻击(Cross Site Scripting)<br>反射型<br>持久型<br>DOM型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// http://cp01-rdqa-dev094.cp01.baidu.com:8112/xsstest.php?username=%3Cscript%3Ealert(document.cookie)%3C/script%3E  </span><br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;X-XSS-Protection:0&#x27;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Security-Policy:0&#x27;</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcom &#x27;</span> . <span class="hljs-variable">$username</span>;<br></code></pre></td></tr></table></figure><h2 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h2><p>CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// http://cp01-rdqa-dev094.cp01.baidu.com:8112/csrftest.php</span><br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;X-XSS-Protection:0&#x27;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Security-Policy:0&#x27;</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><br><span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;&lt;img src=&quot;https://passport.baidu.com/passport/?logout&quot;/&gt;&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$test</span>;<br></code></pre></td></tr></table></figure><h2 id="Json-Hijack"><a href="#Json-Hijack" class="headerlink" title="Json Hijack"></a>Json Hijack</h2>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】一篇文章让你学会全部跑步知识</title>
    <link href="/2016/08/03/runner/"/>
    <url>/2016/08/03/runner/</url>
    
    <content type="html"><![CDATA[<h3 id="转载一篇跑步相关的文章"><a href="#转载一篇跑步相关的文章" class="headerlink" title="转载一篇跑步相关的文章"></a>转载一篇跑步相关的文章</h3><p><a href="http://www.jianshu.com/p/e582eea50c69"><code>跑步大全：一篇文章让你学会全部跑步知识</code></a></p><h3 id="定个16年底的目标"><a href="#定个16年底的目标" class="headerlink" title="定个16年底的目标"></a>定个16年底的目标</h3><ol><li>跑步总数达到300KM，还有140KM；</li><li>骑行达到700KM，还剩300KM；</li></ol><p>坚持坚持~</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在上海办理护照</title>
    <link href="/2016/07/29/passport/"/>
    <url>/2016/07/29/passport/</url>
    
    <content type="html"><![CDATA[<blockquote><p>终于拿到了护照，感觉做事情还是<code>易早不易迟</code>，要不然等到需要的时候耽误事~</p></blockquote><h3 id="在上海办理护照的条件（满足其一即可）"><a href="#在上海办理护照的条件（满足其一即可）" class="headerlink" title="在上海办理护照的条件（满足其一即可）"></a>在上海办理护照的条件（满足其一即可）</h3><ol><li>上海市户口；</li><li>上海市居住证（需要1年有效期的那种，临时的不行）</li><li>在上海连续缴纳1年社保（最好社保打印个单子确认一下）；</li></ol><h3 id="护照办理流程"><a href="#护照办理流程" class="headerlink" title="护照办理流程"></a>护照办理流程</h3><ol><li>网上预约一下，据说预约会加快出证速度（这步可以省略）；</li><li>前往出入境（我是去的浦东，张东路1158号）；</li><li>按照流程来，主要就是拍照，窗口办理，交钱200，等半个月取证；</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H5微信支付</title>
    <link href="/2016/07/28/micro-msg-pay/"/>
    <url>/2016/07/28/micro-msg-pay/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们的M站接入了微信支付，虽然不是我开发的，但是过程中参与了部分的方案调研，这里把我知道的记录下来。</p></blockquote><h4 id="针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。"><a href="#针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。" class="headerlink" title="针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。"></a>针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。</h4><ol><li>微信外部浏览器<br>方案没参与，不清楚。应该是打开某个特殊的URL调起微信</li><li>微信内部浏览器<br>此时不能使用方案1，因为已经是在微信内部了，不能再调起微信。这时可以走微信内部公众号的方式，用openid调用微信支付接口，用户，公众号的对应关系为一个Openid。现在的问题就是如何获取openid了。微信提供了oauth授权接口，只需要openid的话，还可以做到静默授权，用户无感知。授权后拿到token,然后在回调里面用token即可取openid。</li></ol><hr><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN">微信支付官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>H5</tag>
      
      <tag>WEBAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站Https改造</title>
    <link href="/2016/07/19/https/"/>
    <url>/2016/07/19/https/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们的网站是nginx+php开发的，需要进行https的改造。</p><h3 id="技术前提"><a href="#技术前提" class="headerlink" title="技术前提"></a>技术前提</h3><p>在https的页面中是不允许加载http资源的，包括js,css等文件（图片被认为是安全的资源，大多数浏览器是允许http访问的）。因为页面中可能会写死很多的资源请求链接为http，所以我们https改造的难点就在这里，要将所有的资源请求改为https的。</p><h3 id="改造步骤"><a href="#改造步骤" class="headerlink" title="改造步骤"></a>改造步骤</h3><ol><li>nginx打开https功能，证书制作（测试环境，线上环境由OP部门完成，具体证书认证之类的流程不太清楚）；完成第1步后，页面就可以通过https访问，但是打开页面后基本都是样式错乱，原因就是页面需要的JS,CSS等资源是http的请求，被浏览器block掉了；</li><li>将资源请求改为https，主要需要找到这些资源是在哪里发出去的，把协议改成<code>https</code>或者用<code>//</code>让浏览器去自动选择；</li><li>完成以上两步，基本就可以了。但是也有一些资源是第三方维护的，不支持https，这时我们是通过代理解决的；我们技术方案是服务器回包给浏览器前，将包拦截，匹配出需要进行代理替换的域名，改为代理域名。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上海居住证办理流程</title>
    <link href="/2016/07/19/sh-juzhuzheng/"/>
    <url>/2016/07/19/sh-juzhuzheng/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近去办理了上海市居住证，总结一下流程。</p></blockquote><h3 id="租赁备案办理流程"><a href="#租赁备案办理流程" class="headerlink" title="租赁备案办理流程"></a>租赁备案办理流程</h3><ol><li>居委会出具的房屋租赁合同登记备案办证通知单</li><li>租赁合同原件复印件</li><li>房东身份证、共有人身份证复印件</li><li>房产证复印件</li><li>承租人身份证</li></ol><h3 id="居住证办理流程"><a href="#居住证办理流程" class="headerlink" title="居住证办理流程"></a>居住证办理流程</h3><ol><li>租赁备案证明</li><li>承租人身份证、劳动合同、满6个月的社保单（注：若身份证地址与实际户籍地址不一致要带户口本）</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>人均居住面积不低于5平米</li><li>备案要求房东到场</li></ol>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本分类的调研</title>
    <link href="/2016/07/16/text-classify/"/>
    <url>/2016/07/16/text-classify/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近拿到一批用户对产品的反馈数据，需要进行文本分类，找出用户的痛点，从而发掘产品的优化方向。</p></blockquote><h3 id="本文主要调研了："><a href="#本文主要调研了：" class="headerlink" title="本文主要调研了："></a>本文主要调研了：</h3><ol><li>LDA主题分类模型（python gensim包）；</li><li>Naive Bayes;</li><li>SVM;</li></ol><h4 id="首先调研了LDA主题分类模型，使用python-gensim包，代码如下："><a href="#首先调研了LDA主题分类模型，使用python-gensim包，代码如下：" class="headerlink" title="首先调研了LDA主题分类模型，使用python gensim包，代码如下："></a>首先调研了LDA主题分类模型，使用python gensim包，代码如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> jieba.analyse<br><span class="hljs-keyword">import</span>  os, sys<br><span class="hljs-keyword">from</span> gensim <span class="hljs-keyword">import</span> corpora, models, similarities<br><br>train_set = []<br><br>walk = os.walk(<span class="hljs-string">&#x27;./data&#x27;</span>) <span class="hljs-comment">#数据放在了data目录，每条反馈数据放在了单独的一个文件中</span><br><br>jieba.load_userdict(<span class="hljs-string">&quot;userdict.txt&quot;</span>)<br><br>stopwords = [line.strip().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./stopwords.txt&#x27;</span>)]<br>stopwords.append(<span class="hljs-string">&#x27; &#x27;</span>)<br><br><br><span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> walk:<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:<br>f = <span class="hljs-built_in">open</span>(os.path.join(root, name), <span class="hljs-string">&#x27;r&#x27;</span>)<br>raw = f.read()<br>word_list = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> _: _ <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stopwords, jieba.cut(raw, cut_all = <span class="hljs-literal">False</span>))<br>train_set.append(word_list)<br><br>num = <span class="hljs-number">20</span>  <span class="hljs-comment">#提取20个主题</span><br><br>dic = corpora.Dictionary(train_set)<br>corpus = [dic.doc2bow(text) <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> train_set]<br>tfidf = models.TfidfModel(corpus)<br>corpus_tfidf = tfidf[corpus]<br>lda = models.LdaModel(corpus_tfidf, id2word = dic, num_topics = num)<br>corpus_lda = lda[corpus_tfidf]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num):<br><span class="hljs-built_in">print</span> lda.print_topic(i)<br><br></code></pre></td></tr></table></figure><p>结果： 提取出来的主题很难解释，效果不怎么好。</p><hr><h4 id="接下来调研了有监督学习-Naive-Bayes和SVM，代码实现如下（使用python-sklearn）"><a href="#接下来调研了有监督学习-Naive-Bayes和SVM，代码实现如下（使用python-sklearn）" class="headerlink" title="接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）"></a>接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> jieba.analyse<br><span class="hljs-keyword">import</span>  os, sys<br><span class="hljs-keyword">import</span> sklearn.feature_extraction<br><span class="hljs-keyword">import</span> sklearn.naive_bayes <span class="hljs-keyword">as</span> nb<br><span class="hljs-keyword">import</span> sklearn.externals.joblib <span class="hljs-keyword">as</span> jl<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><span class="hljs-keyword">import</span> xlrd<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;utf8&#x27;</span>) <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_result</span>(<span class="hljs-params">actual,pred</span>):  <br>    m_precision = metrics.precision_score(actual,pred);  <br>    m_recall = metrics.recall_score(actual,pred);  <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;predict info:&#x27;</span>  <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;precision:&#123;0:.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(m_precision)  <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;recall:&#123;0:0.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(m_recall);  <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;f1-score:&#123;0:.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(metrics.f1_score(actual,pred));  <br><br><br>train_set = []<br><br>jieba.load_userdict(<span class="hljs-string">&quot;userdict.txt&quot;</span>)<br><br>stopwords = [line.strip().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./stopwords.txt&#x27;</span>)]<br>stopwords.append(<span class="hljs-string">&#x27; &#x27;</span>)<br><br>kvlist = []<br>targetlist = []<br><br>gnb = nb.MultinomialNB(alpha = <span class="hljs-number">0.01</span>)<br>fh = sklearn.feature_extraction.FeatureHasher(n_features=<span class="hljs-number">15000</span>,non_negative=<span class="hljs-literal">True</span>,input_type=<span class="hljs-string">&#x27;string&#x27;</span>)<br><br><span class="hljs-comment"># get train data, 标记的训练数据，excel中每行一条数据：第一列为需要分类的文本数据，第二行为人工标记的分类</span><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;./data/train.csv.xls&#x27;</span>)<br>table = data.sheets()[<span class="hljs-number">0</span>]<br>nrows = table.nrows<br>ncols = table.ncols<br><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, nrows):<br>line = table.row_values(r)<br><span class="hljs-keyword">if</span> line[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;&#x27;</span>:<br>targetlist += [<span class="hljs-built_in">int</span>(line[<span class="hljs-number">1</span>])]<br>wordlist = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> _: _ <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stopwords, jieba.cut(line[<span class="hljs-number">0</span>], cut_all = <span class="hljs-literal">False</span>))<br>kvlist += [ [ i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> wordlist ] ]<br><br><span class="hljs-comment"># get test data，标记的测试数据，格式同训练数据</span><br>testlist = []<br>testtargetlist = []<br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;./data/test.xls&#x27;</span>)<br>table = data.sheets()[<span class="hljs-number">0</span>]<br>nrows = table.nrows<br>ncols = table.ncols<br><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, nrows):<br>line = table.row_values(r)<br><span class="hljs-keyword">if</span> line[<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;&#x27;</span>:<br>testtargetlist += [<span class="hljs-built_in">int</span>(line[<span class="hljs-number">1</span>])]<br>wordlist = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> _: _ <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stopwords, jieba.cut(line[<span class="hljs-number">0</span>], cut_all = <span class="hljs-literal">False</span>))<br>testlist += [ [ i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> wordlist ] ]<br><br><span class="hljs-comment">#验证模型的准确率，召回率</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;*************************\nNB\n*************************&#x27;</span>  <br>X = fh.fit_transform(kvlist)<br>testX = fh.fit_transform(testlist)<br><br>gnb.fit(X,targetlist)<br>result = gnb.predict(testX)<br><br>calculate_result(testtargetlist, result)<br><br><span class="hljs-keyword">from</span> sklearn.svm <span class="hljs-keyword">import</span> SVC <br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;*************************\nSVM\n*************************&#x27;</span>  <br>svclf = SVC(kernel = <span class="hljs-string">&#x27;linear&#x27;</span>)<span class="hljs-comment">#default with &#x27;rbf&#x27;  </span><br>svclf.fit(X,targetlist)  <br>pred = svclf.predict(testX);  <br>calculate_result(testtargetlist,pred);<br><br><span class="hljs-comment">#使用训练出来的SVM模型对原始数据进行预测，原始数据格式为：每条数据单独存放在一个文本文件中</span><br>walk = os.walk(<span class="hljs-string">&#x27;./data/2016&#x27;</span>)<br><span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> walk:<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:<br>f = <span class="hljs-built_in">open</span>(os.path.join(root, name), <span class="hljs-string">&#x27;r&#x27;</span>)<br>raw = f.read()<br>word_list = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> _: _ <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stopwords, jieba.cut(raw, cut_all = <span class="hljs-literal">False</span>))<br>kvlist = [ [ i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> word_list ] ]<br>X = fh.fit_transform(kvlist)<br>pred = svclf.predict(X)<br><span class="hljs-built_in">print</span> raw<br><span class="hljs-built_in">print</span> pred<br></code></pre></td></tr></table></figure><p>结果：SVM的准备率，召回率接近70%，比Naive Bayes稍微好些。</p><hr><p>参考文档：</p><ol><li><a href="http://scikit-learn.org/stable/user_guide.html">scikit-learn官网文档</a></li><li><a href="http://blog.csdn.net/abcjennifer/article/details/23615947">应用scikit-learn做文本分类</a></li><li><a href="http://myg0u.com/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/2015/05/06/use-sklearn-jieba.html">使用sklearn + jieba中文分词构建文本分类器</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Machine-Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>scikitlearn</tag>
      
      <tag>jieba</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Get Started</title>
    <link href="/2016/07/10/hello-world/"/>
    <url>/2016/07/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p><code>hexo deploy</code>只会将编译结果push到master上，markdown文件并不会推上去。如果自己换了电脑，就面临原始数据丢失的问题。解决方案：在github上新建一个分支，每次编辑后，将原始内容推到分支上即可。</p><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
