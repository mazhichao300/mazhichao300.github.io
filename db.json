{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/best_method_to_child.md","hash":"3125badb4de61fdd3cd7ccff3985e195091a3001","modified":1657176449838},{"_id":"source/_posts/card-safe.md","hash":"1c1928d0dca11b7f6f768cc8b22d035ecacc9be7","modified":1657176449838},{"_id":"source/_posts/hello-world.md","hash":"7aa0b27bb68d0414fa640d1febafc5c24e61495f","modified":1657176449838},{"_id":"source/_posts/how_to_install_rom_mi_max.md","hash":"ff55c75edae52cf537056227a1d84e8d95fe9213","modified":1657176449838},{"_id":"source/_posts/how_hu_c.md","hash":"e32d9ef013c3926b87cd5ade864630204450fc19","modified":1657176449838},{"_id":"source/_posts/jvm_class_load.md","hash":"cb8e9fff1a2bdd97f3dcd4b8ba8f92e916c9c2da","modified":1657176449838},{"_id":"source/_posts/https.md","hash":"6bb713e5a503aede2fb75c7e320d060dead02eca","modified":1657176449838},{"_id":"source/_posts/linux_awk.md","hash":"84664a939b8502c0b46d6b0ace6ae5707eec11b2","modified":1657176449839},{"_id":"source/_posts/markdown-ppt.md","hash":"0343b9383288f9ff40b548973be150353f794519","modified":1657176449839},{"_id":"source/_posts/micro-msg-pay.md","hash":"dc0ebc6dce71d6d53e7154062ec2e88dc1740cc2","modified":1657176449839},{"_id":"source/_posts/mysql_index.md","hash":"8993c8246fc0dc6a09012a7dffbfefcc2e42fc7c","modified":1657176449839},{"_id":"source/_posts/maven.md","hash":"8b7c03759685eb6ffb38b72eeb788bac6d27cc7b","modified":1657176449839},{"_id":"source/_posts/jvm_memory_model.md","hash":"2d2496f9f89cfa6bf4a4edb4b824ef2d6dcf89f3","modified":1657176449839},{"_id":"source/_posts/passport.md","hash":"38a2b2c0ead62135a3203e19080c2e7c7f3eb4b8","modified":1657176449840},{"_id":"source/_posts/mysql_insert_or_update.md","hash":"a6e6fef934fa3fc558fc5bbafac9f465fe50b304","modified":1657176449839},{"_id":"source/_posts/php-email-html.md","hash":"4547c10b055764fbac617f284f4047a10f450084","modified":1657176449840},{"_id":"source/_posts/mysql_load_data_infile.md","hash":"ce393981d496db446bd52a448b1f355cf127e7d1","modified":1657176449839},{"_id":"source/_posts/php-fatal-memory-exhauste.md","hash":"2890c850e4a1db28cf31936d9558dac6f7166a59","modified":1657176449840},{"_id":"source/_posts/nginx_map.md","hash":"47fc806cdb973cbb0614502864c1be51ea5a086c","modified":1657176449840},{"_id":"source/_posts/python_syntax.md","hash":"98264eaeb9d1abf8cd4c5163d4be9829f0fac9fc","modified":1657176449840},{"_id":"source/_posts/runner.md","hash":"fe35c5416c39a49a5ffcc92826d81cb87d265277","modified":1657176449840},{"_id":"source/_posts/sh-gongjijin.md","hash":"f501428b0f2dfabf2b598150d253452f26854052","modified":1657176449840},{"_id":"source/_posts/spring_boot_mybatis.md","hash":"96d57732516dc20d6bffd016047beec07065cdc3","modified":1657176449840},{"_id":"source/_posts/text-classify.md","hash":"0d3932561563be961be5834a9f2499bbac874ee6","modified":1657176449840},{"_id":"source/categories/index.md","hash":"76945386990c8bcb03dcee3f07c444932e9d708c","modified":1657176449841},{"_id":"source/tags/index.md","hash":"42a12b19aaed17e57e0dcf3fa815b64aaddc8839","modified":1657176449841},{"_id":"source/_posts/web-safe.md","hash":"99176753f3107ee142f6c2d2379d85954bb55fda","modified":1657176449841},{"_id":"source/_posts/sh-juzhuzheng.md","hash":"b748dc40b55301fb816edc778ceef81706d694e5","modified":1657176449840},{"_id":"source/about/index.md","hash":"be91ad353196f30ab1f3a630efe95999e549a5f1","modified":1657176726810},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657180731810},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"0bc354a01c5e6e9de43bf67456dc16c59d400139","modified":1657180731412},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1657180731814},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1657180731412},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1657180731075},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1657180731815},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1657180731815},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1657180731814},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"ebe26856c4cc286df3181136b5b391dd2e5f5ec7","modified":1657180731813},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1657180731814},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1657180731815},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1657180731814},{"_id":"node_modules/hexo-theme-fluid/layout/.DS_Store","hash":"e2295dbe42d85b294e6f3aeefaf3623bd31759ed","modified":1657180731069},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1657180731078},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1657180731815},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1657180731079},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1657180731085},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1657180731090},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1657180731090},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1657180731090},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1657180731092},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1657180731082},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1657180731083},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1657180731095},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1657180731095},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1657180731085},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1657180731093},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1657180731082},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1657180731088},{"_id":"node_modules/hexo-theme-fluid/source/.DS_Store","hash":"e11e97632e6d13d5b9dccadcc514268f3c039508","modified":1657180731071},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1657180731087},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1657180731086},{"_id":"node_modules/hexo-theme-fluid/scripts/.DS_Store","hash":"daec53fd4601c37ca272321ba2eb594d9b0a43ac","modified":1657180731069},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1657180731089},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1657180731091},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1657180731094},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1657180731403},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1657180731094},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":1657180731089},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1657180731406},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1657180731399},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1657180731410},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1657180731408},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1657180731399},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1657180731400},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1657180731403},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1657180731407},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1657180731401},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1657180731410},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1657180731410},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1657180731410},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1657180731403},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1657180731398},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1657180731407},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1657180731411},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1657180731410},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1657180731410},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1657180731395},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1657180731401},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1657180731405},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1657180731407},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1657180731404},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1657180731394},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1657180731407},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1657180731093},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1657180731071},{"_id":"node_modules/hexo-theme-fluid/scripts/events/.DS_Store","hash":"80308812974d7cb7e001cd8f64ff9fced30ff139","modified":1657180731070},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1657180731076},{"_id":"node_modules/hexo-theme-fluid/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1657180731072},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1657180731805},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1657180731085},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1657180731807},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1657180731412},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1657180731791},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1657180731791},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1657180731394},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1657180731397},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1657180731404},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1657180731403},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1657180731401},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1657180731393},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1657180731812},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1657180731092},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1657180731083},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1657180731083},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1657180731409},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1657180731405},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1657180731094},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1657180731410},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1657180731088},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1657180731087},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1657180731086},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1657180731095},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1657180731088},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1657180731093},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1657180731091},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1657180731096},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1657180731081},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1657180731096},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1657180731095},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1657180731081},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":1657180731088},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1657180731089},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1657180731090},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1657180731086},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1657180731091},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":1657180731091},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1657180731085},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1657180731092},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1657180731087},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1657180731092},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1657180731399},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1657180731095},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1657180731091},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1657180731401},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1657180731401},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1657180731402},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1657180731088},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1657180731094},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1657180731404},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1657180731403},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1657180731406},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1657180731095},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1657180731094},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1657180731808},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1657180731796},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1657180731792},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1657180731800},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1657180731798},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1657180731796},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1657180731797},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1657180731799},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1657180731806},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1657180731806},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1657180731795},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1657180731807},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1657180731799},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1657180731801},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1657180731804},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1657180731804},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1657180731807},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1657180731799},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1657180731808},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1657180731809},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1657180731806},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1657180731794},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1657180731798},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1657180731803},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1657180731811},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1657180731800},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1657180731804},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1657180731804},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1657180731807},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1657180731808},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1657180731795},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1657180731809},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1657180731808},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1657180731808},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1657180731810},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1657180731810},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1657180731811},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1657180731804},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1657180731787},{"_id":"public/local-search.xml","hash":"e0508c073ed9b635dfbb2b899b36e6bb0d7526e9","modified":1657181875577},{"_id":"public/about/index.html","hash":"9d48fab547ac7b15bb04231ff081308783908fd9","modified":1657181875577},{"_id":"public/tags/index.html","hash":"07bf87553933eb4bbc8ca6797ad8f02c312e1a87","modified":1657181875577},{"_id":"public/archives/index.html","hash":"1f8aca82366b0348d1936c36f0e51e765c242f5f","modified":1657181875577},{"_id":"public/archives/page/2/index.html","hash":"d6e6b6c9ff98168d3e122cfb1a1c11ef99182c1e","modified":1657181875577},{"_id":"public/archives/page/3/index.html","hash":"cfcd5b701f285250d2e4966194b19cf4be76f689","modified":1657181875577},{"_id":"public/archives/2016/index.html","hash":"fca98ddcd961a8643f41c6ae06494c7ec6ffd8fa","modified":1657181875577},{"_id":"public/archives/2016/page/2/index.html","hash":"e09fd75beb80b3fcf6f8ca66b90b293e7a8f2a41","modified":1657181875577},{"_id":"public/archives/2016/08/index.html","hash":"283bf4d2b5e400f30df63831dc2e3ba523bbdc53","modified":1657181875577},{"_id":"public/archives/2017/index.html","hash":"2b456d3af71fc97a7f26b6d54509a22f296c9380","modified":1657181875577},{"_id":"public/archives/2017/page/2/index.html","hash":"60185c0814b876afb350ca2acafed38e22ea1b7b","modified":1657181875577},{"_id":"public/archives/2017/01/index.html","hash":"a5ffef0448d97d95dc734e67da79237f41e15f39","modified":1657181875577},{"_id":"public/archives/2017/03/index.html","hash":"47a02a203e657759f6ff5aa39b9f2f9654e483d9","modified":1657181875577},{"_id":"public/archives/2017/04/index.html","hash":"d5209cb999e79c199ae226f22f8ee92b03f59284","modified":1657181875577},{"_id":"public/archives/2017/05/index.html","hash":"7e7c7fc7d3d02f8ffb0be8ca93769e6bd3900d8a","modified":1657181875577},{"_id":"public/archives/2017/06/index.html","hash":"3722b86ad756339100fc6a226a50a9809025b0fe","modified":1657181875577},{"_id":"public/archives/2017/07/index.html","hash":"623e718e1a5d8c20dd2331653ce53fc3cb78fcd0","modified":1657181875577},{"_id":"public/archives/2016/12/index.html","hash":"7485c204167f697556ec004278d7fdca9bbdb90e","modified":1657181875577},{"_id":"public/archives/2017/08/index.html","hash":"dcf7ca193993d8621776ec46998388221c85c30c","modified":1657181875577},{"_id":"public/archives/2016/07/index.html","hash":"b4d4c73167ae56c26f33258f6b184dbd6f8bdb52","modified":1657181875577},{"_id":"public/categories/读书笔记/index.html","hash":"accb4f49f4f5ba9c517804df3198b5892469b312","modified":1657181875577},{"_id":"public/categories/生活/index.html","hash":"27de7f063393814ece402de1a226667935989071","modified":1657181875577},{"_id":"public/categories/手机/index.html","hash":"afdfe48c47d86f3496df01ce068e6d4692a59553","modified":1657181875577},{"_id":"public/categories/linux/index.html","hash":"9e528acb20dacc1095bcb75510b2536ec903656b","modified":1657181875577},{"_id":"public/categories/JAVA/index.html","hash":"0e54511a498a29ddd11ffb6a004040000a8c4cda","modified":1657181875577},{"_id":"public/categories/工具/index.html","hash":"9ad6ecacac6e48cc955d9002517e361eb527c224","modified":1657181875577},{"_id":"public/categories/mysql/index.html","hash":"a4329c7d2791c6ee4b12da03f10c7e9636ce02d9","modified":1657181875577},{"_id":"public/categories/PHP/index.html","hash":"37039e35f9b7ab6d35eef98dbce660842973a052","modified":1657181875577},{"_id":"public/categories/Machine-Learning/index.html","hash":"92ea630a5d16e1f326992991113f73b130827f55","modified":1657181875577},{"_id":"public/tags/教育/index.html","hash":"a138c4449322409f91a31ca40935d44390c5a040","modified":1657181875577},{"_id":"public/categories/Python/index.html","hash":"c236d1d7f8da410a6d1bd193868bf2bf11d22887","modified":1657181875577},{"_id":"public/categories/Web/index.html","hash":"37c6885b89addc5605544eee50696aded75d4671","modified":1657181875577},{"_id":"public/tags/信用卡/index.html","hash":"3c55168377ff64b4f8dbe19195e0711a8b979e9b","modified":1657181875577},{"_id":"public/tags/沪C/index.html","hash":"25d64b5e3e432864600189a49a8d3c1ef40a45e0","modified":1657181875577},{"_id":"public/tags/小米Max/index.html","hash":"32d4534b1c8ac41b4e8eb2578e180a2544406a27","modified":1657181875577},{"_id":"public/tags/https/index.html","hash":"f7371da8207f2f271d68b60c7e028c14a2460ee6","modified":1657181875577},{"_id":"public/tags/JVM/index.html","hash":"9dd09ba45fdd5033c769985b4bdd9383621dfc39","modified":1657181875577},{"_id":"public/tags/类加载/index.html","hash":"020f62c1c6d53be030f65e270a8d0c621e199999","modified":1657181875577},{"_id":"public/tags/双亲委派模型/index.html","hash":"3532db191b232c63a40eb8340213ec13946954c2","modified":1657181875577},{"_id":"public/tags/markdown/index.html","hash":"e158bd6f2bf70d80fc6f9147c121f7371a631c18","modified":1657181875577},{"_id":"public/tags/H5/index.html","hash":"e579a55132f474b17119a65bac67f45b6353367a","modified":1657181875577},{"_id":"public/tags/awk/index.html","hash":"df0915d5fee9f76ad57db0018794d7ba484a1efd","modified":1657181875577},{"_id":"public/tags/索引/index.html","hash":"22f5e94b48200edb0f2cc833f5d4002d0141311e","modified":1657181875577},{"_id":"public/tags/WEBAPP/index.html","hash":"60d883db77de991ca2a432c5a5725792d604e9aa","modified":1657181875577},{"_id":"public/tags/mysql/index.html","hash":"b79981d7abb780f0e8409d1d5ae1fb87c6eedefe","modified":1657181875577},{"_id":"public/tags/java/index.html","hash":"5ceff5b954b955e80b3bfc991b555559ab286fb6","modified":1657181875577},{"_id":"public/tags/maven/index.html","hash":"a7e4d054bf9bd397273915312b07ada0072afbdc","modified":1657181875577},{"_id":"public/tags/生活/index.html","hash":"b491abcc73b479a4444e10277d7523f1293b79f3","modified":1657181875577},{"_id":"public/tags/email/index.html","hash":"ff01a5ea5ce455dd50cc3d02e014f898cd3653e0","modified":1657181875577},{"_id":"public/tags/ppt/index.html","hash":"d49f4b6f5bd6cf709cc6fc204e2709fa01b3aaed","modified":1657181875577},{"_id":"public/tags/PHP/index.html","hash":"2c405afa3331c20f32848999a2de7b314685366e","modified":1657181875577},{"_id":"public/tags/nginx/index.html","hash":"6be214f1a4a4c7be93b4f67d0d667f124446ae9f","modified":1657181875577},{"_id":"public/tags/python/index.html","hash":"5599ac1b0cd272f1cb4eb4e48afc6c7579731cc8","modified":1657181875577},{"_id":"public/tags/springboot/index.html","hash":"1d271f3cddcdad9d7c700491915b7da6cf6b9848","modified":1657181875577},{"_id":"public/tags/scikitlearn/index.html","hash":"3805417f6ad8e735f27a0c5025a083643b31b492","modified":1657181875577},{"_id":"public/tags/jieba/index.html","hash":"d987d77036c992c314cc71aeb3dab10e993629bb","modified":1657181875577},{"_id":"public/tags/网络安全/index.html","hash":"e96ff5f01ed10a046e171e6bd13cae61842c58a4","modified":1657181875577},{"_id":"public/tags/mybatis/index.html","hash":"d8ee9e329249b9c6dc5f2d38da18c002087fc489","modified":1657181875577},{"_id":"public/categories/index.html","hash":"cf84c093c78f5da03cf7403f012762fe33a49409","modified":1657181875577},{"_id":"public/2017/08/25/python_syntax/index.html","hash":"9e5d2f8d6942e56f1baf28fcd444de2637541a7f","modified":1657181875577},{"_id":"public/2017/07/18/how_hu_c/index.html","hash":"3219e7dd243e4e4e569ab45ef86b594627eb5fb1","modified":1657181875577},{"_id":"public/2017/07/12/linux_awk/index.html","hash":"f8977e08cc9224342aa5bd606afa30dc4ea31472","modified":1657181875577},{"_id":"public/2017/07/08/best_method_to_child/index.html","hash":"065e7948a6bc7ac187a52acb864efef7cca8bdc8","modified":1657181875577},{"_id":"public/2017/06/27/nginx_map/index.html","hash":"c60506f93882af2666508c6acd7a9ceb14dbb10b","modified":1657181875577},{"_id":"public/2017/05/08/spring_boot_mybatis/index.html","hash":"1623f4276077c4ddc5f7d094e37e71bd1e28171a","modified":1657181875577},{"_id":"public/2017/04/21/mysql_index/index.html","hash":"4055a4b43ffc4c3a4bd59f848e43f0889af93ada","modified":1657181875577},{"_id":"public/2017/04/18/maven/index.html","hash":"ef9ba71846f0d025f8ce46df63fe70abade2b89a","modified":1657181875577},{"_id":"public/2017/04/11/jvm_class_load/index.html","hash":"b4bb04a6f4c63533f9cdf85f7dd964ec3e533ffd","modified":1657181875577},{"_id":"public/2017/04/10/jvm_memory_model/index.html","hash":"77123bb13a1836a8cae1e710b1564e7835b81c42","modified":1657181875577},{"_id":"public/2017/03/27/markdown-ppt/index.html","hash":"5d6ee2cbfc240d3f1dcbe4a2ff71edefaaea64f0","modified":1657181875577},{"_id":"public/2017/03/17/php-email-html/index.html","hash":"fc0bd972f476d2531aef11efe7369929abf01f4f","modified":1657181875577},{"_id":"public/2017/03/17/php-fatal-memory-exhauste/index.html","hash":"8903f5e01d8e133cf4e8cf35310344ce07e01cc0","modified":1657181875577},{"_id":"public/2017/03/08/sh-gongjijin/index.html","hash":"c17dd96737016e7c1a2882e3b827b4a7da7d8702","modified":1657181875577},{"_id":"public/2017/01/06/how_to_install_rom_mi_max/index.html","hash":"b62c24b372e1ca40e4f89562539fc539cde8b21c","modified":1657181875577},{"_id":"public/2016/12/06/mysql_insert_or_update/index.html","hash":"f5e28c34d57d81cc36b749aba07a005bf75e8aac","modified":1657181875577},{"_id":"public/2016/12/06/mysql_load_data_infile/index.html","hash":"d9553183537bc4a68437c050c18cd32c69912e2b","modified":1657181875577},{"_id":"public/2016/12/05/card-safe/index.html","hash":"098c22c497d3f810047d351f1dd90d7b0f9c7e00","modified":1657181875577},{"_id":"public/2016/08/22/web-safe/index.html","hash":"b2ac128135470ea904dd2bd9abfa486b6c26dfdc","modified":1657181875577},{"_id":"public/2016/07/29/passport/index.html","hash":"61c4753168fa81701b110a9d4d23648af8a114ff","modified":1657181875577},{"_id":"public/2016/08/03/runner/index.html","hash":"6bf3dd062d9b8bf12b8500f406d4137e7cefdebb","modified":1657181875577},{"_id":"public/2016/07/28/micro-msg-pay/index.html","hash":"37cc82385b7ac3378efba3dc914ef4d36041789c","modified":1657181875577},{"_id":"public/2016/07/19/https/index.html","hash":"11273807abc3dda998153e35395d29196e33a2d9","modified":1657181875577},{"_id":"public/2016/07/16/text-classify/index.html","hash":"8ccc23c321b73d96db07bcf266b59ec50ac23413","modified":1657181875577},{"_id":"public/2016/07/19/sh-juzhuzheng/index.html","hash":"c7494832a47541924145ece7e1306a9aa6a60247","modified":1657181875577},{"_id":"public/2016/07/10/hello-world/index.html","hash":"f2f44d39a4fc1f87b2526cda8ca4ae9ee6f9c197","modified":1657181875577},{"_id":"public/tags/Python/index.html","hash":"58f6f432b25afa16a7cc3521df218cec8ef20be2","modified":1657181875577},{"_id":"public/404.html","hash":"8d9db6ec9d6bc5422c9c6aa0c2181e3e2a04e43b","modified":1657181875577},{"_id":"public/links/index.html","hash":"c3c287e3924d2a7609f3953fbe592506215c4bf7","modified":1657181875577},{"_id":"public/page/2/index.html","hash":"c2e2ed1933e0b937a11fc27f227fbd76cd7eb8be","modified":1657181875577},{"_id":"public/page/3/index.html","hash":"db8945e1c213d67bd346a2fcb048153563bafe2b","modified":1657181875577},{"_id":"public/index.html","hash":"55b57bd48da89699e9673391a7283e5dfec10906","modified":1657181875577},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1657181875577},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1657181875577},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1657181875577},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1657181875577},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1657181875577},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1657181875577},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1657181875577},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1657181875577},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1657181875577},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1657181875577},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1657181875577},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1657181875577},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1657181875577},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1657181875577},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1657181875577},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1657181875577},{"_id":"public/css/main.css","hash":"f7ce6ed5308c621930136e91fe5e47d1ad91130b","modified":1657181875577},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1657181875577}],"Category":[{"name":"读书笔记","_id":"cl5arauwd0004tswr3rf43o7o"},{"name":"生活","_id":"cl5arauwf000atswra1g894cv"},{"name":"手机","_id":"cl5arauwh000ltswrgxml8r8n"},{"name":"Web","_id":"cl5arauwi000stswr5e1ehwgd"},{"name":"JAVA","_id":"cl5arauwj000ytswrhk9y1fx3"},{"name":"linux","_id":"cl5arauwj0016tswr2nkc74iv"},{"name":"工具","_id":"cl5arauwk001btswrhnnc3d2o"},{"name":"mysql","_id":"cl5arauwm001otswrg8o872qj"},{"name":"PHP","_id":"cl5arauwn0028tswrauq6g3hg"},{"name":"Python","_id":"cl5arauwo002etswrcjf69l11"},{"name":"Machine-Learning","_id":"cl5arauwo002ntswr214o2xea"}],"Data":[],"Page":[{"title":"about","date":"2016-07-31T05:37:03.000Z","_content":"\n# About me\n\n* 马志超\n* 男\n* 资深研发工程师\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-31 13:37:03\n---\n\n# About me\n\n* 马志超\n* 男\n* 资深研发工程师\n","updated":"2022-07-07T06:52:06.810Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl5arauw90000tswrhh20h72f","content":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><ul>\n<li>马志超</li>\n<li>男</li>\n<li>资深研发工程师</li>\n</ul>\n","site":{"data":{}},"wordcount":18,"excerpt":"","more":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><ul>\n<li>马志超</li>\n<li>男</li>\n<li>资深研发工程师</li>\n</ul>\n"},{"title":"categories","date":"2016-07-25T13:04:48.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-25 21:04:48\ntype : categories\n---\n","updated":"2022-07-07T06:47:29.841Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl5arauwc0002tswr9smh2lpr","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"tags","date":"2016-07-25T13:04:11.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-25 21:04:11\ntype: \"tags\"\ncomments: false\n---\n","updated":"2022-07-07T06:47:29.841Z","path":"tags/index.html","layout":"page","_id":"cl5arauwd0006tswrfcxs6djs","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"layout":"post","title":"最好的方法给孩子","date":"2017-07-08T02:16:28.000Z","_content":"> 最近在读[王芳](http://baike.baidu.com/link?url=B4CVBSSVvBrDvNIiCxqbfvOQHN6yCTIyjslNGy3pb8cAuZd5Q-D3B9CtunmLgChfo3OqamRysAd-3_ctbGPs5g1mqRgxNhblnyhLSO65FE7)的《最好的方法给孩子》，所提到的一些教育理念和一些实践方法，个人比较认同，在此记录。\n\n\n## 理念\n多陪伴，教给孩子解决问题的办法，多给孩子锻炼的机会（不要事事都帮孩子做）。\n\n## 方法\n- 陪伴：利用好零碎时间，规划好整块陪伴时间，同时要做到有效陪伴\n- 教会孩子道歉：真诚的接受孩子的道歉\n- 学英语：语境很重要，父母最好跟着一起学\n- 记忆力：先培养观察力，小游戏，从房间出来后问孩子指定物品在哪里\n- 寓教于乐：利用孩子喜欢游戏的心态，家庭查字典比赛等\n- 扩展孩子的知识面：讲故事，天文地理、百科、新闻等\n- 仪式感：通过庄严温馨的仪式让孩子树立目标感，也做一个有趣的人\n- 聪明的父母慢半拍：不要事事帮孩子做好，不能剥夺孩子的实践机会\n- 专注力\n- 乐观：事情多想好的一面，解决不好的一面\n- 时间管理（不拖延）：沙漏，闹钟\n- 家庭知识竞赛机制\n\n\n\n----------------\n\n## 参考\n[《最好的方法给孩子》](https://book.douban.com/subject/26707322/)","source":"_posts/best_method_to_child.md","raw":"---\nlayout: post\ntitle:  最好的方法给孩子\ndate:   2017-07-08 10:16:28 +0800\ncategories: [读书笔记]\ntags: [教育]\n---\n> 最近在读[王芳](http://baike.baidu.com/link?url=B4CVBSSVvBrDvNIiCxqbfvOQHN6yCTIyjslNGy3pb8cAuZd5Q-D3B9CtunmLgChfo3OqamRysAd-3_ctbGPs5g1mqRgxNhblnyhLSO65FE7)的《最好的方法给孩子》，所提到的一些教育理念和一些实践方法，个人比较认同，在此记录。\n\n\n## 理念\n多陪伴，教给孩子解决问题的办法，多给孩子锻炼的机会（不要事事都帮孩子做）。\n\n## 方法\n- 陪伴：利用好零碎时间，规划好整块陪伴时间，同时要做到有效陪伴\n- 教会孩子道歉：真诚的接受孩子的道歉\n- 学英语：语境很重要，父母最好跟着一起学\n- 记忆力：先培养观察力，小游戏，从房间出来后问孩子指定物品在哪里\n- 寓教于乐：利用孩子喜欢游戏的心态，家庭查字典比赛等\n- 扩展孩子的知识面：讲故事，天文地理、百科、新闻等\n- 仪式感：通过庄严温馨的仪式让孩子树立目标感，也做一个有趣的人\n- 聪明的父母慢半拍：不要事事帮孩子做好，不能剥夺孩子的实践机会\n- 专注力\n- 乐观：事情多想好的一面，解决不好的一面\n- 时间管理（不拖延）：沙漏，闹钟\n- 家庭知识竞赛机制\n\n\n\n----------------\n\n## 参考\n[《最好的方法给孩子》](https://book.douban.com/subject/26707322/)","slug":"best_method_to_child","published":1,"updated":"2022-07-07T06:47:29.838Z","comments":1,"photos":[],"link":"","_id":"cl5arauwa0001tswr9e178k19","content":"<blockquote>\n<p>最近在读<a href=\"http://baike.baidu.com/link?url=B4CVBSSVvBrDvNIiCxqbfvOQHN6yCTIyjslNGy3pb8cAuZd5Q-D3B9CtunmLgChfo3OqamRysAd-3_ctbGPs5g1mqRgxNhblnyhLSO65FE7\">王芳</a>的《最好的方法给孩子》，所提到的一些教育理念和一些实践方法，个人比较认同，在此记录。</p>\n</blockquote>\n<h2 id=\"理念\"><a href=\"#理念\" class=\"headerlink\" title=\"理念\"></a>理念</h2><p>多陪伴，教给孩子解决问题的办法，多给孩子锻炼的机会（不要事事都帮孩子做）。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li>陪伴：利用好零碎时间，规划好整块陪伴时间，同时要做到有效陪伴</li>\n<li>教会孩子道歉：真诚的接受孩子的道歉</li>\n<li>学英语：语境很重要，父母最好跟着一起学</li>\n<li>记忆力：先培养观察力，小游戏，从房间出来后问孩子指定物品在哪里</li>\n<li>寓教于乐：利用孩子喜欢游戏的心态，家庭查字典比赛等</li>\n<li>扩展孩子的知识面：讲故事，天文地理、百科、新闻等</li>\n<li>仪式感：通过庄严温馨的仪式让孩子树立目标感，也做一个有趣的人</li>\n<li>聪明的父母慢半拍：不要事事帮孩子做好，不能剥夺孩子的实践机会</li>\n<li>专注力</li>\n<li>乐观：事情多想好的一面，解决不好的一面</li>\n<li>时间管理（不拖延）：沙漏，闹钟</li>\n<li>家庭知识竞赛机制</li>\n</ul>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://book.douban.com/subject/26707322/\">《最好的方法给孩子》</a></p>\n","site":{"data":{}},"wordcount":352,"excerpt":"","more":"<blockquote>\n<p>最近在读<a href=\"http://baike.baidu.com/link?url=B4CVBSSVvBrDvNIiCxqbfvOQHN6yCTIyjslNGy3pb8cAuZd5Q-D3B9CtunmLgChfo3OqamRysAd-3_ctbGPs5g1mqRgxNhblnyhLSO65FE7\">王芳</a>的《最好的方法给孩子》，所提到的一些教育理念和一些实践方法，个人比较认同，在此记录。</p>\n</blockquote>\n<h2 id=\"理念\"><a href=\"#理念\" class=\"headerlink\" title=\"理念\"></a>理念</h2><p>多陪伴，教给孩子解决问题的办法，多给孩子锻炼的机会（不要事事都帮孩子做）。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li>陪伴：利用好零碎时间，规划好整块陪伴时间，同时要做到有效陪伴</li>\n<li>教会孩子道歉：真诚的接受孩子的道歉</li>\n<li>学英语：语境很重要，父母最好跟着一起学</li>\n<li>记忆力：先培养观察力，小游戏，从房间出来后问孩子指定物品在哪里</li>\n<li>寓教于乐：利用孩子喜欢游戏的心态，家庭查字典比赛等</li>\n<li>扩展孩子的知识面：讲故事，天文地理、百科、新闻等</li>\n<li>仪式感：通过庄严温馨的仪式让孩子树立目标感，也做一个有趣的人</li>\n<li>聪明的父母慢半拍：不要事事帮孩子做好，不能剥夺孩子的实践机会</li>\n<li>专注力</li>\n<li>乐观：事情多想好的一面，解决不好的一面</li>\n<li>时间管理（不拖延）：沙漏，闹钟</li>\n<li>家庭知识竞赛机制</li>\n</ul>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://book.douban.com/subject/26707322/\">《最好的方法给孩子》</a></p>\n"},{"layout":"post","title":"信用卡安全","date":"2016-12-05T12:06:28.000Z","_content":">2016.8.11下午收到两条短信，北京银行信用卡被盗刷1.8W余元，2016.12.5日，盗刷款项全部追回，这里记录一下。\n\n## 被盗刷后做的事情\n1. 电话客服，挂失了卡片（挂失太快，又由于无交易密码，ATM不认，也无法到通过交易自证卡片在身边，客服建议尽快报警）；\n2. 让同事对卡片拍照，相当于人证了（不知道是否有用）；\n3. 报警（不出警，要求自己到派出所）；\n4. 第二天到银行补帐单记录，提交给派出所；\n5. 将报警回执、盗刷情况说明、身份证、卡片复印件传真给银行，同时银行将争议交易挂帐，无需还款；\n6. 漫长的等待；\n\n大概一周后（具体天数不记得了），派出所刑侦部门电话我，说不能立案，理由是：损失目前还不属于我的，不能由我报案。\n\n## 总结一下不足点\n1. 自证卡片在身边要更充分些：就近刷卡，卡片复印让派出所盖章取证，ATM查询（甚至可以故意ATM吞卡）；\n2. 一切靠自己\n\n设不设密码之争：这个感觉难有定论，如果卡被复制盗刷感觉是无密码更好些（因为自己不用承担泄露密码的责任）；如果卡丢了，估计自己要承担责任了。\n\n## 总之：\n1. 保护好卡片，刷卡时不能让卡离开自己的视线；\n2. 换芯片卡；\n3. 尽量用支付宝、微信吧\n4. 我会继续不设密码\n","source":"_posts/card-safe.md","raw":"---\nlayout: post\ntitle:  \"信用卡安全\"\ndate:   2016-12-05 20:06:28 +0800\ncategories: [生活]\ntags: [信用卡]\n---\n>2016.8.11下午收到两条短信，北京银行信用卡被盗刷1.8W余元，2016.12.5日，盗刷款项全部追回，这里记录一下。\n\n## 被盗刷后做的事情\n1. 电话客服，挂失了卡片（挂失太快，又由于无交易密码，ATM不认，也无法到通过交易自证卡片在身边，客服建议尽快报警）；\n2. 让同事对卡片拍照，相当于人证了（不知道是否有用）；\n3. 报警（不出警，要求自己到派出所）；\n4. 第二天到银行补帐单记录，提交给派出所；\n5. 将报警回执、盗刷情况说明、身份证、卡片复印件传真给银行，同时银行将争议交易挂帐，无需还款；\n6. 漫长的等待；\n\n大概一周后（具体天数不记得了），派出所刑侦部门电话我，说不能立案，理由是：损失目前还不属于我的，不能由我报案。\n\n## 总结一下不足点\n1. 自证卡片在身边要更充分些：就近刷卡，卡片复印让派出所盖章取证，ATM查询（甚至可以故意ATM吞卡）；\n2. 一切靠自己\n\n设不设密码之争：这个感觉难有定论，如果卡被复制盗刷感觉是无密码更好些（因为自己不用承担泄露密码的责任）；如果卡丢了，估计自己要承担责任了。\n\n## 总之：\n1. 保护好卡片，刷卡时不能让卡离开自己的视线；\n2. 换芯片卡；\n3. 尽量用支付宝、微信吧\n4. 我会继续不设密码\n","slug":"card-safe","published":1,"updated":"2022-07-07T06:47:29.838Z","comments":1,"photos":[],"link":"","_id":"cl5arauwc0003tswrgoxg29zt","content":"<blockquote>\n<p>2016.8.11下午收到两条短信，北京银行信用卡被盗刷1.8W余元，2016.12.5日，盗刷款项全部追回，这里记录一下。</p>\n</blockquote>\n<h2 id=\"被盗刷后做的事情\"><a href=\"#被盗刷后做的事情\" class=\"headerlink\" title=\"被盗刷后做的事情\"></a>被盗刷后做的事情</h2><ol>\n<li>电话客服，挂失了卡片（挂失太快，又由于无交易密码，ATM不认，也无法到通过交易自证卡片在身边，客服建议尽快报警）；</li>\n<li>让同事对卡片拍照，相当于人证了（不知道是否有用）；</li>\n<li>报警（不出警，要求自己到派出所）；</li>\n<li>第二天到银行补帐单记录，提交给派出所；</li>\n<li>将报警回执、盗刷情况说明、身份证、卡片复印件传真给银行，同时银行将争议交易挂帐，无需还款；</li>\n<li>漫长的等待；</li>\n</ol>\n<p>大概一周后（具体天数不记得了），派出所刑侦部门电话我，说不能立案，理由是：损失目前还不属于我的，不能由我报案。</p>\n<h2 id=\"总结一下不足点\"><a href=\"#总结一下不足点\" class=\"headerlink\" title=\"总结一下不足点\"></a>总结一下不足点</h2><ol>\n<li>自证卡片在身边要更充分些：就近刷卡，卡片复印让派出所盖章取证，ATM查询（甚至可以故意ATM吞卡）；</li>\n<li>一切靠自己</li>\n</ol>\n<p>设不设密码之争：这个感觉难有定论，如果卡被复制盗刷感觉是无密码更好些（因为自己不用承担泄露密码的责任）；如果卡丢了，估计自己要承担责任了。</p>\n<h2 id=\"总之：\"><a href=\"#总之：\" class=\"headerlink\" title=\"总之：\"></a>总之：</h2><ol>\n<li>保护好卡片，刷卡时不能让卡离开自己的视线；</li>\n<li>换芯片卡；</li>\n<li>尽量用支付宝、微信吧</li>\n<li>我会继续不设密码</li>\n</ol>\n","site":{"data":{}},"wordcount":472,"excerpt":"","more":"<blockquote>\n<p>2016.8.11下午收到两条短信，北京银行信用卡被盗刷1.8W余元，2016.12.5日，盗刷款项全部追回，这里记录一下。</p>\n</blockquote>\n<h2 id=\"被盗刷后做的事情\"><a href=\"#被盗刷后做的事情\" class=\"headerlink\" title=\"被盗刷后做的事情\"></a>被盗刷后做的事情</h2><ol>\n<li>电话客服，挂失了卡片（挂失太快，又由于无交易密码，ATM不认，也无法到通过交易自证卡片在身边，客服建议尽快报警）；</li>\n<li>让同事对卡片拍照，相当于人证了（不知道是否有用）；</li>\n<li>报警（不出警，要求自己到派出所）；</li>\n<li>第二天到银行补帐单记录，提交给派出所；</li>\n<li>将报警回执、盗刷情况说明、身份证、卡片复印件传真给银行，同时银行将争议交易挂帐，无需还款；</li>\n<li>漫长的等待；</li>\n</ol>\n<p>大概一周后（具体天数不记得了），派出所刑侦部门电话我，说不能立案，理由是：损失目前还不属于我的，不能由我报案。</p>\n<h2 id=\"总结一下不足点\"><a href=\"#总结一下不足点\" class=\"headerlink\" title=\"总结一下不足点\"></a>总结一下不足点</h2><ol>\n<li>自证卡片在身边要更充分些：就近刷卡，卡片复印让派出所盖章取证，ATM查询（甚至可以故意ATM吞卡）；</li>\n<li>一切靠自己</li>\n</ol>\n<p>设不设密码之争：这个感觉难有定论，如果卡被复制盗刷感觉是无密码更好些（因为自己不用承担泄露密码的责任）；如果卡丢了，估计自己要承担责任了。</p>\n<h2 id=\"总之：\"><a href=\"#总之：\" class=\"headerlink\" title=\"总之：\"></a>总之：</h2><ol>\n<li>保护好卡片，刷卡时不能让卡离开自己的视线；</li>\n<li>换芯片卡；</li>\n<li>尽量用支付宝、微信吧</li>\n<li>我会继续不设密码</li>\n</ol>\n"},{"title":"Hexo Get Started","date":"2016-07-10T15:17:03.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n### 备份\n`hexo deploy`只会将编译结果push到master上，markdown文件并不会推上去。如果自己换了电脑，就面临原始数据丢失的问题。解决方案：在github上新建一个分支，每次编辑后，将原始内容推到分支上即可。\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo Get Started\ndate:   2016-07-10 23:17:03 +0800\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n### 备份\n`hexo deploy`只会将编译结果push到master上，markdown文件并不会推上去。如果自己换了电脑，就面临原始数据丢失的问题。解决方案：在github上新建一个分支，每次编辑后，将原始内容推到分支上即可。\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-07-07T06:47:29.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwe0007tswr5ysv9y3i","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p><code>hexo deploy</code>只会将编译结果push到master上，markdown文件并不会推上去。如果自己换了电脑，就面临原始数据丢失的问题。解决方案：在github上新建一个分支，每次编辑后，将原始内容推到分支上即可。</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":477,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p><code>hexo deploy</code>只会将编译结果push到master上，markdown文件并不会推上去。如果自己换了电脑，就面临原始数据丢失的问题。解决方案：在github上新建一个分支，每次编辑后，将原始内容推到分支上即可。</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"外地户口如何在上海办理沪C","date":"2017-07-18T08:10:33.000Z","_content":"\n> 本文根据自己的实际上牌经历，记录一下外地户口办理沪C牌照的流程。\n\n## 条件\n拥有上海市长期居住证，且居住证地址在外环外（据说只要不在沪C限行区就可以，具体请咨询相关部门，本人的居住证地址在外环外）。\n\n## 办理流程\n### 先去交购置税（沪南路2638号）\n1. 取号交税（居住证，身份证，购置税申请表，发票报税联，合格证），刷卡交钱\n2. 刷卡后等待一会，12号窗口拿完税证明\n\n### 沪C额度审核\n1. 取号（需要看完税证明）\n2. 窗口办理（居住证，身份证，发票等，具体需要材料取号处有公示）\n\n注：交税和额度审核不需要网上说的派出所有关证明二，也不需要户口本，个人身份证明只要身份证和居住证。\n\n## 去办理牌照（沪南路下盐路）\n### 先验车\n- 车排队时，去前面的小房子填表（帖照片，拓印，填信息，按照示例填写即可），交10元\n- 把表提供给验车的小伙子，等待完成验车\n\n### 去办理牌照（3楼，具体地址可问验车的小伙子，很近）\n- 前台检查材料（合格证，完税证明，发票，保险单，身份证，居住证以及相关复印，居住证、身份证要复印在一起，前台给3块可搞定复印）\n- 进入大厅，左手第一个窗口递交材料，给号码排队\n- 等待叫号，给选号二维码（我的身份证地址和实际户籍不一致，这里还提供了户口本）\n- 有工作人员带着去选号，按照要求选即可（20选1）\n- 选定后，交345（只现金）\n- 等待出注册证和行驶证\n- 办理铁牌邮寄（15块）或者按照要求时间自取（一般2-3天）\n\n\n个人周一早上9点到的交税处，一共2个半小时全部完成，未找黄牛，材料复印3份就足够了。","source":"_posts/how_hu_c.md","raw":"---\nlayout: post\ntitle:  外地户口如何在上海办理沪C\ndate:   2017-07-18 16:10:33 +0800\ncategories: [生活]\ntags: [沪C]\n---\n\n> 本文根据自己的实际上牌经历，记录一下外地户口办理沪C牌照的流程。\n\n## 条件\n拥有上海市长期居住证，且居住证地址在外环外（据说只要不在沪C限行区就可以，具体请咨询相关部门，本人的居住证地址在外环外）。\n\n## 办理流程\n### 先去交购置税（沪南路2638号）\n1. 取号交税（居住证，身份证，购置税申请表，发票报税联，合格证），刷卡交钱\n2. 刷卡后等待一会，12号窗口拿完税证明\n\n### 沪C额度审核\n1. 取号（需要看完税证明）\n2. 窗口办理（居住证，身份证，发票等，具体需要材料取号处有公示）\n\n注：交税和额度审核不需要网上说的派出所有关证明二，也不需要户口本，个人身份证明只要身份证和居住证。\n\n## 去办理牌照（沪南路下盐路）\n### 先验车\n- 车排队时，去前面的小房子填表（帖照片，拓印，填信息，按照示例填写即可），交10元\n- 把表提供给验车的小伙子，等待完成验车\n\n### 去办理牌照（3楼，具体地址可问验车的小伙子，很近）\n- 前台检查材料（合格证，完税证明，发票，保险单，身份证，居住证以及相关复印，居住证、身份证要复印在一起，前台给3块可搞定复印）\n- 进入大厅，左手第一个窗口递交材料，给号码排队\n- 等待叫号，给选号二维码（我的身份证地址和实际户籍不一致，这里还提供了户口本）\n- 有工作人员带着去选号，按照要求选即可（20选1）\n- 选定后，交345（只现金）\n- 等待出注册证和行驶证\n- 办理铁牌邮寄（15块）或者按照要求时间自取（一般2-3天）\n\n\n个人周一早上9点到的交税处，一共2个半小时全部完成，未找黄牛，材料复印3份就足够了。","slug":"how_hu_c","published":1,"updated":"2022-07-07T06:47:29.838Z","comments":1,"photos":[],"link":"","_id":"cl5arauwe0008tswrfuch61kz","content":"<blockquote>\n<p>本文根据自己的实际上牌经历，记录一下外地户口办理沪C牌照的流程。</p>\n</blockquote>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p>拥有上海市长期居住证，且居住证地址在外环外（据说只要不在沪C限行区就可以，具体请咨询相关部门，本人的居住证地址在外环外）。</p>\n<h2 id=\"办理流程\"><a href=\"#办理流程\" class=\"headerlink\" title=\"办理流程\"></a>办理流程</h2><h3 id=\"先去交购置税（沪南路2638号）\"><a href=\"#先去交购置税（沪南路2638号）\" class=\"headerlink\" title=\"先去交购置税（沪南路2638号）\"></a>先去交购置税（沪南路2638号）</h3><ol>\n<li>取号交税（居住证，身份证，购置税申请表，发票报税联，合格证），刷卡交钱</li>\n<li>刷卡后等待一会，12号窗口拿完税证明</li>\n</ol>\n<h3 id=\"沪C额度审核\"><a href=\"#沪C额度审核\" class=\"headerlink\" title=\"沪C额度审核\"></a>沪C额度审核</h3><ol>\n<li>取号（需要看完税证明）</li>\n<li>窗口办理（居住证，身份证，发票等，具体需要材料取号处有公示）</li>\n</ol>\n<p>注：交税和额度审核不需要网上说的派出所有关证明二，也不需要户口本，个人身份证明只要身份证和居住证。</p>\n<h2 id=\"去办理牌照（沪南路下盐路）\"><a href=\"#去办理牌照（沪南路下盐路）\" class=\"headerlink\" title=\"去办理牌照（沪南路下盐路）\"></a>去办理牌照（沪南路下盐路）</h2><h3 id=\"先验车\"><a href=\"#先验车\" class=\"headerlink\" title=\"先验车\"></a>先验车</h3><ul>\n<li>车排队时，去前面的小房子填表（帖照片，拓印，填信息，按照示例填写即可），交10元</li>\n<li>把表提供给验车的小伙子，等待完成验车</li>\n</ul>\n<h3 id=\"去办理牌照（3楼，具体地址可问验车的小伙子，很近）\"><a href=\"#去办理牌照（3楼，具体地址可问验车的小伙子，很近）\" class=\"headerlink\" title=\"去办理牌照（3楼，具体地址可问验车的小伙子，很近）\"></a>去办理牌照（3楼，具体地址可问验车的小伙子，很近）</h3><ul>\n<li>前台检查材料（合格证，完税证明，发票，保险单，身份证，居住证以及相关复印，居住证、身份证要复印在一起，前台给3块可搞定复印）</li>\n<li>进入大厅，左手第一个窗口递交材料，给号码排队</li>\n<li>等待叫号，给选号二维码（我的身份证地址和实际户籍不一致，这里还提供了户口本）</li>\n<li>有工作人员带着去选号，按照要求选即可（20选1）</li>\n<li>选定后，交345（只现金）</li>\n<li>等待出注册证和行驶证</li>\n<li>办理铁牌邮寄（15块）或者按照要求时间自取（一般2-3天）</li>\n</ul>\n<p>个人周一早上9点到的交税处，一共2个半小时全部完成，未找黄牛，材料复印3份就足够了。</p>\n","site":{"data":{}},"wordcount":603,"excerpt":"","more":"<blockquote>\n<p>本文根据自己的实际上牌经历，记录一下外地户口办理沪C牌照的流程。</p>\n</blockquote>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p>拥有上海市长期居住证，且居住证地址在外环外（据说只要不在沪C限行区就可以，具体请咨询相关部门，本人的居住证地址在外环外）。</p>\n<h2 id=\"办理流程\"><a href=\"#办理流程\" class=\"headerlink\" title=\"办理流程\"></a>办理流程</h2><h3 id=\"先去交购置税（沪南路2638号）\"><a href=\"#先去交购置税（沪南路2638号）\" class=\"headerlink\" title=\"先去交购置税（沪南路2638号）\"></a>先去交购置税（沪南路2638号）</h3><ol>\n<li>取号交税（居住证，身份证，购置税申请表，发票报税联，合格证），刷卡交钱</li>\n<li>刷卡后等待一会，12号窗口拿完税证明</li>\n</ol>\n<h3 id=\"沪C额度审核\"><a href=\"#沪C额度审核\" class=\"headerlink\" title=\"沪C额度审核\"></a>沪C额度审核</h3><ol>\n<li>取号（需要看完税证明）</li>\n<li>窗口办理（居住证，身份证，发票等，具体需要材料取号处有公示）</li>\n</ol>\n<p>注：交税和额度审核不需要网上说的派出所有关证明二，也不需要户口本，个人身份证明只要身份证和居住证。</p>\n<h2 id=\"去办理牌照（沪南路下盐路）\"><a href=\"#去办理牌照（沪南路下盐路）\" class=\"headerlink\" title=\"去办理牌照（沪南路下盐路）\"></a>去办理牌照（沪南路下盐路）</h2><h3 id=\"先验车\"><a href=\"#先验车\" class=\"headerlink\" title=\"先验车\"></a>先验车</h3><ul>\n<li>车排队时，去前面的小房子填表（帖照片，拓印，填信息，按照示例填写即可），交10元</li>\n<li>把表提供给验车的小伙子，等待完成验车</li>\n</ul>\n<h3 id=\"去办理牌照（3楼，具体地址可问验车的小伙子，很近）\"><a href=\"#去办理牌照（3楼，具体地址可问验车的小伙子，很近）\" class=\"headerlink\" title=\"去办理牌照（3楼，具体地址可问验车的小伙子，很近）\"></a>去办理牌照（3楼，具体地址可问验车的小伙子，很近）</h3><ul>\n<li>前台检查材料（合格证，完税证明，发票，保险单，身份证，居住证以及相关复印，居住证、身份证要复印在一起，前台给3块可搞定复印）</li>\n<li>进入大厅，左手第一个窗口递交材料，给号码排队</li>\n<li>等待叫号，给选号二维码（我的身份证地址和实际户籍不一致，这里还提供了户口本）</li>\n<li>有工作人员带着去选号，按照要求选即可（20选1）</li>\n<li>选定后，交345（只现金）</li>\n<li>等待出注册证和行驶证</li>\n<li>办理铁牌邮寄（15块）或者按照要求时间自取（一般2-3天）</li>\n</ul>\n<p>个人周一早上9点到的交税处，一共2个半小时全部完成，未找黄牛，材料复印3份就足够了。</p>\n"},{"layout":"post","title":"小米Max刷机，救砖","date":"2017-01-06T11:56:23.000Z","_content":"\n## 小米Max刷机\n\n\n## 小米Max救砖\n使用官方的线刷包可以救砖\n\n","source":"_posts/how_to_install_rom_mi_max.md","raw":"---\nlayout: post\ntitle:  \"小米Max刷机，救砖\"\ndate:   2017-01-06 19:56:23 +0800\ncategories: [手机]\ntags: [小米Max]\n---\n\n## 小米Max刷机\n\n\n## 小米Max救砖\n使用官方的线刷包可以救砖\n\n","slug":"how_to_install_rom_mi_max","published":1,"updated":"2022-07-07T06:47:29.838Z","comments":1,"photos":[],"link":"","_id":"cl5arauwe0009tswrc9jggp4p","content":"<h2 id=\"小米Max刷机\"><a href=\"#小米Max刷机\" class=\"headerlink\" title=\"小米Max刷机\"></a>小米Max刷机</h2><h2 id=\"小米Max救砖\"><a href=\"#小米Max救砖\" class=\"headerlink\" title=\"小米Max救砖\"></a>小米Max救砖</h2><p>使用官方的线刷包可以救砖</p>\n","site":{"data":{}},"wordcount":26,"excerpt":"","more":"<h2 id=\"小米Max刷机\"><a href=\"#小米Max刷机\" class=\"headerlink\" title=\"小米Max刷机\"></a>小米Max刷机</h2><h2 id=\"小米Max救砖\"><a href=\"#小米Max救砖\" class=\"headerlink\" title=\"小米Max救砖\"></a>小米Max救砖</h2><p>使用官方的线刷包可以救砖</p>\n"},{"layout":"post","title":"网站Https改造","date":"2016-07-19T14:22:23.000Z","_content":"\n### 背景\n我们的网站是nginx+php开发的，需要进行https的改造。\n\n### 技术前提\n在https的页面中是不允许加载http资源的，包括js,css等文件（图片被认为是安全的资源，大多数浏览器是允许http访问的）。因为页面中可能会写死很多的资源请求链接为http，所以我们https改造的难点就在这里，要将所有的资源请求改为https的。\n\n\n### 改造步骤\n1. nginx打开https功能，证书制作（测试环境，线上环境由OP部门完成，具体证书认证之类的流程不太清楚）；完成第1步后，页面就可以通过https访问，但是打开页面后基本都是样式错乱，原因就是页面需要的JS,CSS等资源是http的请求，被浏览器block掉了；\n2. 将资源请求改为https，主要需要找到这些资源是在哪里发出去的，把协议改成`https`或者用`//`让浏览器去自动选择；\n3. 完成以上两步，基本就可以了。但是也有一些资源是第三方维护的，不支持https，这时我们是通过代理解决的；我们技术方案是服务器回包给浏览器前，将包拦截，匹配出需要进行代理替换的域名，改为代理域名。\n\n","source":"_posts/https.md","raw":"---\nlayout: post\ntitle:  \"网站Https改造\"\ndate:   2016-07-19 22:22:23 +0800\ncategories: [Web]\ntags: [https]\n---\n\n### 背景\n我们的网站是nginx+php开发的，需要进行https的改造。\n\n### 技术前提\n在https的页面中是不允许加载http资源的，包括js,css等文件（图片被认为是安全的资源，大多数浏览器是允许http访问的）。因为页面中可能会写死很多的资源请求链接为http，所以我们https改造的难点就在这里，要将所有的资源请求改为https的。\n\n\n### 改造步骤\n1. nginx打开https功能，证书制作（测试环境，线上环境由OP部门完成，具体证书认证之类的流程不太清楚）；完成第1步后，页面就可以通过https访问，但是打开页面后基本都是样式错乱，原因就是页面需要的JS,CSS等资源是http的请求，被浏览器block掉了；\n2. 将资源请求改为https，主要需要找到这些资源是在哪里发出去的，把协议改成`https`或者用`//`让浏览器去自动选择；\n3. 完成以上两步，基本就可以了。但是也有一些资源是第三方维护的，不支持https，这时我们是通过代理解决的；我们技术方案是服务器回包给浏览器前，将包拦截，匹配出需要进行代理替换的域名，改为代理域名。\n\n","slug":"https","published":1,"updated":"2022-07-07T06:47:29.838Z","comments":1,"photos":[],"link":"","_id":"cl5arauwf000dtswr4uk2hwsw","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>我们的网站是nginx+php开发的，需要进行https的改造。</p>\n<h3 id=\"技术前提\"><a href=\"#技术前提\" class=\"headerlink\" title=\"技术前提\"></a>技术前提</h3><p>在https的页面中是不允许加载http资源的，包括js,css等文件（图片被认为是安全的资源，大多数浏览器是允许http访问的）。因为页面中可能会写死很多的资源请求链接为http，所以我们https改造的难点就在这里，要将所有的资源请求改为https的。</p>\n<h3 id=\"改造步骤\"><a href=\"#改造步骤\" class=\"headerlink\" title=\"改造步骤\"></a>改造步骤</h3><ol>\n<li>nginx打开https功能，证书制作（测试环境，线上环境由OP部门完成，具体证书认证之类的流程不太清楚）；完成第1步后，页面就可以通过https访问，但是打开页面后基本都是样式错乱，原因就是页面需要的JS,CSS等资源是http的请求，被浏览器block掉了；</li>\n<li>将资源请求改为https，主要需要找到这些资源是在哪里发出去的，把协议改成<code>https</code>或者用<code>//</code>让浏览器去自动选择；</li>\n<li>完成以上两步，基本就可以了。但是也有一些资源是第三方维护的，不支持https，这时我们是通过代理解决的；我们技术方案是服务器回包给浏览器前，将包拦截，匹配出需要进行代理替换的域名，改为代理域名。</li>\n</ol>\n","site":{"data":{}},"wordcount":455,"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>我们的网站是nginx+php开发的，需要进行https的改造。</p>\n<h3 id=\"技术前提\"><a href=\"#技术前提\" class=\"headerlink\" title=\"技术前提\"></a>技术前提</h3><p>在https的页面中是不允许加载http资源的，包括js,css等文件（图片被认为是安全的资源，大多数浏览器是允许http访问的）。因为页面中可能会写死很多的资源请求链接为http，所以我们https改造的难点就在这里，要将所有的资源请求改为https的。</p>\n<h3 id=\"改造步骤\"><a href=\"#改造步骤\" class=\"headerlink\" title=\"改造步骤\"></a>改造步骤</h3><ol>\n<li>nginx打开https功能，证书制作（测试环境，线上环境由OP部门完成，具体证书认证之类的流程不太清楚）；完成第1步后，页面就可以通过https访问，但是打开页面后基本都是样式错乱，原因就是页面需要的JS,CSS等资源是http的请求，被浏览器block掉了；</li>\n<li>将资源请求改为https，主要需要找到这些资源是在哪里发出去的，把协议改成<code>https</code>或者用<code>//</code>让浏览器去自动选择；</li>\n<li>完成以上两步，基本就可以了。但是也有一些资源是第三方维护的，不支持https，这时我们是通过代理解决的；我们技术方案是服务器回包给浏览器前，将包拦截，匹配出需要进行代理替换的域名，改为代理域名。</li>\n</ol>\n"},{"title":"JVM类加载机制","date":"2017-04-11T03:45:54.000Z","_content":"\n## JVM类加载过程\n1. 加载\n2. 验证\n3. 准备\n4. 解析\n5. 初始化\n6. 使用\n7. 卸载\n\n## JVM类加载器-双亲委派模型\n### 类加载模型图\n![](http://oniemuf9p.bkt.clouddn.com/jvm_class_loader_model.png)\n\n### 双亲委派模型工作过程\n如果一个类加载器收到了类加载请求，它不会自己直接加载，而是会委派自己的父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时（它的搜索范围中没有找到反需的类），子加载器才会尝试自己去加载。  \n\n### 双亲委派模型的优点\n保证稳定性和安全性，比如java.lang.Object类只会由启动类加载器进行加载，如果用户自定义了一个java.lang.Object类是不会被加载的。这样保证了Object类的全局唯一性，也不会被别有用心的人替换。\n\n----\n## 参考文献\n- 《深入理解JAVA虚拟机》- 周志明","source":"_posts/jvm_class_load.md","raw":"---\ntitle: JVM类加载机制\ndate: 2017-04-11 11:45:54\ncategories: [JAVA]\ntags: [JVM,类加载,双亲委派模型]\n---\n\n## JVM类加载过程\n1. 加载\n2. 验证\n3. 准备\n4. 解析\n5. 初始化\n6. 使用\n7. 卸载\n\n## JVM类加载器-双亲委派模型\n### 类加载模型图\n![](http://oniemuf9p.bkt.clouddn.com/jvm_class_loader_model.png)\n\n### 双亲委派模型工作过程\n如果一个类加载器收到了类加载请求，它不会自己直接加载，而是会委派自己的父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时（它的搜索范围中没有找到反需的类），子加载器才会尝试自己去加载。  \n\n### 双亲委派模型的优点\n保证稳定性和安全性，比如java.lang.Object类只会由启动类加载器进行加载，如果用户自定义了一个java.lang.Object类是不会被加载的。这样保证了Object类的全局唯一性，也不会被别有用心的人替换。\n\n----\n## 参考文献\n- 《深入理解JAVA虚拟机》- 周志明","slug":"jvm_class_load","published":1,"updated":"2022-07-07T06:47:29.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwf000etswrhlhtgucn","content":"<h2 id=\"JVM类加载过程\"><a href=\"#JVM类加载过程\" class=\"headerlink\" title=\"JVM类加载过程\"></a>JVM类加载过程</h2><ol>\n<li>加载</li>\n<li>验证</li>\n<li>准备</li>\n<li>解析</li>\n<li>初始化</li>\n<li>使用</li>\n<li>卸载</li>\n</ol>\n<h2 id=\"JVM类加载器-双亲委派模型\"><a href=\"#JVM类加载器-双亲委派模型\" class=\"headerlink\" title=\"JVM类加载器-双亲委派模型\"></a>JVM类加载器-双亲委派模型</h2><h3 id=\"类加载模型图\"><a href=\"#类加载模型图\" class=\"headerlink\" title=\"类加载模型图\"></a>类加载模型图</h3><p><img src=\"http://oniemuf9p.bkt.clouddn.com/jvm_class_loader_model.png\"></p>\n<h3 id=\"双亲委派模型工作过程\"><a href=\"#双亲委派模型工作过程\" class=\"headerlink\" title=\"双亲委派模型工作过程\"></a>双亲委派模型工作过程</h3><p>如果一个类加载器收到了类加载请求，它不会自己直接加载，而是会委派自己的父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时（它的搜索范围中没有找到反需的类），子加载器才会尝试自己去加载。  </p>\n<h3 id=\"双亲委派模型的优点\"><a href=\"#双亲委派模型的优点\" class=\"headerlink\" title=\"双亲委派模型的优点\"></a>双亲委派模型的优点</h3><p>保证稳定性和安全性，比如java.lang.Object类只会由启动类加载器进行加载，如果用户自定义了一个java.lang.Object类是不会被加载的。这样保证了Object类的全局唯一性，也不会被别有用心的人替换。</p>\n<hr>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>《深入理解JAVA虚拟机》- 周志明</li>\n</ul>\n","site":{"data":{}},"wordcount":334,"excerpt":"","more":"<h2 id=\"JVM类加载过程\"><a href=\"#JVM类加载过程\" class=\"headerlink\" title=\"JVM类加载过程\"></a>JVM类加载过程</h2><ol>\n<li>加载</li>\n<li>验证</li>\n<li>准备</li>\n<li>解析</li>\n<li>初始化</li>\n<li>使用</li>\n<li>卸载</li>\n</ol>\n<h2 id=\"JVM类加载器-双亲委派模型\"><a href=\"#JVM类加载器-双亲委派模型\" class=\"headerlink\" title=\"JVM类加载器-双亲委派模型\"></a>JVM类加载器-双亲委派模型</h2><h3 id=\"类加载模型图\"><a href=\"#类加载模型图\" class=\"headerlink\" title=\"类加载模型图\"></a>类加载模型图</h3><p><img src=\"http://oniemuf9p.bkt.clouddn.com/jvm_class_loader_model.png\"></p>\n<h3 id=\"双亲委派模型工作过程\"><a href=\"#双亲委派模型工作过程\" class=\"headerlink\" title=\"双亲委派模型工作过程\"></a>双亲委派模型工作过程</h3><p>如果一个类加载器收到了类加载请求，它不会自己直接加载，而是会委派自己的父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时（它的搜索范围中没有找到反需的类），子加载器才会尝试自己去加载。  </p>\n<h3 id=\"双亲委派模型的优点\"><a href=\"#双亲委派模型的优点\" class=\"headerlink\" title=\"双亲委派模型的优点\"></a>双亲委派模型的优点</h3><p>保证稳定性和安全性，比如java.lang.Object类只会由启动类加载器进行加载，如果用户自定义了一个java.lang.Object类是不会被加载的。这样保证了Object类的全局唯一性，也不会被别有用心的人替换。</p>\n<hr>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>《深入理解JAVA虚拟机》- 周志明</li>\n</ul>\n"},{"layout":"post","title":"Linux awk命令","date":"2017-07-12T00:52:33.000Z","_content":"> awk是一个强大的文本分析工具，简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n\n> awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。\n\n> awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。\n\n\n## 使用方法\n```shell\nawk '{pattern + action}' {filenames}\n```\n\npattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。\n\n\n## 实例\n```shell\n$ cat /etc/passwd | awk -F ':' '{print $1}'\nnobody\nroot\ndaemon\n```\nawk工作流程：读入有'\\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是\"空白键\" 或 \"[tab]键\"，所以$1就是用户名。\n\n```shell\n#文件number.txt中有5列（以tab分割），统计第三列之和\n$ awk 'BEGIN {sum=0} {sum+=$3} END {print sum}' number.txt\n71188417507\n```\n\nawk工作流程：先执行BEGIN， 然后读入每行，按tab分割后执行`action {sum+=$3}`， 最后执行END将结果打印出来。\n\n```shell\n$ awk  '/1425977238827502/' wrong.txt\n67205476    1425977238827502    20209908    3752441 86800893918921209\n```\n匹配模式，搜索wrong.txt中包含1425977238827502的行，没有action，输出整行。\n\n\n```shell\n$ awk  '/1425977238827502/ {print $1}' wrong.txt\n67205476\n```\n匹配模式，搜索wrong.txt中包含1425977238827502的行，按照action输出每一列。\n\n\n----------------\n\n## 参考\n- [The GNU Awk User’s Guide](http://www.gnu.org/software/gawk/manual/gawk.html)\n- [linux awk命令详解](http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html)","source":"_posts/linux_awk.md","raw":"---\nlayout: post\ntitle:  Linux awk命令\ndate:   2017-07-12 08:52:33 +0800\ncategories: [linux]\ntags: [awk]\n---\n> awk是一个强大的文本分析工具，简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n\n> awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。\n\n> awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。\n\n\n## 使用方法\n```shell\nawk '{pattern + action}' {filenames}\n```\n\npattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。\n\n\n## 实例\n```shell\n$ cat /etc/passwd | awk -F ':' '{print $1}'\nnobody\nroot\ndaemon\n```\nawk工作流程：读入有'\\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是\"空白键\" 或 \"[tab]键\"，所以$1就是用户名。\n\n```shell\n#文件number.txt中有5列（以tab分割），统计第三列之和\n$ awk 'BEGIN {sum=0} {sum+=$3} END {print sum}' number.txt\n71188417507\n```\n\nawk工作流程：先执行BEGIN， 然后读入每行，按tab分割后执行`action {sum+=$3}`， 最后执行END将结果打印出来。\n\n```shell\n$ awk  '/1425977238827502/' wrong.txt\n67205476    1425977238827502    20209908    3752441 86800893918921209\n```\n匹配模式，搜索wrong.txt中包含1425977238827502的行，没有action，输出整行。\n\n\n```shell\n$ awk  '/1425977238827502/ {print $1}' wrong.txt\n67205476\n```\n匹配模式，搜索wrong.txt中包含1425977238827502的行，按照action输出每一列。\n\n\n----------------\n\n## 参考\n- [The GNU Awk User’s Guide](http://www.gnu.org/software/gawk/manual/gawk.html)\n- [linux awk命令详解](http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html)","slug":"linux_awk","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"photos":[],"link":"","_id":"cl5arauwg000itswr6u7vaeqj","content":"<blockquote>\n<p>awk是一个强大的文本分析工具，简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>\n</blockquote>\n<blockquote>\n<p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>\n</blockquote>\n<blockquote>\n<p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p>\n</blockquote>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">awk &#x27;&#123;pattern + action&#125;&#x27; &#123;filenames&#125;<br></code></pre></td></tr></table></figure>\n\n<p>pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span> /etc/passwd | awk -F <span class=\"hljs-string\">&#x27;:&#x27;</span> <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span></span><br>nobody<br>root<br>daemon<br></code></pre></td></tr></table></figure>\n<p>awk工作流程：读入有’\\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”，所以$1就是用户名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">文件number.txt中有5列（以tab分割），统计第三列之和</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">awk <span class=\"hljs-string\">&#x27;BEGIN &#123;sum=0&#125; &#123;sum+=$3&#125; END &#123;print sum&#125;&#x27;</span> number.txt</span><br>71188417507<br></code></pre></td></tr></table></figure>\n\n<p>awk工作流程：先执行BEGIN， 然后读入每行，按tab分割后执行<code>action &#123;sum+=$3&#125;</code>， 最后执行END将结果打印出来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">awk  <span class=\"hljs-string\">&#x27;/1425977238827502/&#x27;</span> wrong.txt</span><br>67205476    1425977238827502    20209908    3752441 86800893918921209<br></code></pre></td></tr></table></figure>\n<p>匹配模式，搜索wrong.txt中包含1425977238827502的行，没有action，输出整行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">awk  <span class=\"hljs-string\">&#x27;/1425977238827502/ &#123;print $1&#125;&#x27;</span> wrong.txt</span><br>67205476<br></code></pre></td></tr></table></figure>\n<p>匹配模式，搜索wrong.txt中包含1425977238827502的行，按照action输出每一列。</p>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.gnu.org/software/gawk/manual/gawk.html\">The GNU Awk User’s Guide</a></li>\n<li><a href=\"http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html\">linux awk命令详解</a></li>\n</ul>\n","site":{"data":{}},"wordcount":1188,"excerpt":"","more":"<blockquote>\n<p>awk是一个强大的文本分析工具，简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>\n</blockquote>\n<blockquote>\n<p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>\n</blockquote>\n<blockquote>\n<p>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p>\n</blockquote>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">awk &#x27;&#123;pattern + action&#125;&#x27; &#123;filenames&#125;<br></code></pre></td></tr></table></figure>\n\n<p>pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span> /etc/passwd | awk -F <span class=\"hljs-string\">&#x27;:&#x27;</span> <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span></span><br>nobody<br>root<br>daemon<br></code></pre></td></tr></table></figure>\n<p>awk工作流程：读入有’\\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”，所以$1就是用户名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">文件number.txt中有5列（以tab分割），统计第三列之和</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">awk <span class=\"hljs-string\">&#x27;BEGIN &#123;sum=0&#125; &#123;sum+=$3&#125; END &#123;print sum&#125;&#x27;</span> number.txt</span><br>71188417507<br></code></pre></td></tr></table></figure>\n\n<p>awk工作流程：先执行BEGIN， 然后读入每行，按tab分割后执行<code>action &#123;sum+=$3&#125;</code>， 最后执行END将结果打印出来。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">awk  <span class=\"hljs-string\">&#x27;/1425977238827502/&#x27;</span> wrong.txt</span><br>67205476    1425977238827502    20209908    3752441 86800893918921209<br></code></pre></td></tr></table></figure>\n<p>匹配模式，搜索wrong.txt中包含1425977238827502的行，没有action，输出整行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">awk  <span class=\"hljs-string\">&#x27;/1425977238827502/ &#123;print $1&#125;&#x27;</span> wrong.txt</span><br>67205476<br></code></pre></td></tr></table></figure>\n<p>匹配模式，搜索wrong.txt中包含1425977238827502的行，按照action输出每一列。</p>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.gnu.org/software/gawk/manual/gawk.html\">The GNU Awk User’s Guide</a></li>\n<li><a href=\"http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html\">linux awk命令详解</a></li>\n</ul>\n"},{"title":"使用markdown书写PPT","date":"2017-03-27T09:24:36.000Z","_content":"\n>使用[LandSlide](https://github.com/adamzap/landslide)将MarkDown生成为HTML文件，用来分享。\n\n\n## LandSlide安装\n### 使用`pip`安装\n```shell\n//先安装pip，如果已经安装，跳过此步\n$ sudo easy_install pip\n\n//安装landslide\n$ pip install landslide\n```\n\n### 源码安装\n```shell\n$ git clone https://github.com/adamzap/landslide.git\n$ cd landslide\n$ python setup.py build\n$ sudo python setup.py install\n```\n\n## 编写md文件\n官方测试用例\n\n```markdown\n# Landslide\n\n ---\n\n # Overview\n\n Generate HTML5 slideshows from markdown, ReST, or textile.\n\n ![](http://i.imgur.com/bc2xk.png){ImgCap}python{/ImgCap}\n\n Landslide is primarily written in Python, but it's themes use:\n\n - HTML5\n - Javascript\n - CSS\n\n ---\n\n # Code Sample\n\n Landslide supports code snippets\n\n     !python\n     def log(self, message, level='notice'):\n         if self.logger and not callable(self.logger):\n             raise ValueError(u\"Invalid logger set, must be a callable\")\n\n         if self.verbose and self.logger:\n             self.logger(message, level)\n```\n\n**简单说明：**\n\n- `---`用来表示当前页面结束\n- 代码段只支持`tab`符号方式\n\n## 生成HTML文件\n`$ landslide test.md -i -o > test.html`\n\n## 快捷键\n```\n h:        展示帮助\n ← →:      上/下一张幻灯片\n ESC:      展示目录\n n:        显示当前是第几张幻灯片\n b:        屏幕全黑\n e:        使当前幻灯片最大化\n 3:        展示伪3D效果\n c:        取消显示前后幻灯片预览，只显示当前幻灯片\n```\n\n---\n## 参考链接\n- [用Markdown写一个极客范儿的PPT](http://www.jianshu.com/p/e063303317cb)\n- [官网](https://github.com/adamzap/landslide)\n","source":"_posts/markdown-ppt.md","raw":"---\ntitle: 使用markdown书写PPT\ndate: 2017-03-27 17:24:36\ncategories: [工具]\ntags: [markdown,ppt]\n---\n\n>使用[LandSlide](https://github.com/adamzap/landslide)将MarkDown生成为HTML文件，用来分享。\n\n\n## LandSlide安装\n### 使用`pip`安装\n```shell\n//先安装pip，如果已经安装，跳过此步\n$ sudo easy_install pip\n\n//安装landslide\n$ pip install landslide\n```\n\n### 源码安装\n```shell\n$ git clone https://github.com/adamzap/landslide.git\n$ cd landslide\n$ python setup.py build\n$ sudo python setup.py install\n```\n\n## 编写md文件\n官方测试用例\n\n```markdown\n# Landslide\n\n ---\n\n # Overview\n\n Generate HTML5 slideshows from markdown, ReST, or textile.\n\n ![](http://i.imgur.com/bc2xk.png){ImgCap}python{/ImgCap}\n\n Landslide is primarily written in Python, but it's themes use:\n\n - HTML5\n - Javascript\n - CSS\n\n ---\n\n # Code Sample\n\n Landslide supports code snippets\n\n     !python\n     def log(self, message, level='notice'):\n         if self.logger and not callable(self.logger):\n             raise ValueError(u\"Invalid logger set, must be a callable\")\n\n         if self.verbose and self.logger:\n             self.logger(message, level)\n```\n\n**简单说明：**\n\n- `---`用来表示当前页面结束\n- 代码段只支持`tab`符号方式\n\n## 生成HTML文件\n`$ landslide test.md -i -o > test.html`\n\n## 快捷键\n```\n h:        展示帮助\n ← →:      上/下一张幻灯片\n ESC:      展示目录\n n:        显示当前是第几张幻灯片\n b:        屏幕全黑\n e:        使当前幻灯片最大化\n 3:        展示伪3D效果\n c:        取消显示前后幻灯片预览，只显示当前幻灯片\n```\n\n---\n## 参考链接\n- [用Markdown写一个极客范儿的PPT](http://www.jianshu.com/p/e063303317cb)\n- [官网](https://github.com/adamzap/landslide)\n","slug":"markdown-ppt","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwg000ktswr11cifbl0","content":"<blockquote>\n<p>使用<a href=\"https://github.com/adamzap/landslide\">LandSlide</a>将MarkDown生成为HTML文件，用来分享。</p>\n</blockquote>\n<h2 id=\"LandSlide安装\"><a href=\"#LandSlide安装\" class=\"headerlink\" title=\"LandSlide安装\"></a>LandSlide安装</h2><h3 id=\"使用pip安装\"><a href=\"#使用pip安装\" class=\"headerlink\" title=\"使用pip安装\"></a>使用<code>pip</code>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">//先安装pip，如果已经安装，跳过此步<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo easy_install pip</span><br><br>//安装landslide<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip install landslide</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/adamzap/landslide.git</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> landslide</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">python setup.py build</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo python setup.py install</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编写md文件\"><a href=\"#编写md文件\" class=\"headerlink\" title=\"编写md文件\"></a>编写md文件</h2><p>官方测试用例</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-section\"># Landslide</span><br><br> ---<br><br> # Overview<br><br> Generate HTML5 slideshows from markdown, ReST, or textile.<br><br> ![](<span class=\"hljs-link\">http://i.imgur.com/bc2xk.png</span>)&#123;ImgCap&#125;python&#123;/ImgCap&#125;<br><br> Landslide is primarily written in Python, but it&#x27;s themes use:<br><br><span class=\"hljs-bullet\"> -</span> HTML5<br><span class=\"hljs-bullet\"> -</span> Javascript<br><span class=\"hljs-bullet\"> -</span> CSS<br><br> ---<br><br> # Code Sample<br><br> Landslide supports code snippets<br><br><span class=\"hljs-code\">     !python</span><br><span class=\"hljs-code\">     def log(self, message, level=&#x27;notice&#x27;):</span><br><span class=\"hljs-code\">         if self.logger and not callable(self.logger):</span><br><span class=\"hljs-code\">             raise ValueError(u&quot;Invalid logger set, must be a callable&quot;)</span><br><span class=\"hljs-code\"></span><br><span class=\"hljs-code\">         if self.verbose and self.logger:</span><br><span class=\"hljs-code\">             self.logger(message, level)</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>简单说明：</strong></p>\n<ul>\n<li><code>---</code>用来表示当前页面结束</li>\n<li>代码段只支持<code>tab</code>符号方式</li>\n</ul>\n<h2 id=\"生成HTML文件\"><a href=\"#生成HTML文件\" class=\"headerlink\" title=\"生成HTML文件\"></a>生成HTML文件</h2><p><code>$ landslide test.md -i -o &gt; test.html</code></p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><figure class=\"highlight nestedtext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nestedtext\"><span class=\"hljs-attribute\">h</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       展示帮助</span><br><span class=\"hljs-attribute\">← →</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">     上/下一张幻灯片</span><br><span class=\"hljs-attribute\">ESC</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">     展示目录</span><br><span class=\"hljs-attribute\">n</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       显示当前是第几张幻灯片</span><br><span class=\"hljs-attribute\">b</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       屏幕全黑</span><br><span class=\"hljs-attribute\">e</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       使当前幻灯片最大化</span><br><span class=\"hljs-attribute\">3</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       展示伪3D效果</span><br><span class=\"hljs-attribute\">c</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       取消显示前后幻灯片预览，只显示当前幻灯片</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://www.jianshu.com/p/e063303317cb\">用Markdown写一个极客范儿的PPT</a></li>\n<li><a href=\"https://github.com/adamzap/landslide\">官网</a></li>\n</ul>\n","site":{"data":{}},"wordcount":985,"excerpt":"","more":"<blockquote>\n<p>使用<a href=\"https://github.com/adamzap/landslide\">LandSlide</a>将MarkDown生成为HTML文件，用来分享。</p>\n</blockquote>\n<h2 id=\"LandSlide安装\"><a href=\"#LandSlide安装\" class=\"headerlink\" title=\"LandSlide安装\"></a>LandSlide安装</h2><h3 id=\"使用pip安装\"><a href=\"#使用pip安装\" class=\"headerlink\" title=\"使用pip安装\"></a>使用<code>pip</code>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">//先安装pip，如果已经安装，跳过此步<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo easy_install pip</span><br><br>//安装landslide<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">pip install landslide</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/adamzap/landslide.git</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> landslide</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">python setup.py build</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo python setup.py install</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编写md文件\"><a href=\"#编写md文件\" class=\"headerlink\" title=\"编写md文件\"></a>编写md文件</h2><p>官方测试用例</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-section\"># Landslide</span><br><br> ---<br><br> # Overview<br><br> Generate HTML5 slideshows from markdown, ReST, or textile.<br><br> ![](<span class=\"hljs-link\">http://i.imgur.com/bc2xk.png</span>)&#123;ImgCap&#125;python&#123;/ImgCap&#125;<br><br> Landslide is primarily written in Python, but it&#x27;s themes use:<br><br><span class=\"hljs-bullet\"> -</span> HTML5<br><span class=\"hljs-bullet\"> -</span> Javascript<br><span class=\"hljs-bullet\"> -</span> CSS<br><br> ---<br><br> # Code Sample<br><br> Landslide supports code snippets<br><br><span class=\"hljs-code\">     !python</span><br><span class=\"hljs-code\">     def log(self, message, level=&#x27;notice&#x27;):</span><br><span class=\"hljs-code\">         if self.logger and not callable(self.logger):</span><br><span class=\"hljs-code\">             raise ValueError(u&quot;Invalid logger set, must be a callable&quot;)</span><br><span class=\"hljs-code\"></span><br><span class=\"hljs-code\">         if self.verbose and self.logger:</span><br><span class=\"hljs-code\">             self.logger(message, level)</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>简单说明：</strong></p>\n<ul>\n<li><code>---</code>用来表示当前页面结束</li>\n<li>代码段只支持<code>tab</code>符号方式</li>\n</ul>\n<h2 id=\"生成HTML文件\"><a href=\"#生成HTML文件\" class=\"headerlink\" title=\"生成HTML文件\"></a>生成HTML文件</h2><p><code>$ landslide test.md -i -o &gt; test.html</code></p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><figure class=\"highlight nestedtext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nestedtext\"><span class=\"hljs-attribute\">h</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       展示帮助</span><br><span class=\"hljs-attribute\">← →</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">     上/下一张幻灯片</span><br><span class=\"hljs-attribute\">ESC</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">     展示目录</span><br><span class=\"hljs-attribute\">n</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       显示当前是第几张幻灯片</span><br><span class=\"hljs-attribute\">b</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       屏幕全黑</span><br><span class=\"hljs-attribute\">e</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       使当前幻灯片最大化</span><br><span class=\"hljs-attribute\">3</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       展示伪3D效果</span><br><span class=\"hljs-attribute\">c</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">       取消显示前后幻灯片预览，只显示当前幻灯片</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"http://www.jianshu.com/p/e063303317cb\">用Markdown写一个极客范儿的PPT</a></li>\n<li><a href=\"https://github.com/adamzap/landslide\">官网</a></li>\n</ul>\n"},{"title":"H5微信支付","date":"2016-07-28T11:21:30.000Z","_content":"\n>我们的M站接入了微信支付，虽然不是我开发的，但是过程中参与了部分的方案调研，这里把我知道的记录下来。\n\n#### 针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\n1. 微信外部浏览器\n方案没参与，不清楚。应该是打开某个特殊的URL调起微信\n2. 微信内部浏览器\n此时不能使用方案1，因为已经是在微信内部了，不能再调起微信。这时可以走微信内部公众号的方式，用openid调用微信支付接口，用户，公众号的对应关系为一个Openid。现在的问题就是如何获取openid了。微信提供了oauth授权接口，只需要openid的话，还可以做到静默授权，用户无感知。授权后拿到token,然后在回调里面用token即可取openid。\n\n-----\n#### 参考文档\n[微信支付官方文档](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN)\n","source":"_posts/micro-msg-pay.md","raw":"---\ntitle: H5微信支付\ndate: 2016-07-28 19:21:30\ncategories: [Web]\ntags: [H5,WEBAPP]\n---\n\n>我们的M站接入了微信支付，虽然不是我开发的，但是过程中参与了部分的方案调研，这里把我知道的记录下来。\n\n#### 针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\n1. 微信外部浏览器\n方案没参与，不清楚。应该是打开某个特殊的URL调起微信\n2. 微信内部浏览器\n此时不能使用方案1，因为已经是在微信内部了，不能再调起微信。这时可以走微信内部公众号的方式，用openid调用微信支付接口，用户，公众号的对应关系为一个Openid。现在的问题就是如何获取openid了。微信提供了oauth授权接口，只需要openid的话，还可以做到静默授权，用户无感知。授权后拿到token,然后在回调里面用token即可取openid。\n\n-----\n#### 参考文档\n[微信支付官方文档](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN)\n","slug":"micro-msg-pay","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwh000otswrh40o0hdk","content":"<blockquote>\n<p>我们的M站接入了微信支付，虽然不是我开发的，但是过程中参与了部分的方案调研，这里把我知道的记录下来。</p>\n</blockquote>\n<h4 id=\"针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\"><a href=\"#针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\" class=\"headerlink\" title=\"针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\"></a>针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。</h4><ol>\n<li>微信外部浏览器<br>方案没参与，不清楚。应该是打开某个特殊的URL调起微信</li>\n<li>微信内部浏览器<br>此时不能使用方案1，因为已经是在微信内部了，不能再调起微信。这时可以走微信内部公众号的方式，用openid调用微信支付接口，用户，公众号的对应关系为一个Openid。现在的问题就是如何获取openid了。微信提供了oauth授权接口，只需要openid的话，还可以做到静默授权，用户无感知。授权后拿到token,然后在回调里面用token即可取openid。</li>\n</ol>\n<hr>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN\">微信支付官方文档</a></p>\n","site":{"data":{}},"wordcount":316,"excerpt":"","more":"<blockquote>\n<p>我们的M站接入了微信支付，虽然不是我开发的，但是过程中参与了部分的方案调研，这里把我知道的记录下来。</p>\n</blockquote>\n<h4 id=\"针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\"><a href=\"#针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\" class=\"headerlink\" title=\"针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。\"></a>针对微信内部浏览器和微信外部浏览器，调用微信支付的技术方案是不同的。</h4><ol>\n<li>微信外部浏览器<br>方案没参与，不清楚。应该是打开某个特殊的URL调起微信</li>\n<li>微信内部浏览器<br>此时不能使用方案1，因为已经是在微信内部了，不能再调起微信。这时可以走微信内部公众号的方式，用openid调用微信支付接口，用户，公众号的对应关系为一个Openid。现在的问题就是如何获取openid了。微信提供了oauth授权接口，只需要openid的话，还可以做到静默授权，用户无感知。授权后拿到token,然后在回调里面用token即可取openid。</li>\n</ol>\n<hr>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><p><a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN\">微信支付官方文档</a></p>\n"},{"layout":"post","title":"Mysql索引实现原理","date":"2017-04-21T03:50:23.000Z","_content":"\n> 本文说明mysql索引的实现原理以及索引使用\n\n## 索引是什么\n如果你要从一本书中找一段内容，有两种方式：\n\n1. 一页一页的翻，直至找到内容；\n2. 先通过`目录`定位到相应章节，再去查找；\n\n正常情况下，第二种方式是可以明显加快查找速度的。在这里，`目录`就可以理解为索引。\n\n## 索引实现原理\nMysql的索引是存储引擎实现的，MyIsam、InnoDB是采用BTree数据结构实现的索引。  \n[**BTree介绍**](https://zh.wikipedia.org/wiki/B%E6%A0%91)\n\n## 索引分类\n### 唯一索引\n`unique key`：索引值必须唯一。主键也是唯一索引的一种，关键字是`primary key`。\n\n### 全文索引\nInnoDB不支持，Myisam支持，一般在`char`、`varchar`或`text`列上创建。\n\n```sql\nCreate table 表名\n(id int not null primary anto_increment,\ntitle varchar(100),\nFULLTEXT(title)\n)type=myisam\n```\n\n### 单列索引与多列索引\n索引可以是单列索引也可以是多列索引(复合索引)，多列索引的`最左前缀原则`：在sql where子句中列的顺序要保持和多索引的一致或以多列索引顺序出现，只要出现非顺序出现、断层都无法利用到多列索引或者只能用到多列索引的部分列。\n\n例如, `index(a, b, c)`:\n\n1. `where a=1`可以命中索引的a字段\n2. `where a=1 and b=2`可以命中索引的a, b字段\n3. `where a=1 and b=2 and c=3`可以命中索引的全部字段\n4. `where a=1 and c=3`只能命中a字段\n5. `where b=2`等非以a字段开头的查询都无法命中索引\n\n**可以总结为**：若要命中索引，where子条件一定要以a字段开始，具体能命中索引中的几列，用最左前缀方式与索引列进行匹配即可知。\n\n### MyIsam和InnoDB索引的不同之处\n`MyIsam`可以不提供主键，表中数据是按顺序储存，索引BTree的叶节点的value字段不会存储真正的值，而是对应数据行的地址。\n\n`InnoDB`必须要提供主键，表结构就是一个按照主键生成的BTree，其他索引保存的则是主键索引的值，非主键索引查询时，要先查到主键索引值，再通过主键索引值到表结构中查询相应的行。\n\n**`MyIsam`**查询性能更好些，但是不支持事务；  \n**`InnoDB`**支持事务。\n\n### explain语句\n`explain`可以用来提供sql语句执行信息，可以配合`select delete insert replace update`使用。\n\n```sql\nmysql> explain select * from shopinfo_for_proto where  userid=22681834 and zdid=85570921;\n+----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+\n| id | select_type | table              | type | possible_keys | key    | key_len | ref   | rows | Extra       |\n+----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+\n|  1 | SIMPLE      | shopinfo_for_proto | ref  | userid        | userid | 8       | const |   16 | Using where |\n+----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+\n```\n\n从中可以分析出是否命中了缓存，`key`表示实际命中的缓存，`key_len`表示命中的缓存大小，可以用来分析命中了多列索引中的几列。\n\n`explain`输出的各字段的[详细解释见官网](https://dev.mysql.com/doc/refman/5.7/en/explain-output.html)","source":"_posts/mysql_index.md","raw":"---\nlayout: post\ntitle:  \"Mysql索引实现原理\"\ndate:   2017-04-21 11:50:23 +0800\ncategories: [mysql]\ntags: [索引]\n---\n\n> 本文说明mysql索引的实现原理以及索引使用\n\n## 索引是什么\n如果你要从一本书中找一段内容，有两种方式：\n\n1. 一页一页的翻，直至找到内容；\n2. 先通过`目录`定位到相应章节，再去查找；\n\n正常情况下，第二种方式是可以明显加快查找速度的。在这里，`目录`就可以理解为索引。\n\n## 索引实现原理\nMysql的索引是存储引擎实现的，MyIsam、InnoDB是采用BTree数据结构实现的索引。  \n[**BTree介绍**](https://zh.wikipedia.org/wiki/B%E6%A0%91)\n\n## 索引分类\n### 唯一索引\n`unique key`：索引值必须唯一。主键也是唯一索引的一种，关键字是`primary key`。\n\n### 全文索引\nInnoDB不支持，Myisam支持，一般在`char`、`varchar`或`text`列上创建。\n\n```sql\nCreate table 表名\n(id int not null primary anto_increment,\ntitle varchar(100),\nFULLTEXT(title)\n)type=myisam\n```\n\n### 单列索引与多列索引\n索引可以是单列索引也可以是多列索引(复合索引)，多列索引的`最左前缀原则`：在sql where子句中列的顺序要保持和多索引的一致或以多列索引顺序出现，只要出现非顺序出现、断层都无法利用到多列索引或者只能用到多列索引的部分列。\n\n例如, `index(a, b, c)`:\n\n1. `where a=1`可以命中索引的a字段\n2. `where a=1 and b=2`可以命中索引的a, b字段\n3. `where a=1 and b=2 and c=3`可以命中索引的全部字段\n4. `where a=1 and c=3`只能命中a字段\n5. `where b=2`等非以a字段开头的查询都无法命中索引\n\n**可以总结为**：若要命中索引，where子条件一定要以a字段开始，具体能命中索引中的几列，用最左前缀方式与索引列进行匹配即可知。\n\n### MyIsam和InnoDB索引的不同之处\n`MyIsam`可以不提供主键，表中数据是按顺序储存，索引BTree的叶节点的value字段不会存储真正的值，而是对应数据行的地址。\n\n`InnoDB`必须要提供主键，表结构就是一个按照主键生成的BTree，其他索引保存的则是主键索引的值，非主键索引查询时，要先查到主键索引值，再通过主键索引值到表结构中查询相应的行。\n\n**`MyIsam`**查询性能更好些，但是不支持事务；  \n**`InnoDB`**支持事务。\n\n### explain语句\n`explain`可以用来提供sql语句执行信息，可以配合`select delete insert replace update`使用。\n\n```sql\nmysql> explain select * from shopinfo_for_proto where  userid=22681834 and zdid=85570921;\n+----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+\n| id | select_type | table              | type | possible_keys | key    | key_len | ref   | rows | Extra       |\n+----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+\n|  1 | SIMPLE      | shopinfo_for_proto | ref  | userid        | userid | 8       | const |   16 | Using where |\n+----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+\n```\n\n从中可以分析出是否命中了缓存，`key`表示实际命中的缓存，`key_len`表示命中的缓存大小，可以用来分析命中了多列索引中的几列。\n\n`explain`输出的各字段的[详细解释见官网](https://dev.mysql.com/doc/refman/5.7/en/explain-output.html)","slug":"mysql_index","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"photos":[],"link":"","_id":"cl5arauwh000qtswrhem62dtk","content":"<blockquote>\n<p>本文说明mysql索引的实现原理以及索引使用</p>\n</blockquote>\n<h2 id=\"索引是什么\"><a href=\"#索引是什么\" class=\"headerlink\" title=\"索引是什么\"></a>索引是什么</h2><p>如果你要从一本书中找一段内容，有两种方式：</p>\n<ol>\n<li>一页一页的翻，直至找到内容；</li>\n<li>先通过<code>目录</code>定位到相应章节，再去查找；</li>\n</ol>\n<p>正常情况下，第二种方式是可以明显加快查找速度的。在这里，<code>目录</code>就可以理解为索引。</p>\n<h2 id=\"索引实现原理\"><a href=\"#索引实现原理\" class=\"headerlink\" title=\"索引实现原理\"></a>索引实现原理</h2><p>Mysql的索引是存储引擎实现的，MyIsam、InnoDB是采用BTree数据结构实现的索引。<br><a href=\"https://zh.wikipedia.org/wiki/B%E6%A0%91\"><strong>BTree介绍</strong></a></p>\n<h2 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h2><h3 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h3><p><code>unique key</code>：索引值必须唯一。主键也是唯一索引的一种，关键字是<code>primary key</code>。</p>\n<h3 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h3><p>InnoDB不支持，Myisam支持，一般在<code>char</code>、<code>varchar</code>或<code>text</code>列上创建。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Create</span> <span class=\"hljs-keyword\">table</span> 表名<br>(id <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> anto_increment,<br>title <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">100</span>),<br>FULLTEXT(title)<br>)type<span class=\"hljs-operator\">=</span>myisam<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"单列索引与多列索引\"><a href=\"#单列索引与多列索引\" class=\"headerlink\" title=\"单列索引与多列索引\"></a>单列索引与多列索引</h3><p>索引可以是单列索引也可以是多列索引(复合索引)，多列索引的<code>最左前缀原则</code>：在sql where子句中列的顺序要保持和多索引的一致或以多列索引顺序出现，只要出现非顺序出现、断层都无法利用到多列索引或者只能用到多列索引的部分列。</p>\n<p>例如, <code>index(a, b, c)</code>:</p>\n<ol>\n<li><code>where a=1</code>可以命中索引的a字段</li>\n<li><code>where a=1 and b=2</code>可以命中索引的a, b字段</li>\n<li><code>where a=1 and b=2 and c=3</code>可以命中索引的全部字段</li>\n<li><code>where a=1 and c=3</code>只能命中a字段</li>\n<li><code>where b=2</code>等非以a字段开头的查询都无法命中索引</li>\n</ol>\n<p><strong>可以总结为</strong>：若要命中索引，where子条件一定要以a字段开始，具体能命中索引中的几列，用最左前缀方式与索引列进行匹配即可知。</p>\n<h3 id=\"MyIsam和InnoDB索引的不同之处\"><a href=\"#MyIsam和InnoDB索引的不同之处\" class=\"headerlink\" title=\"MyIsam和InnoDB索引的不同之处\"></a>MyIsam和InnoDB索引的不同之处</h3><p><code>MyIsam</code>可以不提供主键，表中数据是按顺序储存，索引BTree的叶节点的value字段不会存储真正的值，而是对应数据行的地址。</p>\n<p><code>InnoDB</code>必须要提供主键，表结构就是一个按照主键生成的BTree，其他索引保存的则是主键索引的值，非主键索引查询时，要先查到主键索引值，再通过主键索引值到表结构中查询相应的行。</p>\n<p>**<code>MyIsam</code>**查询性能更好些，但是不支持事务；<br>**<code>InnoDB</code>**支持事务。</p>\n<h3 id=\"explain语句\"><a href=\"#explain语句\" class=\"headerlink\" title=\"explain语句\"></a>explain语句</h3><p><code>explain</code>可以用来提供sql语句执行信息，可以配合<code>select delete insert replace update</code>使用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">mysql<span class=\"hljs-operator\">&gt;</span> explain <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> shopinfo_for_proto <span class=\"hljs-keyword\">where</span>  userid<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">22681834</span> <span class=\"hljs-keyword\">and</span> zdid<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">85570921</span>;<br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br><span class=\"hljs-operator\">|</span> id <span class=\"hljs-operator\">|</span> select_type <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">table</span>              <span class=\"hljs-operator\">|</span> type <span class=\"hljs-operator\">|</span> possible_keys <span class=\"hljs-operator\">|</span> key    <span class=\"hljs-operator\">|</span> key_len <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">ref</span>   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">rows</span> <span class=\"hljs-operator\">|</span> Extra       <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br><span class=\"hljs-operator\">|</span>  <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">|</span> SIMPLE      <span class=\"hljs-operator\">|</span> shopinfo_for_proto <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">ref</span>  <span class=\"hljs-operator\">|</span> userid        <span class=\"hljs-operator\">|</span> userid <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">8</span>       <span class=\"hljs-operator\">|</span> const <span class=\"hljs-operator\">|</span>   <span class=\"hljs-number\">16</span> <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">Using</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>从中可以分析出是否命中了缓存，<code>key</code>表示实际命中的缓存，<code>key_len</code>表示命中的缓存大小，可以用来分析命中了多列索引中的几列。</p>\n<p><code>explain</code>输出的各字段的<a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html\">详细解释见官网</a></p>\n","site":{"data":{}},"wordcount":1627,"excerpt":"","more":"<blockquote>\n<p>本文说明mysql索引的实现原理以及索引使用</p>\n</blockquote>\n<h2 id=\"索引是什么\"><a href=\"#索引是什么\" class=\"headerlink\" title=\"索引是什么\"></a>索引是什么</h2><p>如果你要从一本书中找一段内容，有两种方式：</p>\n<ol>\n<li>一页一页的翻，直至找到内容；</li>\n<li>先通过<code>目录</code>定位到相应章节，再去查找；</li>\n</ol>\n<p>正常情况下，第二种方式是可以明显加快查找速度的。在这里，<code>目录</code>就可以理解为索引。</p>\n<h2 id=\"索引实现原理\"><a href=\"#索引实现原理\" class=\"headerlink\" title=\"索引实现原理\"></a>索引实现原理</h2><p>Mysql的索引是存储引擎实现的，MyIsam、InnoDB是采用BTree数据结构实现的索引。<br><a href=\"https://zh.wikipedia.org/wiki/B%E6%A0%91\"><strong>BTree介绍</strong></a></p>\n<h2 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h2><h3 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h3><p><code>unique key</code>：索引值必须唯一。主键也是唯一索引的一种，关键字是<code>primary key</code>。</p>\n<h3 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h3><p>InnoDB不支持，Myisam支持，一般在<code>char</code>、<code>varchar</code>或<code>text</code>列上创建。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">Create</span> <span class=\"hljs-keyword\">table</span> 表名<br>(id <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">primary</span> anto_increment,<br>title <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">100</span>),<br>FULLTEXT(title)<br>)type<span class=\"hljs-operator\">=</span>myisam<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"单列索引与多列索引\"><a href=\"#单列索引与多列索引\" class=\"headerlink\" title=\"单列索引与多列索引\"></a>单列索引与多列索引</h3><p>索引可以是单列索引也可以是多列索引(复合索引)，多列索引的<code>最左前缀原则</code>：在sql where子句中列的顺序要保持和多索引的一致或以多列索引顺序出现，只要出现非顺序出现、断层都无法利用到多列索引或者只能用到多列索引的部分列。</p>\n<p>例如, <code>index(a, b, c)</code>:</p>\n<ol>\n<li><code>where a=1</code>可以命中索引的a字段</li>\n<li><code>where a=1 and b=2</code>可以命中索引的a, b字段</li>\n<li><code>where a=1 and b=2 and c=3</code>可以命中索引的全部字段</li>\n<li><code>where a=1 and c=3</code>只能命中a字段</li>\n<li><code>where b=2</code>等非以a字段开头的查询都无法命中索引</li>\n</ol>\n<p><strong>可以总结为</strong>：若要命中索引，where子条件一定要以a字段开始，具体能命中索引中的几列，用最左前缀方式与索引列进行匹配即可知。</p>\n<h3 id=\"MyIsam和InnoDB索引的不同之处\"><a href=\"#MyIsam和InnoDB索引的不同之处\" class=\"headerlink\" title=\"MyIsam和InnoDB索引的不同之处\"></a>MyIsam和InnoDB索引的不同之处</h3><p><code>MyIsam</code>可以不提供主键，表中数据是按顺序储存，索引BTree的叶节点的value字段不会存储真正的值，而是对应数据行的地址。</p>\n<p><code>InnoDB</code>必须要提供主键，表结构就是一个按照主键生成的BTree，其他索引保存的则是主键索引的值，非主键索引查询时，要先查到主键索引值，再通过主键索引值到表结构中查询相应的行。</p>\n<p>**<code>MyIsam</code>**查询性能更好些，但是不支持事务；<br>**<code>InnoDB</code>**支持事务。</p>\n<h3 id=\"explain语句\"><a href=\"#explain语句\" class=\"headerlink\" title=\"explain语句\"></a>explain语句</h3><p><code>explain</code>可以用来提供sql语句执行信息，可以配合<code>select delete insert replace update</code>使用。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">mysql<span class=\"hljs-operator\">&gt;</span> explain <span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> shopinfo_for_proto <span class=\"hljs-keyword\">where</span>  userid<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">22681834</span> <span class=\"hljs-keyword\">and</span> zdid<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">85570921</span>;<br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br><span class=\"hljs-operator\">|</span> id <span class=\"hljs-operator\">|</span> select_type <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">table</span>              <span class=\"hljs-operator\">|</span> type <span class=\"hljs-operator\">|</span> possible_keys <span class=\"hljs-operator\">|</span> key    <span class=\"hljs-operator\">|</span> key_len <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">ref</span>   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">rows</span> <span class=\"hljs-operator\">|</span> Extra       <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br><span class=\"hljs-operator\">|</span>  <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">|</span> SIMPLE      <span class=\"hljs-operator\">|</span> shopinfo_for_proto <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">ref</span>  <span class=\"hljs-operator\">|</span> userid        <span class=\"hljs-operator\">|</span> userid <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">8</span>       <span class=\"hljs-operator\">|</span> const <span class=\"hljs-operator\">|</span>   <span class=\"hljs-number\">16</span> <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">Using</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">----+-------------+--------------------+------+---------------+--------+---------+-------+------+-------------+</span><br></code></pre></td></tr></table></figure>\n\n<p>从中可以分析出是否命中了缓存，<code>key</code>表示实际命中的缓存，<code>key_len</code>表示命中的缓存大小，可以用来分析命中了多列索引中的几列。</p>\n<p><code>explain</code>输出的各字段的<a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html\">详细解释见官网</a></p>\n"},{"layout":"post","title":"insert or update","date":"2016-12-06T11:51:28.000Z","_content":">实现记录有则更新，无则插入\n\n## ON DUPLICATE KEY UPDATE\n需要先设置UNIQUE KEY索引，然后使用ON DUPLICATE KEY UPDATE语句\n```mysql\nINSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\nON DUPLICATE KEY UPDATE c=3;\n```\n\n-----\n## 参考文档\n[ON DUPLICATE KEY UPDATE重复插入时更新](http://lobert.iteye.com/blog/1604122)","source":"_posts/mysql_insert_or_update.md","raw":"---\nlayout: post\ntitle:  \"insert or update\"\ndate:   2016-12-06 19:51:28 +0800\ncategories: [Web]\ntags: [mysql]\n---\n>实现记录有则更新，无则插入\n\n## ON DUPLICATE KEY UPDATE\n需要先设置UNIQUE KEY索引，然后使用ON DUPLICATE KEY UPDATE语句\n```mysql\nINSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\nON DUPLICATE KEY UPDATE c=3;\n```\n\n-----\n## 参考文档\n[ON DUPLICATE KEY UPDATE重复插入时更新](http://lobert.iteye.com/blog/1604122)","slug":"mysql_insert_or_update","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"photos":[],"link":"","_id":"cl5arauwi000utswrc1u4dk9t","content":"<blockquote>\n<p>实现记录有则更新，无则插入</p>\n</blockquote>\n<h2 id=\"ON-DUPLICATE-KEY-UPDATE\"><a href=\"#ON-DUPLICATE-KEY-UPDATE\" class=\"headerlink\" title=\"ON DUPLICATE KEY UPDATE\"></a>ON DUPLICATE KEY UPDATE</h2><p>需要先设置UNIQUE KEY索引，然后使用ON DUPLICATE KEY UPDATE语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)<br>ON DUPLICATE KEY UPDATE c=3;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"http://lobert.iteye.com/blog/1604122\">ON DUPLICATE KEY UPDATE重复插入时更新</a></p>\n","site":{"data":{}},"wordcount":176,"excerpt":"","more":"<blockquote>\n<p>实现记录有则更新，无则插入</p>\n</blockquote>\n<h2 id=\"ON-DUPLICATE-KEY-UPDATE\"><a href=\"#ON-DUPLICATE-KEY-UPDATE\" class=\"headerlink\" title=\"ON DUPLICATE KEY UPDATE\"></a>ON DUPLICATE KEY UPDATE</h2><p>需要先设置UNIQUE KEY索引，然后使用ON DUPLICATE KEY UPDATE语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)<br>ON DUPLICATE KEY UPDATE c=3;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"http://lobert.iteye.com/blog/1604122\">ON DUPLICATE KEY UPDATE重复插入时更新</a></p>\n"},{"layout":"post","title":"Maven使用","date":"2017-04-18T13:50:23.000Z","_content":"\n>本篇文章用来记录使用Maven过程中的一些问题和总结。\n\n### Maven安装\n\n\n### 解决依赖下载慢的问题\n下载慢是由于国内访问官方站点网络不稳定导致，使用阿里云mirror镜像可解决此问题，配置mirror:\n\n```xml\n<mirrors>\n\t<mirror>\n\t\t<id>alimaven</id>\n\t\t<name>aliyun maven</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t<mirrorOf>central</mirrorOf>        \n\t</mirror>\n</mirrors>\n```\n\n### 配置私服\n配置repository即可\n\n### 深度理解`mirror`,`repository`关系\n**repository**是仓库，里面存放的是各种jar包和maven插件，可以分为remote库和本地库。\n\n**mirror**则是仓库的镜像，比如maven官方仓库A，阿里云提供了一个仓库B，和A完全一致，就称为A的镜像。\n\n[参考](https://my.oschina.net/sunchp/blog/100634)\n\n","source":"_posts/maven.md","raw":"---\nlayout: post\ntitle:  \"Maven使用\"\ndate:   2017-04-18 21:50:23 +0800\ncategories: [JAVA]\ntags: [java,maven]\n---\n\n>本篇文章用来记录使用Maven过程中的一些问题和总结。\n\n### Maven安装\n\n\n### 解决依赖下载慢的问题\n下载慢是由于国内访问官方站点网络不稳定导致，使用阿里云mirror镜像可解决此问题，配置mirror:\n\n```xml\n<mirrors>\n\t<mirror>\n\t\t<id>alimaven</id>\n\t\t<name>aliyun maven</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t<mirrorOf>central</mirrorOf>        \n\t</mirror>\n</mirrors>\n```\n\n### 配置私服\n配置repository即可\n\n### 深度理解`mirror`,`repository`关系\n**repository**是仓库，里面存放的是各种jar包和maven插件，可以分为remote库和本地库。\n\n**mirror**则是仓库的镜像，比如maven官方仓库A，阿里云提供了一个仓库B，和A完全一致，就称为A的镜像。\n\n[参考](https://my.oschina.net/sunchp/blog/100634)\n\n","slug":"maven","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"photos":[],"link":"","_id":"cl5arauwi000wtswr0kul1tpe","content":"<blockquote>\n<p>本篇文章用来记录使用Maven过程中的一些问题和总结。</p>\n</blockquote>\n<h3 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h3><h3 id=\"解决依赖下载慢的问题\"><a href=\"#解决依赖下载慢的问题\" class=\"headerlink\" title=\"解决依赖下载慢的问题\"></a>解决依赖下载慢的问题</h3><p>下载慢是由于国内访问官方站点网络不稳定导致，使用阿里云mirror镜像可解决此问题，配置mirror:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrors</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span>        <br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置私服\"><a href=\"#配置私服\" class=\"headerlink\" title=\"配置私服\"></a>配置私服</h3><p>配置repository即可</p>\n<h3 id=\"深度理解mirror-repository关系\"><a href=\"#深度理解mirror-repository关系\" class=\"headerlink\" title=\"深度理解mirror,repository关系\"></a>深度理解<code>mirror</code>,<code>repository</code>关系</h3><p><strong>repository</strong>是仓库，里面存放的是各种jar包和maven插件，可以分为remote库和本地库。</p>\n<p><strong>mirror</strong>则是仓库的镜像，比如maven官方仓库A，阿里云提供了一个仓库B，和A完全一致，就称为A的镜像。</p>\n<p><a href=\"https://my.oschina.net/sunchp/blog/100634\">参考</a></p>\n","site":{"data":{}},"wordcount":491,"excerpt":"","more":"<blockquote>\n<p>本篇文章用来记录使用Maven过程中的一些问题和总结。</p>\n</blockquote>\n<h3 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h3><h3 id=\"解决依赖下载慢的问题\"><a href=\"#解决依赖下载慢的问题\" class=\"headerlink\" title=\"解决依赖下载慢的问题\"></a>解决依赖下载慢的问题</h3><p>下载慢是由于国内访问官方站点网络不稳定导致，使用阿里云mirror镜像可解决此问题，配置mirror:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrors</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span>        <br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置私服\"><a href=\"#配置私服\" class=\"headerlink\" title=\"配置私服\"></a>配置私服</h3><p>配置repository即可</p>\n<h3 id=\"深度理解mirror-repository关系\"><a href=\"#深度理解mirror-repository关系\" class=\"headerlink\" title=\"深度理解mirror,repository关系\"></a>深度理解<code>mirror</code>,<code>repository</code>关系</h3><p><strong>repository</strong>是仓库，里面存放的是各种jar包和maven插件，可以分为remote库和本地库。</p>\n<p><strong>mirror</strong>则是仓库的镜像，比如maven官方仓库A，阿里云提供了一个仓库B，和A完全一致，就称为A的镜像。</p>\n<p><a href=\"https://my.oschina.net/sunchp/blog/100634\">参考</a></p>\n"},{"title":"JVM内存模型","date":"2017-04-10T06:40:54.000Z","_content":"\n## JVM内存区域划分\n### 内存区域划分图\n![](http://oniemuf9p.bkt.clouddn.com/jvm_memory_model.png)\n\n### 各区域说明\n#### 程序计数器（Program Counter Register）\n存储下一条要执行的字节码指令，线程私有\n\n#### JAVA虚拟机栈\n线程私有，每个方法被执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。  \n`局部变量表`存储了编译期可知的各种基本的数据类型（boolean,byte,char,short,int,float,double,long），对象引用和returnAddress类型（指向了一条字节码指令的地址）。\n\n#### 本地方法栈\n与栈类似，区别是虚拟机栈为执行JAVA方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。\n\n#### JAVA堆\n线程共享的一块内存区域，用于存放对象实例。是GC的主要区域，因此也被称为GC堆。\n\n#### 方法区\n线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。也被称为永久代。\n\n## 垃圾回收（GC）\nGC区域主要为：\n\n- JAVA堆\n- 方法区：主要回收两部分内容，废弃常量和无用的类，回收的效率较低。\n\n以下所指的GC等同于JAVA堆的回收。\n\n\n### GC算法\n1. 标记-清除：先标记需要回收的对象，再进行清理，会产生内存碎片；\n2. 标记-整理：先标记，再将所有存活对象向一端移动以解决碎片问题；\n3. 复制算法：将空间分为两部分，每次只使用一块空间，回收时将存活对象复制到另一块空间，再将已使用的那块空间整个清理掉。\n\n### JAVA堆的内存划分\n![](http://oniemuf9p.bkt.clouddn.com/jvm_heap.png)\n\n现在主要使用分代收集策略，将堆分为老年代和新生代，新生代又分为eden空间和survivor空间（8:1）。老年代采用标记-整理算法，新生代采用复制算法。\n\n## 内存分配与回收策略\n- 对象优先分配在Eden区，当Eden区没有足够空间进行分配时，虚拟机将进行一次Minor GC;\n- 大对象在分配时直接进行老年代，长期存活的对象进行老年代\n- Minor GC时，JVM会检测之前进行到老年代的平均大小是否大于老年代的剩余空间，如果大于则进行一次Full GC， 如果小于，还要看是否允许担保失败，如果允许则进行Minor GC, 否则进行Full GC.\n\n----\n## 参考文献\n- 深入理解JAVA虚拟机-周志明","source":"_posts/jvm_memory_model.md","raw":"---\ntitle: JVM内存模型\ndate: 2017-04-10 14:40:54\ncategories: [JAVA]\ntags: [JVM]\n---\n\n## JVM内存区域划分\n### 内存区域划分图\n![](http://oniemuf9p.bkt.clouddn.com/jvm_memory_model.png)\n\n### 各区域说明\n#### 程序计数器（Program Counter Register）\n存储下一条要执行的字节码指令，线程私有\n\n#### JAVA虚拟机栈\n线程私有，每个方法被执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。  \n`局部变量表`存储了编译期可知的各种基本的数据类型（boolean,byte,char,short,int,float,double,long），对象引用和returnAddress类型（指向了一条字节码指令的地址）。\n\n#### 本地方法栈\n与栈类似，区别是虚拟机栈为执行JAVA方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。\n\n#### JAVA堆\n线程共享的一块内存区域，用于存放对象实例。是GC的主要区域，因此也被称为GC堆。\n\n#### 方法区\n线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。也被称为永久代。\n\n## 垃圾回收（GC）\nGC区域主要为：\n\n- JAVA堆\n- 方法区：主要回收两部分内容，废弃常量和无用的类，回收的效率较低。\n\n以下所指的GC等同于JAVA堆的回收。\n\n\n### GC算法\n1. 标记-清除：先标记需要回收的对象，再进行清理，会产生内存碎片；\n2. 标记-整理：先标记，再将所有存活对象向一端移动以解决碎片问题；\n3. 复制算法：将空间分为两部分，每次只使用一块空间，回收时将存活对象复制到另一块空间，再将已使用的那块空间整个清理掉。\n\n### JAVA堆的内存划分\n![](http://oniemuf9p.bkt.clouddn.com/jvm_heap.png)\n\n现在主要使用分代收集策略，将堆分为老年代和新生代，新生代又分为eden空间和survivor空间（8:1）。老年代采用标记-整理算法，新生代采用复制算法。\n\n## 内存分配与回收策略\n- 对象优先分配在Eden区，当Eden区没有足够空间进行分配时，虚拟机将进行一次Minor GC;\n- 大对象在分配时直接进行老年代，长期存活的对象进行老年代\n- Minor GC时，JVM会检测之前进行到老年代的平均大小是否大于老年代的剩余空间，如果大于则进行一次Full GC， 如果小于，还要看是否允许担保失败，如果允许则进行Minor GC, 否则进行Full GC.\n\n----\n## 参考文献\n- 深入理解JAVA虚拟机-周志明","slug":"jvm_memory_model","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwj000ztswrdi9g1ynn","content":"<h2 id=\"JVM内存区域划分\"><a href=\"#JVM内存区域划分\" class=\"headerlink\" title=\"JVM内存区域划分\"></a>JVM内存区域划分</h2><h3 id=\"内存区域划分图\"><a href=\"#内存区域划分图\" class=\"headerlink\" title=\"内存区域划分图\"></a>内存区域划分图</h3><p><img src=\"http://oniemuf9p.bkt.clouddn.com/jvm_memory_model.png\"></p>\n<h3 id=\"各区域说明\"><a href=\"#各区域说明\" class=\"headerlink\" title=\"各区域说明\"></a>各区域说明</h3><h4 id=\"程序计数器（Program-Counter-Register）\"><a href=\"#程序计数器（Program-Counter-Register）\" class=\"headerlink\" title=\"程序计数器（Program Counter Register）\"></a>程序计数器（Program Counter Register）</h4><p>存储下一条要执行的字节码指令，线程私有</p>\n<h4 id=\"JAVA虚拟机栈\"><a href=\"#JAVA虚拟机栈\" class=\"headerlink\" title=\"JAVA虚拟机栈\"></a>JAVA虚拟机栈</h4><p>线程私有，每个方法被执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。<br><code>局部变量表</code>存储了编译期可知的各种基本的数据类型（boolean,byte,char,short,int,float,double,long），对象引用和returnAddress类型（指向了一条字节码指令的地址）。</p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>与栈类似，区别是虚拟机栈为执行JAVA方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。</p>\n<h4 id=\"JAVA堆\"><a href=\"#JAVA堆\" class=\"headerlink\" title=\"JAVA堆\"></a>JAVA堆</h4><p>线程共享的一块内存区域，用于存放对象实例。是GC的主要区域，因此也被称为GC堆。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。也被称为永久代。</p>\n<h2 id=\"垃圾回收（GC）\"><a href=\"#垃圾回收（GC）\" class=\"headerlink\" title=\"垃圾回收（GC）\"></a>垃圾回收（GC）</h2><p>GC区域主要为：</p>\n<ul>\n<li>JAVA堆</li>\n<li>方法区：主要回收两部分内容，废弃常量和无用的类，回收的效率较低。</li>\n</ul>\n<p>以下所指的GC等同于JAVA堆的回收。</p>\n<h3 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h3><ol>\n<li>标记-清除：先标记需要回收的对象，再进行清理，会产生内存碎片；</li>\n<li>标记-整理：先标记，再将所有存活对象向一端移动以解决碎片问题；</li>\n<li>复制算法：将空间分为两部分，每次只使用一块空间，回收时将存活对象复制到另一块空间，再将已使用的那块空间整个清理掉。</li>\n</ol>\n<h3 id=\"JAVA堆的内存划分\"><a href=\"#JAVA堆的内存划分\" class=\"headerlink\" title=\"JAVA堆的内存划分\"></a>JAVA堆的内存划分</h3><p><img src=\"http://oniemuf9p.bkt.clouddn.com/jvm_heap.png\"></p>\n<p>现在主要使用分代收集策略，将堆分为老年代和新生代，新生代又分为eden空间和survivor空间（8:1）。老年代采用标记-整理算法，新生代采用复制算法。</p>\n<h2 id=\"内存分配与回收策略\"><a href=\"#内存分配与回收策略\" class=\"headerlink\" title=\"内存分配与回收策略\"></a>内存分配与回收策略</h2><ul>\n<li>对象优先分配在Eden区，当Eden区没有足够空间进行分配时，虚拟机将进行一次Minor GC;</li>\n<li>大对象在分配时直接进行老年代，长期存活的对象进行老年代</li>\n<li>Minor GC时，JVM会检测之前进行到老年代的平均大小是否大于老年代的剩余空间，如果大于则进行一次Full GC， 如果小于，还要看是否允许担保失败，如果允许则进行Minor GC, 否则进行Full GC.</li>\n</ul>\n<hr>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>深入理解JAVA虚拟机-周志明</li>\n</ul>\n","site":{"data":{}},"wordcount":916,"excerpt":"","more":"<h2 id=\"JVM内存区域划分\"><a href=\"#JVM内存区域划分\" class=\"headerlink\" title=\"JVM内存区域划分\"></a>JVM内存区域划分</h2><h3 id=\"内存区域划分图\"><a href=\"#内存区域划分图\" class=\"headerlink\" title=\"内存区域划分图\"></a>内存区域划分图</h3><p><img src=\"http://oniemuf9p.bkt.clouddn.com/jvm_memory_model.png\"></p>\n<h3 id=\"各区域说明\"><a href=\"#各区域说明\" class=\"headerlink\" title=\"各区域说明\"></a>各区域说明</h3><h4 id=\"程序计数器（Program-Counter-Register）\"><a href=\"#程序计数器（Program-Counter-Register）\" class=\"headerlink\" title=\"程序计数器（Program Counter Register）\"></a>程序计数器（Program Counter Register）</h4><p>存储下一条要执行的字节码指令，线程私有</p>\n<h4 id=\"JAVA虚拟机栈\"><a href=\"#JAVA虚拟机栈\" class=\"headerlink\" title=\"JAVA虚拟机栈\"></a>JAVA虚拟机栈</h4><p>线程私有，每个方法被执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。<br><code>局部变量表</code>存储了编译期可知的各种基本的数据类型（boolean,byte,char,short,int,float,double,long），对象引用和returnAddress类型（指向了一条字节码指令的地址）。</p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>与栈类似，区别是虚拟机栈为执行JAVA方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。</p>\n<h4 id=\"JAVA堆\"><a href=\"#JAVA堆\" class=\"headerlink\" title=\"JAVA堆\"></a>JAVA堆</h4><p>线程共享的一块内存区域，用于存放对象实例。是GC的主要区域，因此也被称为GC堆。</p>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><p>线程共享，存储已经被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。也被称为永久代。</p>\n<h2 id=\"垃圾回收（GC）\"><a href=\"#垃圾回收（GC）\" class=\"headerlink\" title=\"垃圾回收（GC）\"></a>垃圾回收（GC）</h2><p>GC区域主要为：</p>\n<ul>\n<li>JAVA堆</li>\n<li>方法区：主要回收两部分内容，废弃常量和无用的类，回收的效率较低。</li>\n</ul>\n<p>以下所指的GC等同于JAVA堆的回收。</p>\n<h3 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h3><ol>\n<li>标记-清除：先标记需要回收的对象，再进行清理，会产生内存碎片；</li>\n<li>标记-整理：先标记，再将所有存活对象向一端移动以解决碎片问题；</li>\n<li>复制算法：将空间分为两部分，每次只使用一块空间，回收时将存活对象复制到另一块空间，再将已使用的那块空间整个清理掉。</li>\n</ol>\n<h3 id=\"JAVA堆的内存划分\"><a href=\"#JAVA堆的内存划分\" class=\"headerlink\" title=\"JAVA堆的内存划分\"></a>JAVA堆的内存划分</h3><p><img src=\"http://oniemuf9p.bkt.clouddn.com/jvm_heap.png\"></p>\n<p>现在主要使用分代收集策略，将堆分为老年代和新生代，新生代又分为eden空间和survivor空间（8:1）。老年代采用标记-整理算法，新生代采用复制算法。</p>\n<h2 id=\"内存分配与回收策略\"><a href=\"#内存分配与回收策略\" class=\"headerlink\" title=\"内存分配与回收策略\"></a>内存分配与回收策略</h2><ul>\n<li>对象优先分配在Eden区，当Eden区没有足够空间进行分配时，虚拟机将进行一次Minor GC;</li>\n<li>大对象在分配时直接进行老年代，长期存活的对象进行老年代</li>\n<li>Minor GC时，JVM会检测之前进行到老年代的平均大小是否大于老年代的剩余空间，如果大于则进行一次Full GC， 如果小于，还要看是否允许担保失败，如果允许则进行Minor GC, 否则进行Full GC.</li>\n</ul>\n<hr>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li>深入理解JAVA虚拟机-周志明</li>\n</ul>\n"},{"title":"如何在上海办理护照","date":"2016-07-29T10:44:54.000Z","_content":"\n>终于拿到了护照，感觉做事情还是`易早不易迟`，要不然等到需要的时候耽误事~\n\n### 在上海办理护照的条件（满足其一即可）\n1. 上海市户口；\n2. 上海市居住证（需要1年有效期的那种，临时的不行）\n3. 在上海连续缴纳1年社保（最好社保打印个单子确认一下）；\n\n### 护照办理流程\n1. 网上预约一下，据说预约会加快出证速度（这步可以省略）；\n2. 前往出入境（我是去的浦东，张东路1158号）；\n3. 按照流程来，主要就是拍照，窗口办理，交钱200，等半个月取证；\n","source":"_posts/passport.md","raw":"---\ntitle: 如何在上海办理护照\ndate: 2016-07-29 18:44:54\ncategories: [生活]\ntags: [生活]\n---\n\n>终于拿到了护照，感觉做事情还是`易早不易迟`，要不然等到需要的时候耽误事~\n\n### 在上海办理护照的条件（满足其一即可）\n1. 上海市户口；\n2. 上海市居住证（需要1年有效期的那种，临时的不行）\n3. 在上海连续缴纳1年社保（最好社保打印个单子确认一下）；\n\n### 护照办理流程\n1. 网上预约一下，据说预约会加快出证速度（这步可以省略）；\n2. 前往出入境（我是去的浦东，张东路1158号）；\n3. 按照流程来，主要就是拍照，窗口办理，交钱200，等半个月取证；\n","slug":"passport","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwj0012tswr9z2y3oxh","content":"<blockquote>\n<p>终于拿到了护照，感觉做事情还是<code>易早不易迟</code>，要不然等到需要的时候耽误事~</p>\n</blockquote>\n<h3 id=\"在上海办理护照的条件（满足其一即可）\"><a href=\"#在上海办理护照的条件（满足其一即可）\" class=\"headerlink\" title=\"在上海办理护照的条件（满足其一即可）\"></a>在上海办理护照的条件（满足其一即可）</h3><ol>\n<li>上海市户口；</li>\n<li>上海市居住证（需要1年有效期的那种，临时的不行）</li>\n<li>在上海连续缴纳1年社保（最好社保打印个单子确认一下）；</li>\n</ol>\n<h3 id=\"护照办理流程\"><a href=\"#护照办理流程\" class=\"headerlink\" title=\"护照办理流程\"></a>护照办理流程</h3><ol>\n<li>网上预约一下，据说预约会加快出证速度（这步可以省略）；</li>\n<li>前往出入境（我是去的浦东，张东路1158号）；</li>\n<li>按照流程来，主要就是拍照，窗口办理，交钱200，等半个月取证；</li>\n</ol>\n","site":{"data":{}},"wordcount":197,"excerpt":"","more":"<blockquote>\n<p>终于拿到了护照，感觉做事情还是<code>易早不易迟</code>，要不然等到需要的时候耽误事~</p>\n</blockquote>\n<h3 id=\"在上海办理护照的条件（满足其一即可）\"><a href=\"#在上海办理护照的条件（满足其一即可）\" class=\"headerlink\" title=\"在上海办理护照的条件（满足其一即可）\"></a>在上海办理护照的条件（满足其一即可）</h3><ol>\n<li>上海市户口；</li>\n<li>上海市居住证（需要1年有效期的那种，临时的不行）</li>\n<li>在上海连续缴纳1年社保（最好社保打印个单子确认一下）；</li>\n</ol>\n<h3 id=\"护照办理流程\"><a href=\"#护照办理流程\" class=\"headerlink\" title=\"护照办理流程\"></a>护照办理流程</h3><ol>\n<li>网上预约一下，据说预约会加快出证速度（这步可以省略）；</li>\n<li>前往出入境（我是去的浦东，张东路1158号）；</li>\n<li>按照流程来，主要就是拍照，窗口办理，交钱200，等半个月取证；</li>\n</ol>\n"},{"layout":"post","title":"PHP发送HTML格式邮件","date":"2017-03-17T04:51:23.000Z","_content":"\n\n> 经常会有定期发送邮件报表的需求，这里使用HTML写报表模板，然后填充数据后发送。\n\n## 代码如下\n```php\n// $htmlTemplate为HTML模板\n$content = str_replace($find, $replace, $htmlTemplate);\n\n$to = 'xxx@baidu.com';\n$subject = '数据日报-' . $day;\n$header = \"MIME-Version: 1.0\\r\\n\"; //设置MIME版本\n$header .= \"Content-type: text/html; charset=utf-8\\r\\n\"; //设置内容类型和字符集\n$header .= \"Content-Transfer-Encoding: 8bit\\r\\n\";\n$header .= \"From: xx <xx@baidu.com>\\r\\n\"; //设置发件人\n$header .= \"Cc: xx@mailexample.com\\r\\n\"; // 设置抄送\nmail($to, $subject, $content, $header);\n```\n","source":"_posts/php-email-html.md","raw":"---\nlayout: post\ntitle:  \"PHP发送HTML格式邮件\"\ndate:   2017-03-17 12:51:23 +0800\ncategories: [PHP]\ntags: [email,PHP]\n---\n\n\n> 经常会有定期发送邮件报表的需求，这里使用HTML写报表模板，然后填充数据后发送。\n\n## 代码如下\n```php\n// $htmlTemplate为HTML模板\n$content = str_replace($find, $replace, $htmlTemplate);\n\n$to = 'xxx@baidu.com';\n$subject = '数据日报-' . $day;\n$header = \"MIME-Version: 1.0\\r\\n\"; //设置MIME版本\n$header .= \"Content-type: text/html; charset=utf-8\\r\\n\"; //设置内容类型和字符集\n$header .= \"Content-Transfer-Encoding: 8bit\\r\\n\";\n$header .= \"From: xx <xx@baidu.com>\\r\\n\"; //设置发件人\n$header .= \"Cc: xx@mailexample.com\\r\\n\"; // 设置抄送\nmail($to, $subject, $content, $header);\n```\n","slug":"php-email-html","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"photos":[],"link":"","_id":"cl5arauwj0014tswrhen0bxhm","content":"<blockquote>\n<p>经常会有定期发送邮件报表的需求，这里使用HTML写报表模板，然后填充数据后发送。</p>\n</blockquote>\n<h2 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// $htmlTemplate为HTML模板</span><br><span class=\"hljs-variable\">$content</span> = <span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-variable\">$find</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$htmlTemplate</span>);<br><br><span class=\"hljs-variable\">$to</span> = <span class=\"hljs-string\">&#x27;xxx@baidu.com&#x27;</span>;<br><span class=\"hljs-variable\">$subject</span> = <span class=\"hljs-string\">&#x27;数据日报-&#x27;</span> . <span class=\"hljs-variable\">$day</span>;<br><span class=\"hljs-variable\">$header</span> = <span class=\"hljs-string\">&quot;MIME-Version: 1.0\\r\\n&quot;</span>; <span class=\"hljs-comment\">//设置MIME版本</span><br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;Content-type: text/html; charset=utf-8\\r\\n&quot;</span>; <span class=\"hljs-comment\">//设置内容类型和字符集</span><br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;Content-Transfer-Encoding: 8bit\\r\\n&quot;</span>;<br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;From: xx &lt;xx@baidu.com&gt;\\r\\n&quot;</span>; <span class=\"hljs-comment\">//设置发件人</span><br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;Cc: xx@mailexample.com\\r\\n&quot;</span>; <span class=\"hljs-comment\">// 设置抄送</span><br><span class=\"hljs-title function_ invoke__\">mail</span>(<span class=\"hljs-variable\">$to</span>, <span class=\"hljs-variable\">$subject</span>, <span class=\"hljs-variable\">$content</span>, <span class=\"hljs-variable\">$header</span>);<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":522,"excerpt":"","more":"<blockquote>\n<p>经常会有定期发送邮件报表的需求，这里使用HTML写报表模板，然后填充数据后发送。</p>\n</blockquote>\n<h2 id=\"代码如下\"><a href=\"#代码如下\" class=\"headerlink\" title=\"代码如下\"></a>代码如下</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// $htmlTemplate为HTML模板</span><br><span class=\"hljs-variable\">$content</span> = <span class=\"hljs-title function_ invoke__\">str_replace</span>(<span class=\"hljs-variable\">$find</span>, <span class=\"hljs-variable\">$replace</span>, <span class=\"hljs-variable\">$htmlTemplate</span>);<br><br><span class=\"hljs-variable\">$to</span> = <span class=\"hljs-string\">&#x27;xxx@baidu.com&#x27;</span>;<br><span class=\"hljs-variable\">$subject</span> = <span class=\"hljs-string\">&#x27;数据日报-&#x27;</span> . <span class=\"hljs-variable\">$day</span>;<br><span class=\"hljs-variable\">$header</span> = <span class=\"hljs-string\">&quot;MIME-Version: 1.0\\r\\n&quot;</span>; <span class=\"hljs-comment\">//设置MIME版本</span><br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;Content-type: text/html; charset=utf-8\\r\\n&quot;</span>; <span class=\"hljs-comment\">//设置内容类型和字符集</span><br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;Content-Transfer-Encoding: 8bit\\r\\n&quot;</span>;<br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;From: xx &lt;xx@baidu.com&gt;\\r\\n&quot;</span>; <span class=\"hljs-comment\">//设置发件人</span><br><span class=\"hljs-variable\">$header</span> .= <span class=\"hljs-string\">&quot;Cc: xx@mailexample.com\\r\\n&quot;</span>; <span class=\"hljs-comment\">// 设置抄送</span><br><span class=\"hljs-title function_ invoke__\">mail</span>(<span class=\"hljs-variable\">$to</span>, <span class=\"hljs-variable\">$subject</span>, <span class=\"hljs-variable\">$content</span>, <span class=\"hljs-variable\">$header</span>);<br></code></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Mysql load data infile","date":"2016-12-06T11:51:28.000Z","_content":">背景：兄弟团队每天定时提供一份全量文件，我们需要将数据更新到DB中。\n\n## 最开始的方案是\n逐条数据到DB中判断，有则更新，无则插入，同时对变动过的记录更新时间戳，最后将表中此次未更新的记录全部删掉。但是因数据量较大（300W条），hhvm执行到一定程度就会内存溢出，然后停止运行。\n\n## load data infile\nMysql提供了load data infile，可以快速将文件中的数据导入表中，设置unique key索引并指定replace即可做到有则替换，无则插入。详细用法参照[LOAD DATA INFILE](http://blog.csdn.net/zhao1234567890123456/article/details/41054557)\n\n## load data infile中文乱码解决办法\n[load data infile 中文乱码解决](http://lijunjie.iteye.com/blog/258494)\n","source":"_posts/mysql_load_data_infile.md","raw":"---\nlayout: post\ntitle:  \"Mysql load data infile\"\ndate:   2016-12-06 19:51:28 +0800\ncategories: [Web]\ntags: [mysql]\n---\n>背景：兄弟团队每天定时提供一份全量文件，我们需要将数据更新到DB中。\n\n## 最开始的方案是\n逐条数据到DB中判断，有则更新，无则插入，同时对变动过的记录更新时间戳，最后将表中此次未更新的记录全部删掉。但是因数据量较大（300W条），hhvm执行到一定程度就会内存溢出，然后停止运行。\n\n## load data infile\nMysql提供了load data infile，可以快速将文件中的数据导入表中，设置unique key索引并指定replace即可做到有则替换，无则插入。详细用法参照[LOAD DATA INFILE](http://blog.csdn.net/zhao1234567890123456/article/details/41054557)\n\n## load data infile中文乱码解决办法\n[load data infile 中文乱码解决](http://lijunjie.iteye.com/blog/258494)\n","slug":"mysql_load_data_infile","published":1,"updated":"2022-07-07T06:47:29.839Z","comments":1,"photos":[],"link":"","_id":"cl5arauwk0018tswraeg6dy4w","content":"<blockquote>\n<p>背景：兄弟团队每天定时提供一份全量文件，我们需要将数据更新到DB中。</p>\n</blockquote>\n<h2 id=\"最开始的方案是\"><a href=\"#最开始的方案是\" class=\"headerlink\" title=\"最开始的方案是\"></a>最开始的方案是</h2><p>逐条数据到DB中判断，有则更新，无则插入，同时对变动过的记录更新时间戳，最后将表中此次未更新的记录全部删掉。但是因数据量较大（300W条），hhvm执行到一定程度就会内存溢出，然后停止运行。</p>\n<h2 id=\"load-data-infile\"><a href=\"#load-data-infile\" class=\"headerlink\" title=\"load data infile\"></a>load data infile</h2><p>Mysql提供了load data infile，可以快速将文件中的数据导入表中，设置unique key索引并指定replace即可做到有则替换，无则插入。详细用法参照<a href=\"http://blog.csdn.net/zhao1234567890123456/article/details/41054557\">LOAD DATA INFILE</a></p>\n<h2 id=\"load-data-infile中文乱码解决办法\"><a href=\"#load-data-infile中文乱码解决办法\" class=\"headerlink\" title=\"load data infile中文乱码解决办法\"></a>load data infile中文乱码解决办法</h2><p><a href=\"http://lijunjie.iteye.com/blog/258494\">load data infile 中文乱码解决</a></p>\n","site":{"data":{}},"wordcount":288,"excerpt":"","more":"<blockquote>\n<p>背景：兄弟团队每天定时提供一份全量文件，我们需要将数据更新到DB中。</p>\n</blockquote>\n<h2 id=\"最开始的方案是\"><a href=\"#最开始的方案是\" class=\"headerlink\" title=\"最开始的方案是\"></a>最开始的方案是</h2><p>逐条数据到DB中判断，有则更新，无则插入，同时对变动过的记录更新时间戳，最后将表中此次未更新的记录全部删掉。但是因数据量较大（300W条），hhvm执行到一定程度就会内存溢出，然后停止运行。</p>\n<h2 id=\"load-data-infile\"><a href=\"#load-data-infile\" class=\"headerlink\" title=\"load data infile\"></a>load data infile</h2><p>Mysql提供了load data infile，可以快速将文件中的数据导入表中，设置unique key索引并指定replace即可做到有则替换，无则插入。详细用法参照<a href=\"http://blog.csdn.net/zhao1234567890123456/article/details/41054557\">LOAD DATA INFILE</a></p>\n<h2 id=\"load-data-infile中文乱码解决办法\"><a href=\"#load-data-infile中文乱码解决办法\" class=\"headerlink\" title=\"load data infile中文乱码解决办法\"></a>load data infile中文乱码解决办法</h2><p><a href=\"http://lijunjie.iteye.com/blog/258494\">load data infile 中文乱码解决</a></p>\n"},{"layout":"post","title":"Nginx Map","date":"2017-06-27T09:58:28.000Z","_content":"\n> 项目中一个接口需要跨域支持，允许一部分的域名进行调用，这里配合nginx map进行允许跨域处理。\n\n# map\nmap为一个变量设置的映射表，在http段中进行配置。\n\n## 语法\n映射表由两列组成，匹配模式和对应的值。在 map 块里的参数指定了源变量值和结果值的对应关系。匹配模式可以是一个简单的字符串或者正则表达式，使用正则表达式要用('~')。\n一个正则表达式如果以 “~” 开头，表示这个正则表达式对大小写敏感。以 “~*”开头，表示这个正则表达式对大小写不敏感。\n\n```\nmap $var1 $var2 { \n    default '';\n    x y;\n}\n```\n\n## 跨域支持实例\n```\nmap $http_origin $corsHost {\n    default 0;\n\n    \"~https://www.baidu.com\"   $http_origin;\n    \"~.xx.com\"   $http_origin;\n    \"~.yy.com\"   $http_origin;\n}\n\nserver {\n    listen 80;\n    ...\n\n    location ~ ^/api {\n        root xxx;\n        fastcgi_pass xxx;\n        add_header      Access-Control-Allow-Origin $corsHost;\n        add_header      Access-Control-Allow-Credentials true;\n    }\n}\n```\n\n","source":"_posts/nginx_map.md","raw":"---\nlayout: post\ntitle:  \"Nginx Map\"\ndate:   2017-06-27 17:58:28 +0800\ncategories: [Web]\ntags: [nginx]\n---\n\n> 项目中一个接口需要跨域支持，允许一部分的域名进行调用，这里配合nginx map进行允许跨域处理。\n\n# map\nmap为一个变量设置的映射表，在http段中进行配置。\n\n## 语法\n映射表由两列组成，匹配模式和对应的值。在 map 块里的参数指定了源变量值和结果值的对应关系。匹配模式可以是一个简单的字符串或者正则表达式，使用正则表达式要用('~')。\n一个正则表达式如果以 “~” 开头，表示这个正则表达式对大小写敏感。以 “~*”开头，表示这个正则表达式对大小写不敏感。\n\n```\nmap $var1 $var2 { \n    default '';\n    x y;\n}\n```\n\n## 跨域支持实例\n```\nmap $http_origin $corsHost {\n    default 0;\n\n    \"~https://www.baidu.com\"   $http_origin;\n    \"~.xx.com\"   $http_origin;\n    \"~.yy.com\"   $http_origin;\n}\n\nserver {\n    listen 80;\n    ...\n\n    location ~ ^/api {\n        root xxx;\n        fastcgi_pass xxx;\n        add_header      Access-Control-Allow-Origin $corsHost;\n        add_header      Access-Control-Allow-Credentials true;\n    }\n}\n```\n\n","slug":"nginx_map","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"photos":[],"link":"","_id":"cl5arauwk0019tswr2a032uqa","content":"<blockquote>\n<p>项目中一个接口需要跨域支持，允许一部分的域名进行调用，这里配合nginx map进行允许跨域处理。</p>\n</blockquote>\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h1><p>map为一个变量设置的映射表，在http段中进行配置。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>映射表由两列组成，匹配模式和对应的值。在 map 块里的参数指定了源变量值和结果值的对应关系。匹配模式可以是一个简单的字符串或者正则表达式，使用正则表达式要用(‘<del>‘)。<br>一个正则表达式如果以 “</del>” 开头，表示这个正则表达式对大小写敏感。以 “~*”开头，表示这个正则表达式对大小写不敏感。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">map</span> <span class=\"hljs-variable\">$var1</span> <span class=\"hljs-variable\">$var2</span> &#123; <br>    <span class=\"hljs-attribute\">default</span> <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-attribute\">x</span> y;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"跨域支持实例\"><a href=\"#跨域支持实例\" class=\"headerlink\" title=\"跨域支持实例\"></a>跨域支持实例</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"hljs-keyword\">map</span> <span class=\"hljs-variable\">$http_origin</span> <span class=\"hljs-variable\">$corsHost</span> &#123;<br>    <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-string\">&quot;~https://www.baidu.com&quot;</span>   <span class=\"hljs-variable\">$http_origin</span>;<br>    <span class=\"hljs-string\">&quot;~.xx.com&quot;</span>   <span class=\"hljs-variable\">$http_origin</span>;<br>    <span class=\"hljs-string\">&quot;~.yy.com&quot;</span>   <span class=\"hljs-variable\">$http_origin</span>;<br>&#125;<br><br>server &#123;<br>    listen <span class=\"hljs-number\">80</span>;<br>    ...<br><br>    location ~ ^/api &#123;<br>       <span class=\"hljs-built_in\"> root</span> xxx;<br>        fastcgi_pass xxx;<br>        add_header      Access-Control-Allow-Origin <span class=\"hljs-variable\">$corsHost</span>;<br>        add_header      Access-Control-Allow-Credentials<span class=\"hljs-built_in\"> true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":637,"excerpt":"","more":"<blockquote>\n<p>项目中一个接口需要跨域支持，允许一部分的域名进行调用，这里配合nginx map进行允许跨域处理。</p>\n</blockquote>\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h1><p>map为一个变量设置的映射表，在http段中进行配置。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>映射表由两列组成，匹配模式和对应的值。在 map 块里的参数指定了源变量值和结果值的对应关系。匹配模式可以是一个简单的字符串或者正则表达式，使用正则表达式要用(‘<del>‘)。<br>一个正则表达式如果以 “</del>” 开头，表示这个正则表达式对大小写敏感。以 “~*”开头，表示这个正则表达式对大小写不敏感。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">map</span> <span class=\"hljs-variable\">$var1</span> <span class=\"hljs-variable\">$var2</span> &#123; <br>    <span class=\"hljs-attribute\">default</span> <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-attribute\">x</span> y;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"跨域支持实例\"><a href=\"#跨域支持实例\" class=\"headerlink\" title=\"跨域支持实例\"></a>跨域支持实例</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"hljs-keyword\">map</span> <span class=\"hljs-variable\">$http_origin</span> <span class=\"hljs-variable\">$corsHost</span> &#123;<br>    <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-string\">&quot;~https://www.baidu.com&quot;</span>   <span class=\"hljs-variable\">$http_origin</span>;<br>    <span class=\"hljs-string\">&quot;~.xx.com&quot;</span>   <span class=\"hljs-variable\">$http_origin</span>;<br>    <span class=\"hljs-string\">&quot;~.yy.com&quot;</span>   <span class=\"hljs-variable\">$http_origin</span>;<br>&#125;<br><br>server &#123;<br>    listen <span class=\"hljs-number\">80</span>;<br>    ...<br><br>    location ~ ^/api &#123;<br>       <span class=\"hljs-built_in\"> root</span> xxx;<br>        fastcgi_pass xxx;<br>        add_header      Access-Control-Allow-Origin <span class=\"hljs-variable\">$corsHost</span>;<br>        add_header      Access-Control-Allow-Credentials<span class=\"hljs-built_in\"> true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"Python2的一些小语法","date":"2017-08-25T07:13:28.000Z","_content":"\n\n### Python保留N位小数点\n```python\na = 1\nb = 3\nn = 2\n\n# 默认两个Int除，结果也是int，需要转为float\n\n# 方法一：用round\nround(float(a) / b, n)\n\n# 方法二：用format\nformat(float(a) / b, '.2f')\n\n# 方法三：用 % 格式化\n'%.2f' %(float(a) / b)\n\n#方法三扩展，展现百分比， %%表示输出%\n'%.2f%%' %(100.0 * a / b)\n```\n\n### 多线程\n`threading`\n\n```python\nimport threading\n\ndef func1(name):\n    print name\n\ndef func2(name):\n    print \"hello, %s\" % name\n\nthreads = []\nt1 = threading.Thread(target=func1, args=('ma'))\nt2 = threading.Thread(target=func2, args=('world'))\nthreads.append(t1)\nthreads.append(t2)\n\nfor t in threads:\n    t.setDaemon(True)\n    t.start()\n\n```\n\n### 判断变量类型\n`isinstance(x, type)`\n\n- 判断int： isinstance(x,int)\n- 判断string: isinstance(s, basestring) or isinstance(s, (str, unicode))\n\n### urllib2网络请求\n```python\n# GET请求\nimport urllib,urllib2 \n\nuri = 'https://www.baidu.com/'  \n\nret = urllib2.urlopen(uri).read()\n\n#POST请求\nurl = 'http://www.someserver.com/cgi-bin/register.cgi'   \n  \nvalues = {'name' : 'Michael Foord',   \n          'location' : 'Northampton',   \n          'language' : 'Python' }   \n  \ndata = urllib.urlencode(values)   # 具体data格式视服务端而定，比如json，data = json.dumps(values)\n  \nreq = urllib2.Request(url, data)   \n  \nresponse = urllib2.urlopen(req)   \n  \nthe_page = response.read()   \n\n```\n\n**为urlopen设置可选参数:** `timeout`\n\n```python\nurllib2.urlopen(r, data=None, timeout=3)\n```\n\n### 模块路径设置\n- 代码中动态添加： `sys.path.append('/home/xxx/xxx')`\n- 设置环境变量`PYTHONPATH`\n\n### JSON处理\n```\njson.dumps()\n\njson.loads()\n```\n[详情参考](http://www.runoob.com/python/python-json.html)\n\n### 时间处理\n常用的时间戳： `int(time.time())`\n[更多用法可参考](http://www.cnblogs.com/snow-backup/p/5063665.html)\n\n### python函数是引用还是传值\npython不允许程序员选择采用传值还是传引用。Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值'来传递对象。\n\n[python函数传参是传值还是传引用？](http://www.cnblogs.com/loleina/p/5276918.html)\n\n### 连接mysql\n```python\nconfig = {\n    'host': '127.0.0.1',\n    'port': 3306,\n    'user': 'root',\n    'passwd': 'root',\n    'db': 'test',\n    'charset': 'utf8'\n}\nconn = mdb.connect(**config)\n\n# 如果使用事务引擎，可以设置自动提交事务，或者在每次操作完成后手动提交事务conn.commit()\nconn.autocommit(1)    # conn.autocommit(True) \n\n# 使用cursor()方法获取操作游标\ncursor = conn.cursor()\ncursor.execute(sql)\n\n# 关闭游标连接\ncursor.close()\n# 关闭数据库连接\nconn.close()\n```\n\n[Python连接MySQL数据库](http://www.cnblogs.com/conanwang/p/6028110.html)\n\n### python遍历dict\n```python\n\ndict.items()  # 获取(k, v)数组\n\ndict.keys()   #获取key数组\n\ndict.values() # 获取value数组\n\nfor i in dict:\n    key = i\n    value = dict[key]\n\nfor (k, v) int dict.items():\n    key = k\n    value = v\n```\n\n### 连接MongoDB\n先安装`pymongo`模块, [pymongo官方文档](http://api.mongodb.com/python/current/tutorial.html)\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient(\"10.85.139.145\", 8088)\ndb = client.test\ncollection = db.user\n\nres = collection.find_one({\"name\":\"python\"})\n```\n\n### AttributeError: ‘module’ object has no attribute’xxx’\n本来import自己写的一个脚本模块，正常运行；但是在模块中加了一个函数后，再运行就报错如标题。\n排查发现是`.pyc`文件导致，删除后正常。\n\n.pyc文件是由.py文件经过编译后生成的字节码文件，其加载速度相对于之前的.py文件有所提高，而且还可以实现源码隐藏，以及一定程度上的反编译。可能pyc有时更新不即时，导致错误。\n\n[When are .pyc files refreshed?](https://stackoverflow.com/questions/15839555/when-are-pyc-files-refreshed)\n\n\n----------------\n\n## 参考\n- [%格式化和format格式化](http://blog.csdn.net/wo_renfanzi/article/details/51477796)\n- [python 多线程就这么简单](http://www.cnblogs.com/fnng/p/3670789.html)\n- [How to check if type of a variable is string?](https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string)\n- [python通过get方式,post方式发送http请求和接收http响应-urllib urllib2](http://blog.csdn.net/mack415858775/article/details/39696107)\n\n\n","source":"_posts/python_syntax.md","raw":"---\nlayout: post\ntitle:  Python2的一些小语法\ndate:   2017-08-25 15:13:28 +0800\ncategories: [Python]\ntags: [Python]\n---\n\n\n### Python保留N位小数点\n```python\na = 1\nb = 3\nn = 2\n\n# 默认两个Int除，结果也是int，需要转为float\n\n# 方法一：用round\nround(float(a) / b, n)\n\n# 方法二：用format\nformat(float(a) / b, '.2f')\n\n# 方法三：用 % 格式化\n'%.2f' %(float(a) / b)\n\n#方法三扩展，展现百分比， %%表示输出%\n'%.2f%%' %(100.0 * a / b)\n```\n\n### 多线程\n`threading`\n\n```python\nimport threading\n\ndef func1(name):\n    print name\n\ndef func2(name):\n    print \"hello, %s\" % name\n\nthreads = []\nt1 = threading.Thread(target=func1, args=('ma'))\nt2 = threading.Thread(target=func2, args=('world'))\nthreads.append(t1)\nthreads.append(t2)\n\nfor t in threads:\n    t.setDaemon(True)\n    t.start()\n\n```\n\n### 判断变量类型\n`isinstance(x, type)`\n\n- 判断int： isinstance(x,int)\n- 判断string: isinstance(s, basestring) or isinstance(s, (str, unicode))\n\n### urllib2网络请求\n```python\n# GET请求\nimport urllib,urllib2 \n\nuri = 'https://www.baidu.com/'  \n\nret = urllib2.urlopen(uri).read()\n\n#POST请求\nurl = 'http://www.someserver.com/cgi-bin/register.cgi'   \n  \nvalues = {'name' : 'Michael Foord',   \n          'location' : 'Northampton',   \n          'language' : 'Python' }   \n  \ndata = urllib.urlencode(values)   # 具体data格式视服务端而定，比如json，data = json.dumps(values)\n  \nreq = urllib2.Request(url, data)   \n  \nresponse = urllib2.urlopen(req)   \n  \nthe_page = response.read()   \n\n```\n\n**为urlopen设置可选参数:** `timeout`\n\n```python\nurllib2.urlopen(r, data=None, timeout=3)\n```\n\n### 模块路径设置\n- 代码中动态添加： `sys.path.append('/home/xxx/xxx')`\n- 设置环境变量`PYTHONPATH`\n\n### JSON处理\n```\njson.dumps()\n\njson.loads()\n```\n[详情参考](http://www.runoob.com/python/python-json.html)\n\n### 时间处理\n常用的时间戳： `int(time.time())`\n[更多用法可参考](http://www.cnblogs.com/snow-backup/p/5063665.html)\n\n### python函数是引用还是传值\npython不允许程序员选择采用传值还是传引用。Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值'来传递对象。\n\n[python函数传参是传值还是传引用？](http://www.cnblogs.com/loleina/p/5276918.html)\n\n### 连接mysql\n```python\nconfig = {\n    'host': '127.0.0.1',\n    'port': 3306,\n    'user': 'root',\n    'passwd': 'root',\n    'db': 'test',\n    'charset': 'utf8'\n}\nconn = mdb.connect(**config)\n\n# 如果使用事务引擎，可以设置自动提交事务，或者在每次操作完成后手动提交事务conn.commit()\nconn.autocommit(1)    # conn.autocommit(True) \n\n# 使用cursor()方法获取操作游标\ncursor = conn.cursor()\ncursor.execute(sql)\n\n# 关闭游标连接\ncursor.close()\n# 关闭数据库连接\nconn.close()\n```\n\n[Python连接MySQL数据库](http://www.cnblogs.com/conanwang/p/6028110.html)\n\n### python遍历dict\n```python\n\ndict.items()  # 获取(k, v)数组\n\ndict.keys()   #获取key数组\n\ndict.values() # 获取value数组\n\nfor i in dict:\n    key = i\n    value = dict[key]\n\nfor (k, v) int dict.items():\n    key = k\n    value = v\n```\n\n### 连接MongoDB\n先安装`pymongo`模块, [pymongo官方文档](http://api.mongodb.com/python/current/tutorial.html)\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient(\"10.85.139.145\", 8088)\ndb = client.test\ncollection = db.user\n\nres = collection.find_one({\"name\":\"python\"})\n```\n\n### AttributeError: ‘module’ object has no attribute’xxx’\n本来import自己写的一个脚本模块，正常运行；但是在模块中加了一个函数后，再运行就报错如标题。\n排查发现是`.pyc`文件导致，删除后正常。\n\n.pyc文件是由.py文件经过编译后生成的字节码文件，其加载速度相对于之前的.py文件有所提高，而且还可以实现源码隐藏，以及一定程度上的反编译。可能pyc有时更新不即时，导致错误。\n\n[When are .pyc files refreshed?](https://stackoverflow.com/questions/15839555/when-are-pyc-files-refreshed)\n\n\n----------------\n\n## 参考\n- [%格式化和format格式化](http://blog.csdn.net/wo_renfanzi/article/details/51477796)\n- [python 多线程就这么简单](http://www.cnblogs.com/fnng/p/3670789.html)\n- [How to check if type of a variable is string?](https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string)\n- [python通过get方式,post方式发送http请求和接收http响应-urllib urllib2](http://blog.csdn.net/mack415858775/article/details/39696107)\n\n\n","slug":"python_syntax","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"photos":[],"link":"","_id":"cl5arauwk001dtswrbree7v0n","content":"<h3 id=\"Python保留N位小数点\"><a href=\"#Python保留N位小数点\" class=\"headerlink\" title=\"Python保留N位小数点\"></a>Python保留N位小数点</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">a = <span class=\"hljs-number\">1</span><br>b = <span class=\"hljs-number\">3</span><br>n = <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\"># 默认两个Int除，结果也是int，需要转为float</span><br><br><span class=\"hljs-comment\"># 方法一：用round</span><br><span class=\"hljs-built_in\">round</span>(<span class=\"hljs-built_in\">float</span>(a) / b, n)<br><br><span class=\"hljs-comment\"># 方法二：用format</span><br><span class=\"hljs-built_in\">format</span>(<span class=\"hljs-built_in\">float</span>(a) / b, <span class=\"hljs-string\">&#x27;.2f&#x27;</span>)<br><br><span class=\"hljs-comment\"># 方法三：用 % 格式化</span><br><span class=\"hljs-string\">&#x27;%.2f&#x27;</span> %(<span class=\"hljs-built_in\">float</span>(a) / b)<br><br><span class=\"hljs-comment\">#方法三扩展，展现百分比， %%表示输出%</span><br><span class=\"hljs-string\">&#x27;%.2f%%&#x27;</span> %(<span class=\"hljs-number\">100.0</span> * a / b)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><p><code>threading</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func1</span>(<span class=\"hljs-params\">name</span>):<br>    <span class=\"hljs-built_in\">print</span> name<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func2</span>(<span class=\"hljs-params\">name</span>):<br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;hello, %s&quot;</span> % name<br><br>threads = []<br>t1 = threading.Thread(target=func1, args=(<span class=\"hljs-string\">&#x27;ma&#x27;</span>))<br>t2 = threading.Thread(target=func2, args=(<span class=\"hljs-string\">&#x27;world&#x27;</span>))<br>threads.append(t1)<br>threads.append(t2)<br><br><span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> threads:<br>    t.setDaemon(<span class=\"hljs-literal\">True</span>)<br>    t.start()<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"判断变量类型\"><a href=\"#判断变量类型\" class=\"headerlink\" title=\"判断变量类型\"></a>判断变量类型</h3><p><code>isinstance(x, type)</code></p>\n<ul>\n<li>判断int： isinstance(x,int)</li>\n<li>判断string: isinstance(s, basestring) or isinstance(s, (str, unicode))</li>\n</ul>\n<h3 id=\"urllib2网络请求\"><a href=\"#urllib2网络请求\" class=\"headerlink\" title=\"urllib2网络请求\"></a>urllib2网络请求</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># GET请求</span><br><span class=\"hljs-keyword\">import</span> urllib,urllib2 <br><br>uri = <span class=\"hljs-string\">&#x27;https://www.baidu.com/&#x27;</span>  <br><br>ret = urllib2.urlopen(uri).read()<br><br><span class=\"hljs-comment\">#POST请求</span><br>url = <span class=\"hljs-string\">&#x27;http://www.someserver.com/cgi-bin/register.cgi&#x27;</span>   <br>  <br>values = &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span> : <span class=\"hljs-string\">&#x27;Michael Foord&#x27;</span>,   <br>          <span class=\"hljs-string\">&#x27;location&#x27;</span> : <span class=\"hljs-string\">&#x27;Northampton&#x27;</span>,   <br>          <span class=\"hljs-string\">&#x27;language&#x27;</span> : <span class=\"hljs-string\">&#x27;Python&#x27;</span> &#125;   <br>  <br>data = urllib.urlencode(values)   <span class=\"hljs-comment\"># 具体data格式视服务端而定，比如json，data = json.dumps(values)</span><br>  <br>req = urllib2.Request(url, data)   <br>  <br>response = urllib2.urlopen(req)   <br>  <br>the_page = response.read()   <br><br></code></pre></td></tr></table></figure>\n\n<p><strong>为urlopen设置可选参数:</strong> <code>timeout</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">urllib2.urlopen(r, data=<span class=\"hljs-literal\">None</span>, timeout=<span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"模块路径设置\"><a href=\"#模块路径设置\" class=\"headerlink\" title=\"模块路径设置\"></a>模块路径设置</h3><ul>\n<li>代码中动态添加： <code>sys.path.append(&#39;/home/xxx/xxx&#39;)</code></li>\n<li>设置环境变量<code>PYTHONPATH</code></li>\n</ul>\n<h3 id=\"JSON处理\"><a href=\"#JSON处理\" class=\"headerlink\" title=\"JSON处理\"></a>JSON处理</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-type\">json</span>.dumps()<br><br><span class=\"hljs-type\">json</span>.loads()<br></code></pre></td></tr></table></figure>\n<p><a href=\"http://www.runoob.com/python/python-json.html\">详情参考</a></p>\n<h3 id=\"时间处理\"><a href=\"#时间处理\" class=\"headerlink\" title=\"时间处理\"></a>时间处理</h3><p>常用的时间戳： <code>int(time.time())</code><br><a href=\"http://www.cnblogs.com/snow-backup/p/5063665.html\">更多用法可参考</a></p>\n<h3 id=\"python函数是引用还是传值\"><a href=\"#python函数是引用还是传值\" class=\"headerlink\" title=\"python函数是引用还是传值\"></a>python函数是引用还是传值</h3><p>python不允许程序员选择采用传值还是传引用。Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值’来传递对象。</p>\n<p><a href=\"http://www.cnblogs.com/loleina/p/5276918.html\">python函数传参是传值还是传引用？</a></p>\n<h3 id=\"连接mysql\"><a href=\"#连接mysql\" class=\"headerlink\" title=\"连接mysql\"></a>连接mysql</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">config = &#123;<br>    <span class=\"hljs-string\">&#x27;host&#x27;</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;port&#x27;</span>: <span class=\"hljs-number\">3306</span>,<br>    <span class=\"hljs-string\">&#x27;user&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;passwd&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;db&#x27;</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;charset&#x27;</span>: <span class=\"hljs-string\">&#x27;utf8&#x27;</span><br>&#125;<br>conn = mdb.connect(**config)<br><br><span class=\"hljs-comment\"># 如果使用事务引擎，可以设置自动提交事务，或者在每次操作完成后手动提交事务conn.commit()</span><br>conn.autocommit(<span class=\"hljs-number\">1</span>)    <span class=\"hljs-comment\"># conn.autocommit(True) </span><br><br><span class=\"hljs-comment\"># 使用cursor()方法获取操作游标</span><br>cursor = conn.cursor()<br>cursor.execute(sql)<br><br><span class=\"hljs-comment\"># 关闭游标连接</span><br>cursor.close()<br><span class=\"hljs-comment\"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cnblogs.com/conanwang/p/6028110.html\">Python连接MySQL数据库</a></p>\n<h3 id=\"python遍历dict\"><a href=\"#python遍历dict\" class=\"headerlink\" title=\"python遍历dict\"></a>python遍历dict</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-built_in\">dict</span>.items()  <span class=\"hljs-comment\"># 获取(k, v)数组</span><br><br><span class=\"hljs-built_in\">dict</span>.keys()   <span class=\"hljs-comment\">#获取key数组</span><br><br><span class=\"hljs-built_in\">dict</span>.values() <span class=\"hljs-comment\"># 获取value数组</span><br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">dict</span>:<br>    key = i<br>    value = <span class=\"hljs-built_in\">dict</span>[key]<br><br><span class=\"hljs-keyword\">for</span> (k, v) <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">dict</span>.items():<br>    key = k<br>    value = v<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"连接MongoDB\"><a href=\"#连接MongoDB\" class=\"headerlink\" title=\"连接MongoDB\"></a>连接MongoDB</h3><p>先安装<code>pymongo</code>模块, <a href=\"http://api.mongodb.com/python/current/tutorial.html\">pymongo官方文档</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pymongo <span class=\"hljs-keyword\">import</span> MongoClient<br><br>client = MongoClient(<span class=\"hljs-string\">&quot;10.85.139.145&quot;</span>, <span class=\"hljs-number\">8088</span>)<br>db = client.test<br>collection = db.user<br><br>res = collection.find_one(&#123;<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;python&quot;</span>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"AttributeError-‘module’-object-has-no-attribute’xxx’\"><a href=\"#AttributeError-‘module’-object-has-no-attribute’xxx’\" class=\"headerlink\" title=\"AttributeError: ‘module’ object has no attribute’xxx’\"></a>AttributeError: ‘module’ object has no attribute’xxx’</h3><p>本来import自己写的一个脚本模块，正常运行；但是在模块中加了一个函数后，再运行就报错如标题。<br>排查发现是<code>.pyc</code>文件导致，删除后正常。</p>\n<p>.pyc文件是由.py文件经过编译后生成的字节码文件，其加载速度相对于之前的.py文件有所提高，而且还可以实现源码隐藏，以及一定程度上的反编译。可能pyc有时更新不即时，导致错误。</p>\n<p><a href=\"https://stackoverflow.com/questions/15839555/when-are-pyc-files-refreshed\">When are .pyc files refreshed?</a></p>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/wo_renfanzi/article/details/51477796\">%格式化和format格式化</a></li>\n<li><a href=\"http://www.cnblogs.com/fnng/p/3670789.html\">python 多线程就这么简单</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string\">How to check if type of a variable is string?</a></li>\n<li><a href=\"http://blog.csdn.net/mack415858775/article/details/39696107\">python通过get方式,post方式发送http请求和接收http响应-urllib urllib2</a></li>\n</ul>\n","site":{"data":{}},"wordcount":2826,"excerpt":"","more":"<h3 id=\"Python保留N位小数点\"><a href=\"#Python保留N位小数点\" class=\"headerlink\" title=\"Python保留N位小数点\"></a>Python保留N位小数点</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">a = <span class=\"hljs-number\">1</span><br>b = <span class=\"hljs-number\">3</span><br>n = <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\"># 默认两个Int除，结果也是int，需要转为float</span><br><br><span class=\"hljs-comment\"># 方法一：用round</span><br><span class=\"hljs-built_in\">round</span>(<span class=\"hljs-built_in\">float</span>(a) / b, n)<br><br><span class=\"hljs-comment\"># 方法二：用format</span><br><span class=\"hljs-built_in\">format</span>(<span class=\"hljs-built_in\">float</span>(a) / b, <span class=\"hljs-string\">&#x27;.2f&#x27;</span>)<br><br><span class=\"hljs-comment\"># 方法三：用 % 格式化</span><br><span class=\"hljs-string\">&#x27;%.2f&#x27;</span> %(<span class=\"hljs-built_in\">float</span>(a) / b)<br><br><span class=\"hljs-comment\">#方法三扩展，展现百分比， %%表示输出%</span><br><span class=\"hljs-string\">&#x27;%.2f%%&#x27;</span> %(<span class=\"hljs-number\">100.0</span> * a / b)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><p><code>threading</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func1</span>(<span class=\"hljs-params\">name</span>):<br>    <span class=\"hljs-built_in\">print</span> name<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func2</span>(<span class=\"hljs-params\">name</span>):<br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&quot;hello, %s&quot;</span> % name<br><br>threads = []<br>t1 = threading.Thread(target=func1, args=(<span class=\"hljs-string\">&#x27;ma&#x27;</span>))<br>t2 = threading.Thread(target=func2, args=(<span class=\"hljs-string\">&#x27;world&#x27;</span>))<br>threads.append(t1)<br>threads.append(t2)<br><br><span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> threads:<br>    t.setDaemon(<span class=\"hljs-literal\">True</span>)<br>    t.start()<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"判断变量类型\"><a href=\"#判断变量类型\" class=\"headerlink\" title=\"判断变量类型\"></a>判断变量类型</h3><p><code>isinstance(x, type)</code></p>\n<ul>\n<li>判断int： isinstance(x,int)</li>\n<li>判断string: isinstance(s, basestring) or isinstance(s, (str, unicode))</li>\n</ul>\n<h3 id=\"urllib2网络请求\"><a href=\"#urllib2网络请求\" class=\"headerlink\" title=\"urllib2网络请求\"></a>urllib2网络请求</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># GET请求</span><br><span class=\"hljs-keyword\">import</span> urllib,urllib2 <br><br>uri = <span class=\"hljs-string\">&#x27;https://www.baidu.com/&#x27;</span>  <br><br>ret = urllib2.urlopen(uri).read()<br><br><span class=\"hljs-comment\">#POST请求</span><br>url = <span class=\"hljs-string\">&#x27;http://www.someserver.com/cgi-bin/register.cgi&#x27;</span>   <br>  <br>values = &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span> : <span class=\"hljs-string\">&#x27;Michael Foord&#x27;</span>,   <br>          <span class=\"hljs-string\">&#x27;location&#x27;</span> : <span class=\"hljs-string\">&#x27;Northampton&#x27;</span>,   <br>          <span class=\"hljs-string\">&#x27;language&#x27;</span> : <span class=\"hljs-string\">&#x27;Python&#x27;</span> &#125;   <br>  <br>data = urllib.urlencode(values)   <span class=\"hljs-comment\"># 具体data格式视服务端而定，比如json，data = json.dumps(values)</span><br>  <br>req = urllib2.Request(url, data)   <br>  <br>response = urllib2.urlopen(req)   <br>  <br>the_page = response.read()   <br><br></code></pre></td></tr></table></figure>\n\n<p><strong>为urlopen设置可选参数:</strong> <code>timeout</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">urllib2.urlopen(r, data=<span class=\"hljs-literal\">None</span>, timeout=<span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"模块路径设置\"><a href=\"#模块路径设置\" class=\"headerlink\" title=\"模块路径设置\"></a>模块路径设置</h3><ul>\n<li>代码中动态添加： <code>sys.path.append(&#39;/home/xxx/xxx&#39;)</code></li>\n<li>设置环境变量<code>PYTHONPATH</code></li>\n</ul>\n<h3 id=\"JSON处理\"><a href=\"#JSON处理\" class=\"headerlink\" title=\"JSON处理\"></a>JSON处理</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-type\">json</span>.dumps()<br><br><span class=\"hljs-type\">json</span>.loads()<br></code></pre></td></tr></table></figure>\n<p><a href=\"http://www.runoob.com/python/python-json.html\">详情参考</a></p>\n<h3 id=\"时间处理\"><a href=\"#时间处理\" class=\"headerlink\" title=\"时间处理\"></a>时间处理</h3><p>常用的时间戳： <code>int(time.time())</code><br><a href=\"http://www.cnblogs.com/snow-backup/p/5063665.html\">更多用法可参考</a></p>\n<h3 id=\"python函数是引用还是传值\"><a href=\"#python函数是引用还是传值\" class=\"headerlink\" title=\"python函数是引用还是传值\"></a>python函数是引用还是传值</h3><p>python不允许程序员选择采用传值还是传引用。Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值’来传递对象。</p>\n<p><a href=\"http://www.cnblogs.com/loleina/p/5276918.html\">python函数传参是传值还是传引用？</a></p>\n<h3 id=\"连接mysql\"><a href=\"#连接mysql\" class=\"headerlink\" title=\"连接mysql\"></a>连接mysql</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">config = &#123;<br>    <span class=\"hljs-string\">&#x27;host&#x27;</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;port&#x27;</span>: <span class=\"hljs-number\">3306</span>,<br>    <span class=\"hljs-string\">&#x27;user&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;passwd&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;db&#x27;</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span>,<br>    <span class=\"hljs-string\">&#x27;charset&#x27;</span>: <span class=\"hljs-string\">&#x27;utf8&#x27;</span><br>&#125;<br>conn = mdb.connect(**config)<br><br><span class=\"hljs-comment\"># 如果使用事务引擎，可以设置自动提交事务，或者在每次操作完成后手动提交事务conn.commit()</span><br>conn.autocommit(<span class=\"hljs-number\">1</span>)    <span class=\"hljs-comment\"># conn.autocommit(True) </span><br><br><span class=\"hljs-comment\"># 使用cursor()方法获取操作游标</span><br>cursor = conn.cursor()<br>cursor.execute(sql)<br><br><span class=\"hljs-comment\"># 关闭游标连接</span><br>cursor.close()<br><span class=\"hljs-comment\"># 关闭数据库连接</span><br>conn.close()<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cnblogs.com/conanwang/p/6028110.html\">Python连接MySQL数据库</a></p>\n<h3 id=\"python遍历dict\"><a href=\"#python遍历dict\" class=\"headerlink\" title=\"python遍历dict\"></a>python遍历dict</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-built_in\">dict</span>.items()  <span class=\"hljs-comment\"># 获取(k, v)数组</span><br><br><span class=\"hljs-built_in\">dict</span>.keys()   <span class=\"hljs-comment\">#获取key数组</span><br><br><span class=\"hljs-built_in\">dict</span>.values() <span class=\"hljs-comment\"># 获取value数组</span><br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">dict</span>:<br>    key = i<br>    value = <span class=\"hljs-built_in\">dict</span>[key]<br><br><span class=\"hljs-keyword\">for</span> (k, v) <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">dict</span>.items():<br>    key = k<br>    value = v<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"连接MongoDB\"><a href=\"#连接MongoDB\" class=\"headerlink\" title=\"连接MongoDB\"></a>连接MongoDB</h3><p>先安装<code>pymongo</code>模块, <a href=\"http://api.mongodb.com/python/current/tutorial.html\">pymongo官方文档</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pymongo <span class=\"hljs-keyword\">import</span> MongoClient<br><br>client = MongoClient(<span class=\"hljs-string\">&quot;10.85.139.145&quot;</span>, <span class=\"hljs-number\">8088</span>)<br>db = client.test<br>collection = db.user<br><br>res = collection.find_one(&#123;<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;python&quot;</span>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"AttributeError-‘module’-object-has-no-attribute’xxx’\"><a href=\"#AttributeError-‘module’-object-has-no-attribute’xxx’\" class=\"headerlink\" title=\"AttributeError: ‘module’ object has no attribute’xxx’\"></a>AttributeError: ‘module’ object has no attribute’xxx’</h3><p>本来import自己写的一个脚本模块，正常运行；但是在模块中加了一个函数后，再运行就报错如标题。<br>排查发现是<code>.pyc</code>文件导致，删除后正常。</p>\n<p>.pyc文件是由.py文件经过编译后生成的字节码文件，其加载速度相对于之前的.py文件有所提高，而且还可以实现源码隐藏，以及一定程度上的反编译。可能pyc有时更新不即时，导致错误。</p>\n<p><a href=\"https://stackoverflow.com/questions/15839555/when-are-pyc-files-refreshed\">When are .pyc files refreshed?</a></p>\n<hr>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/wo_renfanzi/article/details/51477796\">%格式化和format格式化</a></li>\n<li><a href=\"http://www.cnblogs.com/fnng/p/3670789.html\">python 多线程就这么简单</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string\">How to check if type of a variable is string?</a></li>\n<li><a href=\"http://blog.csdn.net/mack415858775/article/details/39696107\">python通过get方式,post方式发送http请求和接收http响应-urllib urllib2</a></li>\n</ul>\n"},{"title":"PHP Fatal error Allowed memory size exhauste","date":"2017-03-17T02:33:07.000Z","_content":"\n> 有时运行PHP会报错误`Fatal error: Allowed memory size of 134217728 bytes exhauste`，直接原因是PHP所占用的内存超过了设定大小\n\n## 解决办法\n### 修改内存限制\n- 取消限制`ini_set(\"memory_limit\",\"-1\");`\n- 根据需要设定上限`ini_set(\"memory_limit\",\"2048M\");`\n\n### 通过优化程序以减少内存占用\n- 变量使用后，及时`unset()`等\n","source":"_posts/php-fatal-memory-exhauste.md","raw":"---\ntitle: PHP Fatal error Allowed memory size exhauste\ndate: 2017-03-17 10:33:07\ncategories: [PHP]\ntags: [PHP]\n---\n\n> 有时运行PHP会报错误`Fatal error: Allowed memory size of 134217728 bytes exhauste`，直接原因是PHP所占用的内存超过了设定大小\n\n## 解决办法\n### 修改内存限制\n- 取消限制`ini_set(\"memory_limit\",\"-1\");`\n- 根据需要设定上限`ini_set(\"memory_limit\",\"2048M\");`\n\n### 通过优化程序以减少内存占用\n- 变量使用后，及时`unset()`等\n","slug":"php-fatal-memory-exhauste","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwl001ftswr3vhxfv9m","content":"<blockquote>\n<p>有时运行PHP会报错误<code>Fatal error: Allowed memory size of 134217728 bytes exhauste</code>，直接原因是PHP所占用的内存超过了设定大小</p>\n</blockquote>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><h3 id=\"修改内存限制\"><a href=\"#修改内存限制\" class=\"headerlink\" title=\"修改内存限制\"></a>修改内存限制</h3><ul>\n<li>取消限制<code>ini_set(&quot;memory_limit&quot;,&quot;-1&quot;);</code></li>\n<li>根据需要设定上限<code>ini_set(&quot;memory_limit&quot;,&quot;2048M&quot;);</code></li>\n</ul>\n<h3 id=\"通过优化程序以减少内存占用\"><a href=\"#通过优化程序以减少内存占用\" class=\"headerlink\" title=\"通过优化程序以减少内存占用\"></a>通过优化程序以减少内存占用</h3><ul>\n<li>变量使用后，及时<code>unset()</code>等</li>\n</ul>\n","site":{"data":{}},"wordcount":237,"excerpt":"","more":"<blockquote>\n<p>有时运行PHP会报错误<code>Fatal error: Allowed memory size of 134217728 bytes exhauste</code>，直接原因是PHP所占用的内存超过了设定大小</p>\n</blockquote>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><h3 id=\"修改内存限制\"><a href=\"#修改内存限制\" class=\"headerlink\" title=\"修改内存限制\"></a>修改内存限制</h3><ul>\n<li>取消限制<code>ini_set(&quot;memory_limit&quot;,&quot;-1&quot;);</code></li>\n<li>根据需要设定上限<code>ini_set(&quot;memory_limit&quot;,&quot;2048M&quot;);</code></li>\n</ul>\n<h3 id=\"通过优化程序以减少内存占用\"><a href=\"#通过优化程序以减少内存占用\" class=\"headerlink\" title=\"通过优化程序以减少内存占用\"></a>通过优化程序以减少内存占用</h3><ul>\n<li>变量使用后，及时<code>unset()</code>等</li>\n</ul>\n"},{"title":"【转】一篇文章让你学会全部跑步知识","date":"2016-08-03T11:22:36.000Z","_content":"\n### 转载一篇跑步相关的文章\n[`跑步大全：一篇文章让你学会全部跑步知识`](http://www.jianshu.com/p/e582eea50c69)\n\n\n### 定个16年底的目标\n1. 跑步总数达到300KM，还有140KM；\n2. 骑行达到700KM，还剩300KM；\n\n\n坚持坚持~\n","source":"_posts/runner.md","raw":"---\ntitle: 【转】一篇文章让你学会全部跑步知识\ndate: 2016-08-03 19:22:36\ncategories: [生活]\ntags: [生活]\n---\n\n### 转载一篇跑步相关的文章\n[`跑步大全：一篇文章让你学会全部跑步知识`](http://www.jianshu.com/p/e582eea50c69)\n\n\n### 定个16年底的目标\n1. 跑步总数达到300KM，还有140KM；\n2. 骑行达到700KM，还剩300KM；\n\n\n坚持坚持~\n","slug":"runner","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwl001jtswres4p67t0","content":"<h3 id=\"转载一篇跑步相关的文章\"><a href=\"#转载一篇跑步相关的文章\" class=\"headerlink\" title=\"转载一篇跑步相关的文章\"></a>转载一篇跑步相关的文章</h3><p><a href=\"http://www.jianshu.com/p/e582eea50c69\"><code>跑步大全：一篇文章让你学会全部跑步知识</code></a></p>\n<h3 id=\"定个16年底的目标\"><a href=\"#定个16年底的目标\" class=\"headerlink\" title=\"定个16年底的目标\"></a>定个16年底的目标</h3><ol>\n<li>跑步总数达到300KM，还有140KM；</li>\n<li>骑行达到700KM，还剩300KM；</li>\n</ol>\n<p>坚持坚持~</p>\n","site":{"data":{}},"wordcount":82,"excerpt":"","more":"<h3 id=\"转载一篇跑步相关的文章\"><a href=\"#转载一篇跑步相关的文章\" class=\"headerlink\" title=\"转载一篇跑步相关的文章\"></a>转载一篇跑步相关的文章</h3><p><a href=\"http://www.jianshu.com/p/e582eea50c69\"><code>跑步大全：一篇文章让你学会全部跑步知识</code></a></p>\n<h3 id=\"定个16年底的目标\"><a href=\"#定个16年底的目标\" class=\"headerlink\" title=\"定个16年底的目标\"></a>定个16年底的目标</h3><ol>\n<li>跑步总数达到300KM，还有140KM；</li>\n<li>骑行达到700KM，还剩300KM；</li>\n</ol>\n<p>坚持坚持~</p>\n"},{"layout":"post","title":"上海市浦东新区公积金租赁提取","date":"2017-03-08T05:31:03.000Z","_content":"\n### 要求\n家庭名下上海市内无房产，在上海市租房居住。\n\n### 准备工作\n* 查询好自己的公积金帐号\n* 准备好上海市内的一张借记卡，并问清开户支行\n* 已婚的带好结婚证\n\n### 办理流程\n#### 公积金管理中心办理流程\n* 前往浦东新区公积金管理中心，地址：浦城路812号2楼\n* 按照要求填写两个表格：提取申请表和房屋状况查询申请表（为了查询名下是否在上海有房产）\n* 取号等待办理\n\n#### 手机短信申请续提-初次申请不可用\n上笔提取完全终止后，婚姻信息，卡号，支行，提取金额，租房地址等全都不变，仅提取时间推后，可使用经过验证的预留手机号发短信申请，步骤如下：\n* 联通：1065502112329，电信：1065902112329，移动：1065751612329\n* 查询，发送`TQZLCX`至上述号码，查询最近一次租赁提取记录\n* 按照短信返回内容中的指令继续操作即可\n\n### 说明\n* 家庭为单位最多每月提取2000元，每3个月打款一次。\n","source":"_posts/sh-gongjijin.md","raw":"---\nlayout: post\ntitle:  \"上海市浦东新区公积金租赁提取\"\ndate:   2017-03-08 13:31:03 +0800\ncategories: [生活]\ntags: [生活]\n---\n\n### 要求\n家庭名下上海市内无房产，在上海市租房居住。\n\n### 准备工作\n* 查询好自己的公积金帐号\n* 准备好上海市内的一张借记卡，并问清开户支行\n* 已婚的带好结婚证\n\n### 办理流程\n#### 公积金管理中心办理流程\n* 前往浦东新区公积金管理中心，地址：浦城路812号2楼\n* 按照要求填写两个表格：提取申请表和房屋状况查询申请表（为了查询名下是否在上海有房产）\n* 取号等待办理\n\n#### 手机短信申请续提-初次申请不可用\n上笔提取完全终止后，婚姻信息，卡号，支行，提取金额，租房地址等全都不变，仅提取时间推后，可使用经过验证的预留手机号发短信申请，步骤如下：\n* 联通：1065502112329，电信：1065902112329，移动：1065751612329\n* 查询，发送`TQZLCX`至上述号码，查询最近一次租赁提取记录\n* 按照短信返回内容中的指令继续操作即可\n\n### 说明\n* 家庭为单位最多每月提取2000元，每3个月打款一次。\n","slug":"sh-gongjijin","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"photos":[],"link":"","_id":"cl5arauwl001mtswreemqhvw1","content":"<h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>家庭名下上海市内无房产，在上海市租房居住。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>查询好自己的公积金帐号</li>\n<li>准备好上海市内的一张借记卡，并问清开户支行</li>\n<li>已婚的带好结婚证</li>\n</ul>\n<h3 id=\"办理流程\"><a href=\"#办理流程\" class=\"headerlink\" title=\"办理流程\"></a>办理流程</h3><h4 id=\"公积金管理中心办理流程\"><a href=\"#公积金管理中心办理流程\" class=\"headerlink\" title=\"公积金管理中心办理流程\"></a>公积金管理中心办理流程</h4><ul>\n<li>前往浦东新区公积金管理中心，地址：浦城路812号2楼</li>\n<li>按照要求填写两个表格：提取申请表和房屋状况查询申请表（为了查询名下是否在上海有房产）</li>\n<li>取号等待办理</li>\n</ul>\n<h4 id=\"手机短信申请续提-初次申请不可用\"><a href=\"#手机短信申请续提-初次申请不可用\" class=\"headerlink\" title=\"手机短信申请续提-初次申请不可用\"></a>手机短信申请续提-初次申请不可用</h4><p>上笔提取完全终止后，婚姻信息，卡号，支行，提取金额，租房地址等全都不变，仅提取时间推后，可使用经过验证的预留手机号发短信申请，步骤如下：</p>\n<ul>\n<li>联通：1065502112329，电信：1065902112329，移动：1065751612329</li>\n<li>查询，发送<code>TQZLCX</code>至上述号码，查询最近一次租赁提取记录</li>\n<li>按照短信返回内容中的指令继续操作即可</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>家庭为单位最多每月提取2000元，每3个月打款一次。</li>\n</ul>\n","site":{"data":{}},"wordcount":365,"excerpt":"","more":"<h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>家庭名下上海市内无房产，在上海市租房居住。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>查询好自己的公积金帐号</li>\n<li>准备好上海市内的一张借记卡，并问清开户支行</li>\n<li>已婚的带好结婚证</li>\n</ul>\n<h3 id=\"办理流程\"><a href=\"#办理流程\" class=\"headerlink\" title=\"办理流程\"></a>办理流程</h3><h4 id=\"公积金管理中心办理流程\"><a href=\"#公积金管理中心办理流程\" class=\"headerlink\" title=\"公积金管理中心办理流程\"></a>公积金管理中心办理流程</h4><ul>\n<li>前往浦东新区公积金管理中心，地址：浦城路812号2楼</li>\n<li>按照要求填写两个表格：提取申请表和房屋状况查询申请表（为了查询名下是否在上海有房产）</li>\n<li>取号等待办理</li>\n</ul>\n<h4 id=\"手机短信申请续提-初次申请不可用\"><a href=\"#手机短信申请续提-初次申请不可用\" class=\"headerlink\" title=\"手机短信申请续提-初次申请不可用\"></a>手机短信申请续提-初次申请不可用</h4><p>上笔提取完全终止后，婚姻信息，卡号，支行，提取金额，租房地址等全都不变，仅提取时间推后，可使用经过验证的预留手机号发短信申请，步骤如下：</p>\n<ul>\n<li>联通：1065502112329，电信：1065902112329，移动：1065751612329</li>\n<li>查询，发送<code>TQZLCX</code>至上述号码，查询最近一次租赁提取记录</li>\n<li>按照短信返回内容中的指令继续操作即可</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>家庭为单位最多每月提取2000元，每3个月打款一次。</li>\n</ul>\n"},{"layout":"post","title":"上海居住证办理流程","date":"2016-07-19T02:17:03.000Z","_content":"\n>最近去办理了上海市居住证，总结一下流程。\n\n### 租赁备案办理流程\n\n\n1. 居委会出具的房屋租赁合同登记备案办证通知单\n2. 租赁合同原件复印件\n2. 房东身份证、共有人身份证复印件\n2. 房产证复印件\n2. 承租人身份证\n\n### 居住证办理流程\n1. 租赁备案证明\n2. 承租人身份证、劳动合同、满6个月的社保单（注：若身份证地址与实际户籍地址不一致要带户口本）\n\n### 注意事项\n1. 人均居住面积不低于5平米\n2. 备案要求房东到场\n\n\n","source":"_posts/sh-juzhuzheng.md","raw":"---\nlayout: post\ntitle:  \"上海居住证办理流程\"\ndate:   2016-07-19 10:17:03 +0800\ncategories: [生活]\ntags: [生活]\n---\n\n>最近去办理了上海市居住证，总结一下流程。\n\n### 租赁备案办理流程\n\n\n1. 居委会出具的房屋租赁合同登记备案办证通知单\n2. 租赁合同原件复印件\n2. 房东身份证、共有人身份证复印件\n2. 房产证复印件\n2. 承租人身份证\n\n### 居住证办理流程\n1. 租赁备案证明\n2. 承租人身份证、劳动合同、满6个月的社保单（注：若身份证地址与实际户籍地址不一致要带户口本）\n\n### 注意事项\n1. 人均居住面积不低于5平米\n2. 备案要求房东到场\n\n\n","slug":"sh-juzhuzheng","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"photos":[],"link":"","_id":"cl5arauwm001qtswrbb8wgi6x","content":"<blockquote>\n<p>最近去办理了上海市居住证，总结一下流程。</p>\n</blockquote>\n<h3 id=\"租赁备案办理流程\"><a href=\"#租赁备案办理流程\" class=\"headerlink\" title=\"租赁备案办理流程\"></a>租赁备案办理流程</h3><ol>\n<li>居委会出具的房屋租赁合同登记备案办证通知单</li>\n<li>租赁合同原件复印件</li>\n<li>房东身份证、共有人身份证复印件</li>\n<li>房产证复印件</li>\n<li>承租人身份证</li>\n</ol>\n<h3 id=\"居住证办理流程\"><a href=\"#居住证办理流程\" class=\"headerlink\" title=\"居住证办理流程\"></a>居住证办理流程</h3><ol>\n<li>租赁备案证明</li>\n<li>承租人身份证、劳动合同、满6个月的社保单（注：若身份证地址与实际户籍地址不一致要带户口本）</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>人均居住面积不低于5平米</li>\n<li>备案要求房东到场</li>\n</ol>\n","site":{"data":{}},"wordcount":167,"excerpt":"","more":"<blockquote>\n<p>最近去办理了上海市居住证，总结一下流程。</p>\n</blockquote>\n<h3 id=\"租赁备案办理流程\"><a href=\"#租赁备案办理流程\" class=\"headerlink\" title=\"租赁备案办理流程\"></a>租赁备案办理流程</h3><ol>\n<li>居委会出具的房屋租赁合同登记备案办证通知单</li>\n<li>租赁合同原件复印件</li>\n<li>房东身份证、共有人身份证复印件</li>\n<li>房产证复印件</li>\n<li>承租人身份证</li>\n</ol>\n<h3 id=\"居住证办理流程\"><a href=\"#居住证办理流程\" class=\"headerlink\" title=\"居住证办理流程\"></a>居住证办理流程</h3><ol>\n<li>租赁备案证明</li>\n<li>承租人身份证、劳动合同、满6个月的社保单（注：若身份证地址与实际户籍地址不一致要带户口本）</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>人均居住面积不低于5平米</li>\n<li>备案要求房东到场</li>\n</ol>\n"},{"layout":"post","title":"文本分类的调研","date":"2016-07-16T15:17:03.000Z","_content":"\n>最近拿到一批用户对产品的反馈数据，需要进行文本分类，找出用户的痛点，从而发掘产品的优化方向。\n\n### 本文主要调研了：  \n1. LDA主题分类模型（python gensim包）；\n2. Naive Bayes;\n3. SVM;\n\n\n#### 首先调研了LDA主题分类模型，使用python gensim包，代码如下：\n\n```python\nimport jieba\nimport jieba.analyse\nimport  os, sys\nfrom gensim import corpora, models, similarities\n\ntrain_set = []\n\nwalk = os.walk('./data') #数据放在了data目录，每条反馈数据放在了单独的一个文件中\n\njieba.load_userdict(\"userdict.txt\")\n\nstopwords = [line.strip().decode('utf-8') for line in open('./stopwords.txt')]\nstopwords.append(' ')\n\n\nfor root, dirs, files in walk:\n\tfor name in files:\n\t\tf = open(os.path.join(root, name), 'r')\n\t\traw = f.read()\n\t\tword_list = filter(lambda _: _ not in stopwords, jieba.cut(raw, cut_all = False))\n\t\ttrain_set.append(word_list)\n\nnum = 20  #提取20个主题\n\ndic = corpora.Dictionary(train_set)\ncorpus = [dic.doc2bow(text) for text in train_set]\ntfidf = models.TfidfModel(corpus)\ncorpus_tfidf = tfidf[corpus]\nlda = models.LdaModel(corpus_tfidf, id2word = dic, num_topics = num)\ncorpus_lda = lda[corpus_tfidf]\n\nfor i in range(0, num):\n\tprint lda.print_topic(i)\n\n```\n结果： 提取出来的主题很难解释，效果不怎么好。\n\n----\n\n#### 接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）\n```python\nimport jieba\nimport jieba.analyse\nimport  os, sys\nimport sklearn.feature_extraction\nimport sklearn.naive_bayes as nb\nimport sklearn.externals.joblib as jl\nfrom sklearn import metrics\nimport xlrd\n\nreload(sys)\nsys.setdefaultencoding('utf8') \n\ndef calculate_result(actual,pred):  \n    m_precision = metrics.precision_score(actual,pred);  \n    m_recall = metrics.recall_score(actual,pred);  \n    print 'predict info:'  \n    print 'precision:{0:.3f}'.format(m_precision)  \n    print 'recall:{0:0.3f}'.format(m_recall);  \n    print 'f1-score:{0:.3f}'.format(metrics.f1_score(actual,pred));  \n\n\ntrain_set = []\n\njieba.load_userdict(\"userdict.txt\")\n\nstopwords = [line.strip().decode('utf-8') for line in open('./stopwords.txt')]\nstopwords.append(' ')\n\nkvlist = []\ntargetlist = []\n\ngnb = nb.MultinomialNB(alpha = 0.01)\nfh = sklearn.feature_extraction.FeatureHasher(n_features=15000,non_negative=True,input_type='string')\n\n# get train data, 标记的训练数据，excel中每行一条数据：第一列为需要分类的文本数据，第二行为人工标记的分类\ndata = xlrd.open_workbook('./data/train.csv.xls')\ntable = data.sheets()[0]\nnrows = table.nrows\nncols = table.ncols\n\nfor r in range(1, nrows):\n\tline = table.row_values(r)\n\tif line[1] != '':\n\t\ttargetlist += [int(line[1])]\n\t\twordlist = filter(lambda _: _ not in stopwords, jieba.cut(line[0], cut_all = False))\n\t\tkvlist += [ [ i for i in wordlist ] ]\n\n# get test data，标记的测试数据，格式同训练数据\ntestlist = []\ntesttargetlist = []\ndata = xlrd.open_workbook('./data/test.xls')\ntable = data.sheets()[0]\nnrows = table.nrows\nncols = table.ncols\n\nfor r in range(1, nrows):\n\tline = table.row_values(r)\n\tif line[1] != '':\n\t\ttesttargetlist += [int(line[1])]\n\t\twordlist = filter(lambda _: _ not in stopwords, jieba.cut(line[0], cut_all = False))\n\t\ttestlist += [ [ i for i in wordlist ] ]\n\n#验证模型的准确率，召回率\nprint '*************************\\nNB\\n*************************'  \nX = fh.fit_transform(kvlist)\ntestX = fh.fit_transform(testlist)\n\ngnb.fit(X,targetlist)\nresult = gnb.predict(testX)\n\ncalculate_result(testtargetlist, result)\n\nfrom sklearn.svm import SVC \nprint '*************************\\nSVM\\n*************************'  \nsvclf = SVC(kernel = 'linear')#default with 'rbf'  \nsvclf.fit(X,targetlist)  \npred = svclf.predict(testX);  \ncalculate_result(testtargetlist,pred);\n\n#使用训练出来的SVM模型对原始数据进行预测，原始数据格式为：每条数据单独存放在一个文本文件中\nwalk = os.walk('./data/2016')\nfor root, dirs, files in walk:\n\tfor name in files:\n\t\tf = open(os.path.join(root, name), 'r')\n\t\traw = f.read()\n\t\tword_list = filter(lambda _: _ not in stopwords, jieba.cut(raw, cut_all = False))\n\t\tkvlist = [ [ i for i in word_list ] ]\n\t\tX = fh.fit_transform(kvlist)\n\t\tpred = svclf.predict(X)\n\t\tprint raw\n\t\tprint pred\n```\n结果：SVM的准备率，召回率接近70%，比Naive Bayes稍微好些。\n\n----\n参考文档：\n\n1. [scikit-learn官网文档](http://scikit-learn.org/stable/user_guide.html)\n2. [应用scikit-learn做文本分类](http://blog.csdn.net/abcjennifer/article/details/23615947)\n3. [使用sklearn + jieba中文分词构建文本分类器](http://myg0u.com/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/2015/05/06/use-sklearn-jieba.html)\n","source":"_posts/text-classify.md","raw":"---\nlayout: post\ntitle:  \"文本分类的调研\"\ndate:   2016-07-16 23:17:03 +0800\ncategories: [Machine-Learning]\ntags: [python,scikitlearn,jieba]\n---\n\n>最近拿到一批用户对产品的反馈数据，需要进行文本分类，找出用户的痛点，从而发掘产品的优化方向。\n\n### 本文主要调研了：  \n1. LDA主题分类模型（python gensim包）；\n2. Naive Bayes;\n3. SVM;\n\n\n#### 首先调研了LDA主题分类模型，使用python gensim包，代码如下：\n\n```python\nimport jieba\nimport jieba.analyse\nimport  os, sys\nfrom gensim import corpora, models, similarities\n\ntrain_set = []\n\nwalk = os.walk('./data') #数据放在了data目录，每条反馈数据放在了单独的一个文件中\n\njieba.load_userdict(\"userdict.txt\")\n\nstopwords = [line.strip().decode('utf-8') for line in open('./stopwords.txt')]\nstopwords.append(' ')\n\n\nfor root, dirs, files in walk:\n\tfor name in files:\n\t\tf = open(os.path.join(root, name), 'r')\n\t\traw = f.read()\n\t\tword_list = filter(lambda _: _ not in stopwords, jieba.cut(raw, cut_all = False))\n\t\ttrain_set.append(word_list)\n\nnum = 20  #提取20个主题\n\ndic = corpora.Dictionary(train_set)\ncorpus = [dic.doc2bow(text) for text in train_set]\ntfidf = models.TfidfModel(corpus)\ncorpus_tfidf = tfidf[corpus]\nlda = models.LdaModel(corpus_tfidf, id2word = dic, num_topics = num)\ncorpus_lda = lda[corpus_tfidf]\n\nfor i in range(0, num):\n\tprint lda.print_topic(i)\n\n```\n结果： 提取出来的主题很难解释，效果不怎么好。\n\n----\n\n#### 接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）\n```python\nimport jieba\nimport jieba.analyse\nimport  os, sys\nimport sklearn.feature_extraction\nimport sklearn.naive_bayes as nb\nimport sklearn.externals.joblib as jl\nfrom sklearn import metrics\nimport xlrd\n\nreload(sys)\nsys.setdefaultencoding('utf8') \n\ndef calculate_result(actual,pred):  \n    m_precision = metrics.precision_score(actual,pred);  \n    m_recall = metrics.recall_score(actual,pred);  \n    print 'predict info:'  \n    print 'precision:{0:.3f}'.format(m_precision)  \n    print 'recall:{0:0.3f}'.format(m_recall);  \n    print 'f1-score:{0:.3f}'.format(metrics.f1_score(actual,pred));  \n\n\ntrain_set = []\n\njieba.load_userdict(\"userdict.txt\")\n\nstopwords = [line.strip().decode('utf-8') for line in open('./stopwords.txt')]\nstopwords.append(' ')\n\nkvlist = []\ntargetlist = []\n\ngnb = nb.MultinomialNB(alpha = 0.01)\nfh = sklearn.feature_extraction.FeatureHasher(n_features=15000,non_negative=True,input_type='string')\n\n# get train data, 标记的训练数据，excel中每行一条数据：第一列为需要分类的文本数据，第二行为人工标记的分类\ndata = xlrd.open_workbook('./data/train.csv.xls')\ntable = data.sheets()[0]\nnrows = table.nrows\nncols = table.ncols\n\nfor r in range(1, nrows):\n\tline = table.row_values(r)\n\tif line[1] != '':\n\t\ttargetlist += [int(line[1])]\n\t\twordlist = filter(lambda _: _ not in stopwords, jieba.cut(line[0], cut_all = False))\n\t\tkvlist += [ [ i for i in wordlist ] ]\n\n# get test data，标记的测试数据，格式同训练数据\ntestlist = []\ntesttargetlist = []\ndata = xlrd.open_workbook('./data/test.xls')\ntable = data.sheets()[0]\nnrows = table.nrows\nncols = table.ncols\n\nfor r in range(1, nrows):\n\tline = table.row_values(r)\n\tif line[1] != '':\n\t\ttesttargetlist += [int(line[1])]\n\t\twordlist = filter(lambda _: _ not in stopwords, jieba.cut(line[0], cut_all = False))\n\t\ttestlist += [ [ i for i in wordlist ] ]\n\n#验证模型的准确率，召回率\nprint '*************************\\nNB\\n*************************'  \nX = fh.fit_transform(kvlist)\ntestX = fh.fit_transform(testlist)\n\ngnb.fit(X,targetlist)\nresult = gnb.predict(testX)\n\ncalculate_result(testtargetlist, result)\n\nfrom sklearn.svm import SVC \nprint '*************************\\nSVM\\n*************************'  \nsvclf = SVC(kernel = 'linear')#default with 'rbf'  \nsvclf.fit(X,targetlist)  \npred = svclf.predict(testX);  \ncalculate_result(testtargetlist,pred);\n\n#使用训练出来的SVM模型对原始数据进行预测，原始数据格式为：每条数据单独存放在一个文本文件中\nwalk = os.walk('./data/2016')\nfor root, dirs, files in walk:\n\tfor name in files:\n\t\tf = open(os.path.join(root, name), 'r')\n\t\traw = f.read()\n\t\tword_list = filter(lambda _: _ not in stopwords, jieba.cut(raw, cut_all = False))\n\t\tkvlist = [ [ i for i in word_list ] ]\n\t\tX = fh.fit_transform(kvlist)\n\t\tpred = svclf.predict(X)\n\t\tprint raw\n\t\tprint pred\n```\n结果：SVM的准备率，召回率接近70%，比Naive Bayes稍微好些。\n\n----\n参考文档：\n\n1. [scikit-learn官网文档](http://scikit-learn.org/stable/user_guide.html)\n2. [应用scikit-learn做文本分类](http://blog.csdn.net/abcjennifer/article/details/23615947)\n3. [使用sklearn + jieba中文分词构建文本分类器](http://myg0u.com/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/2015/05/06/use-sklearn-jieba.html)\n","slug":"text-classify","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"photos":[],"link":"","_id":"cl5arauwm001utswrhl96dxg2","content":"<blockquote>\n<p>最近拿到一批用户对产品的反馈数据，需要进行文本分类，找出用户的痛点，从而发掘产品的优化方向。</p>\n</blockquote>\n<h3 id=\"本文主要调研了：\"><a href=\"#本文主要调研了：\" class=\"headerlink\" title=\"本文主要调研了：\"></a>本文主要调研了：</h3><ol>\n<li>LDA主题分类模型（python gensim包）；</li>\n<li>Naive Bayes;</li>\n<li>SVM;</li>\n</ol>\n<h4 id=\"首先调研了LDA主题分类模型，使用python-gensim包，代码如下：\"><a href=\"#首先调研了LDA主题分类模型，使用python-gensim包，代码如下：\" class=\"headerlink\" title=\"首先调研了LDA主题分类模型，使用python gensim包，代码如下：\"></a>首先调研了LDA主题分类模型，使用python gensim包，代码如下：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba<br><span class=\"hljs-keyword\">import</span> jieba.analyse<br><span class=\"hljs-keyword\">import</span>  os, sys<br><span class=\"hljs-keyword\">from</span> gensim <span class=\"hljs-keyword\">import</span> corpora, models, similarities<br><br>train_set = []<br><br>walk = os.walk(<span class=\"hljs-string\">&#x27;./data&#x27;</span>) <span class=\"hljs-comment\">#数据放在了data目录，每条反馈数据放在了单独的一个文件中</span><br><br>jieba.load_userdict(<span class=\"hljs-string\">&quot;userdict.txt&quot;</span>)<br><br>stopwords = [line.strip().decode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;./stopwords.txt&#x27;</span>)]<br>stopwords.append(<span class=\"hljs-string\">&#x27; &#x27;</span>)<br><br><br><span class=\"hljs-keyword\">for</span> root, dirs, files <span class=\"hljs-keyword\">in</span> walk:<br>\t<span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> files:<br>\t\tf = <span class=\"hljs-built_in\">open</span>(os.path.join(root, name), <span class=\"hljs-string\">&#x27;r&#x27;</span>)<br>\t\traw = f.read()<br>\t\tword_list = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(raw, cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\ttrain_set.append(word_list)<br><br>num = <span class=\"hljs-number\">20</span>  <span class=\"hljs-comment\">#提取20个主题</span><br><br>dic = corpora.Dictionary(train_set)<br>corpus = [dic.doc2bow(text) <span class=\"hljs-keyword\">for</span> text <span class=\"hljs-keyword\">in</span> train_set]<br>tfidf = models.TfidfModel(corpus)<br>corpus_tfidf = tfidf[corpus]<br>lda = models.LdaModel(corpus_tfidf, id2word = dic, num_topics = num)<br>corpus_lda = lda[corpus_tfidf]<br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, num):<br>\t<span class=\"hljs-built_in\">print</span> lda.print_topic(i)<br><br></code></pre></td></tr></table></figure>\n<p>结果： 提取出来的主题很难解释，效果不怎么好。</p>\n<hr>\n<h4 id=\"接下来调研了有监督学习-Naive-Bayes和SVM，代码实现如下（使用python-sklearn）\"><a href=\"#接下来调研了有监督学习-Naive-Bayes和SVM，代码实现如下（使用python-sklearn）\" class=\"headerlink\" title=\"接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）\"></a>接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba<br><span class=\"hljs-keyword\">import</span> jieba.analyse<br><span class=\"hljs-keyword\">import</span>  os, sys<br><span class=\"hljs-keyword\">import</span> sklearn.feature_extraction<br><span class=\"hljs-keyword\">import</span> sklearn.naive_bayes <span class=\"hljs-keyword\">as</span> nb<br><span class=\"hljs-keyword\">import</span> sklearn.externals.joblib <span class=\"hljs-keyword\">as</span> jl<br><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> metrics<br><span class=\"hljs-keyword\">import</span> xlrd<br><br>reload(sys)<br>sys.setdefaultencoding(<span class=\"hljs-string\">&#x27;utf8&#x27;</span>) <br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_result</span>(<span class=\"hljs-params\">actual,pred</span>):  <br>    m_precision = metrics.precision_score(actual,pred);  <br>    m_recall = metrics.recall_score(actual,pred);  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;predict info:&#x27;</span>  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;precision:&#123;0:.3f&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(m_precision)  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;recall:&#123;0:0.3f&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(m_recall);  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;f1-score:&#123;0:.3f&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(metrics.f1_score(actual,pred));  <br><br><br>train_set = []<br><br>jieba.load_userdict(<span class=\"hljs-string\">&quot;userdict.txt&quot;</span>)<br><br>stopwords = [line.strip().decode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;./stopwords.txt&#x27;</span>)]<br>stopwords.append(<span class=\"hljs-string\">&#x27; &#x27;</span>)<br><br>kvlist = []<br>targetlist = []<br><br>gnb = nb.MultinomialNB(alpha = <span class=\"hljs-number\">0.01</span>)<br>fh = sklearn.feature_extraction.FeatureHasher(n_features=<span class=\"hljs-number\">15000</span>,non_negative=<span class=\"hljs-literal\">True</span>,input_type=<span class=\"hljs-string\">&#x27;string&#x27;</span>)<br><br><span class=\"hljs-comment\"># get train data, 标记的训练数据，excel中每行一条数据：第一列为需要分类的文本数据，第二行为人工标记的分类</span><br>data = xlrd.open_workbook(<span class=\"hljs-string\">&#x27;./data/train.csv.xls&#x27;</span>)<br>table = data.sheets()[<span class=\"hljs-number\">0</span>]<br>nrows = table.nrows<br>ncols = table.ncols<br><br><span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, nrows):<br>\tline = table.row_values(r)<br>\t<span class=\"hljs-keyword\">if</span> line[<span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&#x27;&#x27;</span>:<br>\t\ttargetlist += [<span class=\"hljs-built_in\">int</span>(line[<span class=\"hljs-number\">1</span>])]<br>\t\twordlist = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(line[<span class=\"hljs-number\">0</span>], cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\tkvlist += [ [ i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> wordlist ] ]<br><br><span class=\"hljs-comment\"># get test data，标记的测试数据，格式同训练数据</span><br>testlist = []<br>testtargetlist = []<br>data = xlrd.open_workbook(<span class=\"hljs-string\">&#x27;./data/test.xls&#x27;</span>)<br>table = data.sheets()[<span class=\"hljs-number\">0</span>]<br>nrows = table.nrows<br>ncols = table.ncols<br><br><span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, nrows):<br>\tline = table.row_values(r)<br>\t<span class=\"hljs-keyword\">if</span> line[<span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&#x27;&#x27;</span>:<br>\t\ttesttargetlist += [<span class=\"hljs-built_in\">int</span>(line[<span class=\"hljs-number\">1</span>])]<br>\t\twordlist = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(line[<span class=\"hljs-number\">0</span>], cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\ttestlist += [ [ i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> wordlist ] ]<br><br><span class=\"hljs-comment\">#验证模型的准确率，召回率</span><br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;*************************\\nNB\\n*************************&#x27;</span>  <br>X = fh.fit_transform(kvlist)<br>testX = fh.fit_transform(testlist)<br><br>gnb.fit(X,targetlist)<br>result = gnb.predict(testX)<br><br>calculate_result(testtargetlist, result)<br><br><span class=\"hljs-keyword\">from</span> sklearn.svm <span class=\"hljs-keyword\">import</span> SVC <br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;*************************\\nSVM\\n*************************&#x27;</span>  <br>svclf = SVC(kernel = <span class=\"hljs-string\">&#x27;linear&#x27;</span>)<span class=\"hljs-comment\">#default with &#x27;rbf&#x27;  </span><br>svclf.fit(X,targetlist)  <br>pred = svclf.predict(testX);  <br>calculate_result(testtargetlist,pred);<br><br><span class=\"hljs-comment\">#使用训练出来的SVM模型对原始数据进行预测，原始数据格式为：每条数据单独存放在一个文本文件中</span><br>walk = os.walk(<span class=\"hljs-string\">&#x27;./data/2016&#x27;</span>)<br><span class=\"hljs-keyword\">for</span> root, dirs, files <span class=\"hljs-keyword\">in</span> walk:<br>\t<span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> files:<br>\t\tf = <span class=\"hljs-built_in\">open</span>(os.path.join(root, name), <span class=\"hljs-string\">&#x27;r&#x27;</span>)<br>\t\traw = f.read()<br>\t\tword_list = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(raw, cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\tkvlist = [ [ i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> word_list ] ]<br>\t\tX = fh.fit_transform(kvlist)<br>\t\tpred = svclf.predict(X)<br>\t\t<span class=\"hljs-built_in\">print</span> raw<br>\t\t<span class=\"hljs-built_in\">print</span> pred<br></code></pre></td></tr></table></figure>\n<p>结果：SVM的准备率，召回率接近70%，比Naive Bayes稍微好些。</p>\n<hr>\n<p>参考文档：</p>\n<ol>\n<li><a href=\"http://scikit-learn.org/stable/user_guide.html\">scikit-learn官网文档</a></li>\n<li><a href=\"http://blog.csdn.net/abcjennifer/article/details/23615947\">应用scikit-learn做文本分类</a></li>\n<li><a href=\"http://myg0u.com/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/2015/05/06/use-sklearn-jieba.html\">使用sklearn + jieba中文分词构建文本分类器</a></li>\n</ol>\n","site":{"data":{}},"wordcount":3810,"excerpt":"","more":"<blockquote>\n<p>最近拿到一批用户对产品的反馈数据，需要进行文本分类，找出用户的痛点，从而发掘产品的优化方向。</p>\n</blockquote>\n<h3 id=\"本文主要调研了：\"><a href=\"#本文主要调研了：\" class=\"headerlink\" title=\"本文主要调研了：\"></a>本文主要调研了：</h3><ol>\n<li>LDA主题分类模型（python gensim包）；</li>\n<li>Naive Bayes;</li>\n<li>SVM;</li>\n</ol>\n<h4 id=\"首先调研了LDA主题分类模型，使用python-gensim包，代码如下：\"><a href=\"#首先调研了LDA主题分类模型，使用python-gensim包，代码如下：\" class=\"headerlink\" title=\"首先调研了LDA主题分类模型，使用python gensim包，代码如下：\"></a>首先调研了LDA主题分类模型，使用python gensim包，代码如下：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba<br><span class=\"hljs-keyword\">import</span> jieba.analyse<br><span class=\"hljs-keyword\">import</span>  os, sys<br><span class=\"hljs-keyword\">from</span> gensim <span class=\"hljs-keyword\">import</span> corpora, models, similarities<br><br>train_set = []<br><br>walk = os.walk(<span class=\"hljs-string\">&#x27;./data&#x27;</span>) <span class=\"hljs-comment\">#数据放在了data目录，每条反馈数据放在了单独的一个文件中</span><br><br>jieba.load_userdict(<span class=\"hljs-string\">&quot;userdict.txt&quot;</span>)<br><br>stopwords = [line.strip().decode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;./stopwords.txt&#x27;</span>)]<br>stopwords.append(<span class=\"hljs-string\">&#x27; &#x27;</span>)<br><br><br><span class=\"hljs-keyword\">for</span> root, dirs, files <span class=\"hljs-keyword\">in</span> walk:<br>\t<span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> files:<br>\t\tf = <span class=\"hljs-built_in\">open</span>(os.path.join(root, name), <span class=\"hljs-string\">&#x27;r&#x27;</span>)<br>\t\traw = f.read()<br>\t\tword_list = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(raw, cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\ttrain_set.append(word_list)<br><br>num = <span class=\"hljs-number\">20</span>  <span class=\"hljs-comment\">#提取20个主题</span><br><br>dic = corpora.Dictionary(train_set)<br>corpus = [dic.doc2bow(text) <span class=\"hljs-keyword\">for</span> text <span class=\"hljs-keyword\">in</span> train_set]<br>tfidf = models.TfidfModel(corpus)<br>corpus_tfidf = tfidf[corpus]<br>lda = models.LdaModel(corpus_tfidf, id2word = dic, num_topics = num)<br>corpus_lda = lda[corpus_tfidf]<br><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, num):<br>\t<span class=\"hljs-built_in\">print</span> lda.print_topic(i)<br><br></code></pre></td></tr></table></figure>\n<p>结果： 提取出来的主题很难解释，效果不怎么好。</p>\n<hr>\n<h4 id=\"接下来调研了有监督学习-Naive-Bayes和SVM，代码实现如下（使用python-sklearn）\"><a href=\"#接下来调研了有监督学习-Naive-Bayes和SVM，代码实现如下（使用python-sklearn）\" class=\"headerlink\" title=\"接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）\"></a>接下来调研了有监督学习,Naive Bayes和SVM，代码实现如下（使用python sklearn）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba<br><span class=\"hljs-keyword\">import</span> jieba.analyse<br><span class=\"hljs-keyword\">import</span>  os, sys<br><span class=\"hljs-keyword\">import</span> sklearn.feature_extraction<br><span class=\"hljs-keyword\">import</span> sklearn.naive_bayes <span class=\"hljs-keyword\">as</span> nb<br><span class=\"hljs-keyword\">import</span> sklearn.externals.joblib <span class=\"hljs-keyword\">as</span> jl<br><span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> metrics<br><span class=\"hljs-keyword\">import</span> xlrd<br><br>reload(sys)<br>sys.setdefaultencoding(<span class=\"hljs-string\">&#x27;utf8&#x27;</span>) <br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_result</span>(<span class=\"hljs-params\">actual,pred</span>):  <br>    m_precision = metrics.precision_score(actual,pred);  <br>    m_recall = metrics.recall_score(actual,pred);  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;predict info:&#x27;</span>  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;precision:&#123;0:.3f&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(m_precision)  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;recall:&#123;0:0.3f&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(m_recall);  <br>    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;f1-score:&#123;0:.3f&#125;&#x27;</span>.<span class=\"hljs-built_in\">format</span>(metrics.f1_score(actual,pred));  <br><br><br>train_set = []<br><br>jieba.load_userdict(<span class=\"hljs-string\">&quot;userdict.txt&quot;</span>)<br><br>stopwords = [line.strip().decode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;./stopwords.txt&#x27;</span>)]<br>stopwords.append(<span class=\"hljs-string\">&#x27; &#x27;</span>)<br><br>kvlist = []<br>targetlist = []<br><br>gnb = nb.MultinomialNB(alpha = <span class=\"hljs-number\">0.01</span>)<br>fh = sklearn.feature_extraction.FeatureHasher(n_features=<span class=\"hljs-number\">15000</span>,non_negative=<span class=\"hljs-literal\">True</span>,input_type=<span class=\"hljs-string\">&#x27;string&#x27;</span>)<br><br><span class=\"hljs-comment\"># get train data, 标记的训练数据，excel中每行一条数据：第一列为需要分类的文本数据，第二行为人工标记的分类</span><br>data = xlrd.open_workbook(<span class=\"hljs-string\">&#x27;./data/train.csv.xls&#x27;</span>)<br>table = data.sheets()[<span class=\"hljs-number\">0</span>]<br>nrows = table.nrows<br>ncols = table.ncols<br><br><span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, nrows):<br>\tline = table.row_values(r)<br>\t<span class=\"hljs-keyword\">if</span> line[<span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&#x27;&#x27;</span>:<br>\t\ttargetlist += [<span class=\"hljs-built_in\">int</span>(line[<span class=\"hljs-number\">1</span>])]<br>\t\twordlist = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(line[<span class=\"hljs-number\">0</span>], cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\tkvlist += [ [ i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> wordlist ] ]<br><br><span class=\"hljs-comment\"># get test data，标记的测试数据，格式同训练数据</span><br>testlist = []<br>testtargetlist = []<br>data = xlrd.open_workbook(<span class=\"hljs-string\">&#x27;./data/test.xls&#x27;</span>)<br>table = data.sheets()[<span class=\"hljs-number\">0</span>]<br>nrows = table.nrows<br>ncols = table.ncols<br><br><span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, nrows):<br>\tline = table.row_values(r)<br>\t<span class=\"hljs-keyword\">if</span> line[<span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&#x27;&#x27;</span>:<br>\t\ttesttargetlist += [<span class=\"hljs-built_in\">int</span>(line[<span class=\"hljs-number\">1</span>])]<br>\t\twordlist = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(line[<span class=\"hljs-number\">0</span>], cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\ttestlist += [ [ i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> wordlist ] ]<br><br><span class=\"hljs-comment\">#验证模型的准确率，召回率</span><br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;*************************\\nNB\\n*************************&#x27;</span>  <br>X = fh.fit_transform(kvlist)<br>testX = fh.fit_transform(testlist)<br><br>gnb.fit(X,targetlist)<br>result = gnb.predict(testX)<br><br>calculate_result(testtargetlist, result)<br><br><span class=\"hljs-keyword\">from</span> sklearn.svm <span class=\"hljs-keyword\">import</span> SVC <br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;*************************\\nSVM\\n*************************&#x27;</span>  <br>svclf = SVC(kernel = <span class=\"hljs-string\">&#x27;linear&#x27;</span>)<span class=\"hljs-comment\">#default with &#x27;rbf&#x27;  </span><br>svclf.fit(X,targetlist)  <br>pred = svclf.predict(testX);  <br>calculate_result(testtargetlist,pred);<br><br><span class=\"hljs-comment\">#使用训练出来的SVM模型对原始数据进行预测，原始数据格式为：每条数据单独存放在一个文本文件中</span><br>walk = os.walk(<span class=\"hljs-string\">&#x27;./data/2016&#x27;</span>)<br><span class=\"hljs-keyword\">for</span> root, dirs, files <span class=\"hljs-keyword\">in</span> walk:<br>\t<span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> files:<br>\t\tf = <span class=\"hljs-built_in\">open</span>(os.path.join(root, name), <span class=\"hljs-string\">&#x27;r&#x27;</span>)<br>\t\traw = f.read()<br>\t\tword_list = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> _: _ <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stopwords, jieba.cut(raw, cut_all = <span class=\"hljs-literal\">False</span>))<br>\t\tkvlist = [ [ i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> word_list ] ]<br>\t\tX = fh.fit_transform(kvlist)<br>\t\tpred = svclf.predict(X)<br>\t\t<span class=\"hljs-built_in\">print</span> raw<br>\t\t<span class=\"hljs-built_in\">print</span> pred<br></code></pre></td></tr></table></figure>\n<p>结果：SVM的准备率，召回率接近70%，比Naive Bayes稍微好些。</p>\n<hr>\n<p>参考文档：</p>\n<ol>\n<li><a href=\"http://scikit-learn.org/stable/user_guide.html\">scikit-learn官网文档</a></li>\n<li><a href=\"http://blog.csdn.net/abcjennifer/article/details/23615947\">应用scikit-learn做文本分类</a></li>\n<li><a href=\"http://myg0u.com/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/2015/05/06/use-sklearn-jieba.html\">使用sklearn + jieba中文分词构建文本分类器</a></li>\n</ol>\n"},{"layout":"post","title":"spring boot mybatis","date":"2017-05-08T03:50:23.000Z","_content":"\n>本文介绍如何整合spring boot与Mybatis\n\n# Spring Boot\n运行起spring boot比较容易，要注意的是入口类要放到所有其他类的父目录。\n\n# 整合Mybatis\n- [官方文档](http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/)\n- [github例子](https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples/mybatis-spring-boot-sample-xml)\n\n# 打成war包，供部署到独立的tomcat\nspring boot默认是打成一个集成tomcat的jar包，spring boot同样提供了打包war的方式。\n## 修改打包方式\n```xml\npom.xml中修改打包方式\n<packaging>war</packaging>\n```\n## 移除嵌入式tomcat依赖\n```xml\npom.xml dependencies下添加\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-tomcat</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n## 修改入口类-继承SpringBootServletInitializer并重写configure方法\n```java\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n}\n```\n至此，可以通过mvn clean package导出war包。同样，也可以使用嵌入式tomcat进行调试。\n\n# 碰到的问题\n## 找不到主程序\nclass文件未生成，重新编译即可\n## archive for required library tomcat-embed cannot be read\n原因是Jar包损坏，将.m2下的相应目录删除，重新下载即解决。\n","source":"_posts/spring_boot_mybatis.md","raw":"---\nlayout: post\ntitle:  \"spring boot mybatis\"\ndate:   2017-05-08 11:50:23 +0800\ncategories: [JAVA]\ntags: [springboot,mybatis]\n---\n\n>本文介绍如何整合spring boot与Mybatis\n\n# Spring Boot\n运行起spring boot比较容易，要注意的是入口类要放到所有其他类的父目录。\n\n# 整合Mybatis\n- [官方文档](http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/)\n- [github例子](https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples/mybatis-spring-boot-sample-xml)\n\n# 打成war包，供部署到独立的tomcat\nspring boot默认是打成一个集成tomcat的jar包，spring boot同样提供了打包war的方式。\n## 修改打包方式\n```xml\npom.xml中修改打包方式\n<packaging>war</packaging>\n```\n## 移除嵌入式tomcat依赖\n```xml\npom.xml dependencies下添加\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-tomcat</artifactId>\n    <scope>provided</scope>\n</dependency>\n```\n## 修改入口类-继承SpringBootServletInitializer并重写configure方法\n```java\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n}\n```\n至此，可以通过mvn clean package导出war包。同样，也可以使用嵌入式tomcat进行调试。\n\n# 碰到的问题\n## 找不到主程序\nclass文件未生成，重新编译即可\n## archive for required library tomcat-embed cannot be read\n原因是Jar包损坏，将.m2下的相应目录删除，重新下载即解决。\n","slug":"spring_boot_mybatis","published":1,"updated":"2022-07-07T06:47:29.840Z","comments":1,"photos":[],"link":"","_id":"cl5arauwm001ytswrhr0narfw","content":"<blockquote>\n<p>本文介绍如何整合spring boot与Mybatis</p>\n</blockquote>\n<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><p>运行起spring boot比较容易，要注意的是入口类要放到所有其他类的父目录。</p>\n<h1 id=\"整合Mybatis\"><a href=\"#整合Mybatis\" class=\"headerlink\" title=\"整合Mybatis\"></a>整合Mybatis</h1><ul>\n<li><a href=\"http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\">官方文档</a></li>\n<li><a href=\"https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples/mybatis-spring-boot-sample-xml\">github例子</a></li>\n</ul>\n<h1 id=\"打成war包，供部署到独立的tomcat\"><a href=\"#打成war包，供部署到独立的tomcat\" class=\"headerlink\" title=\"打成war包，供部署到独立的tomcat\"></a>打成war包，供部署到独立的tomcat</h1><p>spring boot默认是打成一个集成tomcat的jar包，spring boot同样提供了打包war的方式。</p>\n<h2 id=\"修改打包方式\"><a href=\"#修改打包方式\" class=\"headerlink\" title=\"修改打包方式\"></a>修改打包方式</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">pom.xml中修改打包方式<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>war<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"移除嵌入式tomcat依赖\"><a href=\"#移除嵌入式tomcat依赖\" class=\"headerlink\" title=\"移除嵌入式tomcat依赖\"></a>移除嵌入式tomcat依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">pom.xml dependencies下添加<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>provided<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"修改入口类-继承SpringBootServletInitializer并重写configure方法\"><a href=\"#修改入口类-继承SpringBootServletInitializer并重写configure方法\" class=\"headerlink\" title=\"修改入口类-继承SpringBootServletInitializer并重写configure方法\"></a>修改入口类-继承SpringBootServletInitializer并重写configure方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Application</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SpringBootServletInitializer</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> SpringApplicationBuilder <span class=\"hljs-title function_\">configure</span><span class=\"hljs-params\">(SpringApplicationBuilder application)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> application.sources(Application.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>至此，可以通过mvn clean package导出war包。同样，也可以使用嵌入式tomcat进行调试。</p>\n<h1 id=\"碰到的问题\"><a href=\"#碰到的问题\" class=\"headerlink\" title=\"碰到的问题\"></a>碰到的问题</h1><h2 id=\"找不到主程序\"><a href=\"#找不到主程序\" class=\"headerlink\" title=\"找不到主程序\"></a>找不到主程序</h2><p>class文件未生成，重新编译即可</p>\n<h2 id=\"archive-for-required-library-tomcat-embed-cannot-be-read\"><a href=\"#archive-for-required-library-tomcat-embed-cannot-be-read\" class=\"headerlink\" title=\"archive for required library tomcat-embed cannot be read\"></a>archive for required library tomcat-embed cannot be read</h2><p>原因是Jar包损坏，将.m2下的相应目录删除，重新下载即解决。</p>\n","site":{"data":{}},"wordcount":1014,"excerpt":"","more":"<blockquote>\n<p>本文介绍如何整合spring boot与Mybatis</p>\n</blockquote>\n<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><p>运行起spring boot比较容易，要注意的是入口类要放到所有其他类的父目录。</p>\n<h1 id=\"整合Mybatis\"><a href=\"#整合Mybatis\" class=\"headerlink\" title=\"整合Mybatis\"></a>整合Mybatis</h1><ul>\n<li><a href=\"http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\">官方文档</a></li>\n<li><a href=\"https://github.com/mybatis/spring-boot-starter/tree/master/mybatis-spring-boot-samples/mybatis-spring-boot-sample-xml\">github例子</a></li>\n</ul>\n<h1 id=\"打成war包，供部署到独立的tomcat\"><a href=\"#打成war包，供部署到独立的tomcat\" class=\"headerlink\" title=\"打成war包，供部署到独立的tomcat\"></a>打成war包，供部署到独立的tomcat</h1><p>spring boot默认是打成一个集成tomcat的jar包，spring boot同样提供了打包war的方式。</p>\n<h2 id=\"修改打包方式\"><a href=\"#修改打包方式\" class=\"headerlink\" title=\"修改打包方式\"></a>修改打包方式</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">pom.xml中修改打包方式<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>war<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"移除嵌入式tomcat依赖\"><a href=\"#移除嵌入式tomcat依赖\" class=\"headerlink\" title=\"移除嵌入式tomcat依赖\"></a>移除嵌入式tomcat依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">pom.xml dependencies下添加<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>provided<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"修改入口类-继承SpringBootServletInitializer并重写configure方法\"><a href=\"#修改入口类-继承SpringBootServletInitializer并重写configure方法\" class=\"headerlink\" title=\"修改入口类-继承SpringBootServletInitializer并重写configure方法\"></a>修改入口类-继承SpringBootServletInitializer并重写configure方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Application</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SpringBootServletInitializer</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> SpringApplicationBuilder <span class=\"hljs-title function_\">configure</span><span class=\"hljs-params\">(SpringApplicationBuilder application)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> application.sources(Application.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>至此，可以通过mvn clean package导出war包。同样，也可以使用嵌入式tomcat进行调试。</p>\n<h1 id=\"碰到的问题\"><a href=\"#碰到的问题\" class=\"headerlink\" title=\"碰到的问题\"></a>碰到的问题</h1><h2 id=\"找不到主程序\"><a href=\"#找不到主程序\" class=\"headerlink\" title=\"找不到主程序\"></a>找不到主程序</h2><p>class文件未生成，重新编译即可</p>\n<h2 id=\"archive-for-required-library-tomcat-embed-cannot-be-read\"><a href=\"#archive-for-required-library-tomcat-embed-cannot-be-read\" class=\"headerlink\" title=\"archive for required library tomcat-embed cannot be read\"></a>archive for required library tomcat-embed cannot be read</h2><p>原因是Jar包损坏，将.m2下的相应目录删除，重新下载即解决。</p>\n"},{"title":"常见的安全漏洞简介","date":"2016-08-22T12:07:07.000Z","_content":"# 安全漏洞分类\n作用于服务端的漏洞，作用于客户端的漏洞\n\n# 常见的服务端漏洞\n## 不好的设计\n```php\n基于机制不可知来隐藏敏感信息是不安全的\n\n<?php\n// 用可预测的COOKIE值判断管理员\nif ('admin' == $_COOKIE['role']) {\n    echo 'Welcom, admin';\n    echo 'You can do whatever you want';\n}\n\n// 基于MD5生成TOKEN\n$name = $_POST['name'];\n$passwd = $_POST['passwd'];\n\n// hello hacker, we use double md5, crack it if you can\n// http://www.cmd5.com/\n$passwd = md5(md5($passwd));\n\nregister($name, $passwd);\n```\n## 非法文件上传  \n### 形成漏洞的前提：  \n\n- 上传的文件能够被Web容器解释执行。所以文件上传后所在的目录要是Web容器所覆盖到的路径。\n- 用户能够从Web上访问这个文件。如果文件上传了，但用户无法通过Web访问，或者无法得到Web容器解释这个脚本，那么也不能称之为漏洞。  \n\n### 错误的做法：  \n- 对于上传的文件不做限制   \n- 允许上传的文件改名，对改的名字不做限制  \n\n### 正确的做法：\n- 白名单限制上传文件的类型  \n- 抛弃原始文件名，按规则生成新的文件名\n- 只提供上传功能：不要允许改名\n- 上传的文件单独存放，取消执行权限\n\n## sql注入\n就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。\n\n```php\n// http://10.94.43.36:8112/sqlinject.php?username=&password=%27%20or%20%27%27=%27\n\n<?php\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$conn = mysql_connect('127.0.0.1', 'root', '') or die(\"connect failed\". mysql_error());\nmysql_select_db('user', $conn);\n\n$sql = \"select name,password from student where \n    name='$username' and password='$password'\";\n\n$ret = mysql_query($sql, $conn);\n\n$result = [];\nwhile ($row = mysql_fetch_array($ret)) {\n    $result[] = $row;\n}\n\n$data = [\n   'sql' => $sql,\n   'data' => $result,\n];\n\nexit(json_encode($data));\n```\n## 命令执行\n不可信的用户输入跨越边界进入SHELL\n\n```php\n// http://10.94.43.36:8112/rce.php?cmd=whoami\n// system函数\n$cmd = $_GET['system'];\n\nif (!empty($cmd)) {\n    system($cmd);\n}\n\n// http://10.94.43.36:8112/rce.php?eval=echo%20%27helloword%27;\n// eval函数: eval() 函数把字符串按照 PHP 代码来计算。\n\n$cmd = $_GET['eval'];\n\nif (!empty($cmd)) {\n    eval($cmd);\n}\n\n```\n\n## 内网代理 \n不可信的用户输入跨越边界进入网络访问或文件系统\n\n## 信息泄露\n报错信息（sql, stacktrace）  \n物理路径泄露\n用户信息泄露\n\n本身不会带来很严重问题，但是可能会帮助黑客更快的攻克你的系统\n\n# 常见的客户端漏洞\n## xss\n什么是XSS？跨站脚本攻击(Cross Site Scripting)\n反射型\n持久型\nDOM型\n\n```php\n// http://cp01-rdqa-dev094.cp01.baidu.com:8112/xsstest.php?username=%3Cscript%3Ealert(document.cookie)%3C/script%3E  \n\nheader('X-XSS-Protection:0');\nheader('Content-Security-Policy:0');\n\n$username = $_GET['username'];\n\necho 'Welcom ' . $username;\n```\n## csrf\nCSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。\n\n```php\n// http://cp01-rdqa-dev094.cp01.baidu.com:8112/csrftest.php\n\nheader('X-XSS-Protection:0');\nheader('Content-Security-Policy:0');\n\n$username = $_GET['username'];\n\n$test = '<img src=\"https://passport.baidu.com/passport/?logout\"/>';\n\necho $test;\n```\n\n## Json Hijack\n","source":"_posts/web-safe.md","raw":"---\ntitle: 常见的安全漏洞简介\ndate: 2016-08-22 20:07:07\ncategories: [Web]\ntags: [网络安全]\n---\n# 安全漏洞分类\n作用于服务端的漏洞，作用于客户端的漏洞\n\n# 常见的服务端漏洞\n## 不好的设计\n```php\n基于机制不可知来隐藏敏感信息是不安全的\n\n<?php\n// 用可预测的COOKIE值判断管理员\nif ('admin' == $_COOKIE['role']) {\n    echo 'Welcom, admin';\n    echo 'You can do whatever you want';\n}\n\n// 基于MD5生成TOKEN\n$name = $_POST['name'];\n$passwd = $_POST['passwd'];\n\n// hello hacker, we use double md5, crack it if you can\n// http://www.cmd5.com/\n$passwd = md5(md5($passwd));\n\nregister($name, $passwd);\n```\n## 非法文件上传  \n### 形成漏洞的前提：  \n\n- 上传的文件能够被Web容器解释执行。所以文件上传后所在的目录要是Web容器所覆盖到的路径。\n- 用户能够从Web上访问这个文件。如果文件上传了，但用户无法通过Web访问，或者无法得到Web容器解释这个脚本，那么也不能称之为漏洞。  \n\n### 错误的做法：  \n- 对于上传的文件不做限制   \n- 允许上传的文件改名，对改的名字不做限制  \n\n### 正确的做法：\n- 白名单限制上传文件的类型  \n- 抛弃原始文件名，按规则生成新的文件名\n- 只提供上传功能：不要允许改名\n- 上传的文件单独存放，取消执行权限\n\n## sql注入\n就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。\n\n```php\n// http://10.94.43.36:8112/sqlinject.php?username=&password=%27%20or%20%27%27=%27\n\n<?php\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$conn = mysql_connect('127.0.0.1', 'root', '') or die(\"connect failed\". mysql_error());\nmysql_select_db('user', $conn);\n\n$sql = \"select name,password from student where \n    name='$username' and password='$password'\";\n\n$ret = mysql_query($sql, $conn);\n\n$result = [];\nwhile ($row = mysql_fetch_array($ret)) {\n    $result[] = $row;\n}\n\n$data = [\n   'sql' => $sql,\n   'data' => $result,\n];\n\nexit(json_encode($data));\n```\n## 命令执行\n不可信的用户输入跨越边界进入SHELL\n\n```php\n// http://10.94.43.36:8112/rce.php?cmd=whoami\n// system函数\n$cmd = $_GET['system'];\n\nif (!empty($cmd)) {\n    system($cmd);\n}\n\n// http://10.94.43.36:8112/rce.php?eval=echo%20%27helloword%27;\n// eval函数: eval() 函数把字符串按照 PHP 代码来计算。\n\n$cmd = $_GET['eval'];\n\nif (!empty($cmd)) {\n    eval($cmd);\n}\n\n```\n\n## 内网代理 \n不可信的用户输入跨越边界进入网络访问或文件系统\n\n## 信息泄露\n报错信息（sql, stacktrace）  \n物理路径泄露\n用户信息泄露\n\n本身不会带来很严重问题，但是可能会帮助黑客更快的攻克你的系统\n\n# 常见的客户端漏洞\n## xss\n什么是XSS？跨站脚本攻击(Cross Site Scripting)\n反射型\n持久型\nDOM型\n\n```php\n// http://cp01-rdqa-dev094.cp01.baidu.com:8112/xsstest.php?username=%3Cscript%3Ealert(document.cookie)%3C/script%3E  \n\nheader('X-XSS-Protection:0');\nheader('Content-Security-Policy:0');\n\n$username = $_GET['username'];\n\necho 'Welcom ' . $username;\n```\n## csrf\nCSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。\n\n```php\n// http://cp01-rdqa-dev094.cp01.baidu.com:8112/csrftest.php\n\nheader('X-XSS-Protection:0');\nheader('Content-Security-Policy:0');\n\n$username = $_GET['username'];\n\n$test = '<img src=\"https://passport.baidu.com/passport/?logout\"/>';\n\necho $test;\n```\n\n## Json Hijack\n","slug":"web-safe","published":1,"updated":"2022-07-07T06:47:29.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5arauwn0021tswr6pap1bv9","content":"<h1 id=\"安全漏洞分类\"><a href=\"#安全漏洞分类\" class=\"headerlink\" title=\"安全漏洞分类\"></a>安全漏洞分类</h1><p>作用于服务端的漏洞，作用于客户端的漏洞</p>\n<h1 id=\"常见的服务端漏洞\"><a href=\"#常见的服务端漏洞\" class=\"headerlink\" title=\"常见的服务端漏洞\"></a>常见的服务端漏洞</h1><h2 id=\"不好的设计\"><a href=\"#不好的设计\" class=\"headerlink\" title=\"不好的设计\"></a>不好的设计</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\">基于机制不可知来隐藏敏感信息是不安全的<br><br><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-comment\">// 用可预测的COOKIE值判断管理员</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&#x27;admin&#x27;</span> == <span class=\"hljs-variable\">$_COOKIE</span>[<span class=\"hljs-string\">&#x27;role&#x27;</span>]) &#123;<br>    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&#x27;Welcom, admin&#x27;</span>;<br>    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&#x27;You can do whatever you want&#x27;</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 基于MD5生成TOKEN</span><br><span class=\"hljs-variable\">$name</span> = <span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;name&#x27;</span>];<br><span class=\"hljs-variable\">$passwd</span> = <span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;passwd&#x27;</span>];<br><br><span class=\"hljs-comment\">// hello hacker, we use double md5, crack it if you can</span><br><span class=\"hljs-comment\">// http://www.cmd5.com/</span><br><span class=\"hljs-variable\">$passwd</span> = <span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-variable\">$passwd</span>));<br><br><span class=\"hljs-title function_ invoke__\">register</span>(<span class=\"hljs-variable\">$name</span>, <span class=\"hljs-variable\">$passwd</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"非法文件上传\"><a href=\"#非法文件上传\" class=\"headerlink\" title=\"非法文件上传\"></a>非法文件上传</h2><h3 id=\"形成漏洞的前提：\"><a href=\"#形成漏洞的前提：\" class=\"headerlink\" title=\"形成漏洞的前提：\"></a>形成漏洞的前提：</h3><ul>\n<li>上传的文件能够被Web容器解释执行。所以文件上传后所在的目录要是Web容器所覆盖到的路径。</li>\n<li>用户能够从Web上访问这个文件。如果文件上传了，但用户无法通过Web访问，或者无法得到Web容器解释这个脚本，那么也不能称之为漏洞。</li>\n</ul>\n<h3 id=\"错误的做法：\"><a href=\"#错误的做法：\" class=\"headerlink\" title=\"错误的做法：\"></a>错误的做法：</h3><ul>\n<li>对于上传的文件不做限制   </li>\n<li>允许上传的文件改名，对改的名字不做限制</li>\n</ul>\n<h3 id=\"正确的做法：\"><a href=\"#正确的做法：\" class=\"headerlink\" title=\"正确的做法：\"></a>正确的做法：</h3><ul>\n<li>白名单限制上传文件的类型  </li>\n<li>抛弃原始文件名，按规则生成新的文件名</li>\n<li>只提供上传功能：不要允许改名</li>\n<li>上传的文件单独存放，取消执行权限</li>\n</ul>\n<h2 id=\"sql注入\"><a href=\"#sql注入\" class=\"headerlink\" title=\"sql注入\"></a>sql注入</h2><p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://10.94.43.36:8112/sqlinject.php?username=&amp;password=%27%20or%20%27%27=%27</span><br><br><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$username</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;username&#x27;</span>];<br><span class=\"hljs-variable\">$password</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;password&#x27;</span>];<br><br><span class=\"hljs-variable\">$conn</span> = <span class=\"hljs-title function_ invoke__\">mysql_connect</span>(<span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"hljs-string\">&#x27;root&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">&quot;connect failed&quot;</span>. <span class=\"hljs-title function_ invoke__\">mysql_error</span>());<br><span class=\"hljs-title function_ invoke__\">mysql_select_db</span>(<span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-variable\">$conn</span>);<br><br><span class=\"hljs-variable\">$sql</span> = <span class=\"hljs-string\">&quot;select name,password from student where </span><br><span class=\"hljs-string\">    name=&#x27;<span class=\"hljs-subst\">$username</span>&#x27; and password=&#x27;<span class=\"hljs-subst\">$password</span>&#x27;&quot;</span>;<br><br><span class=\"hljs-variable\">$ret</span> = <span class=\"hljs-title function_ invoke__\">mysql_query</span>(<span class=\"hljs-variable\">$sql</span>, <span class=\"hljs-variable\">$conn</span>);<br><br><span class=\"hljs-variable\">$result</span> = [];<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$row</span> = <span class=\"hljs-title function_ invoke__\">mysql_fetch_array</span>(<span class=\"hljs-variable\">$ret</span>)) &#123;<br>    <span class=\"hljs-variable\">$result</span>[] = <span class=\"hljs-variable\">$row</span>;<br>&#125;<br><br><span class=\"hljs-variable\">$data</span> = [<br>   <span class=\"hljs-string\">&#x27;sql&#x27;</span> =&gt; <span class=\"hljs-variable\">$sql</span>,<br>   <span class=\"hljs-string\">&#x27;data&#x27;</span> =&gt; <span class=\"hljs-variable\">$result</span>,<br>];<br><br><span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-title function_ invoke__\">json_encode</span>(<span class=\"hljs-variable\">$data</span>));<br></code></pre></td></tr></table></figure>\n<h2 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h2><p>不可信的用户输入跨越边界进入SHELL</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://10.94.43.36:8112/rce.php?cmd=whoami</span><br><span class=\"hljs-comment\">// system函数</span><br><span class=\"hljs-variable\">$cmd</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;system&#x27;</span>];<br><br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$cmd</span>)) &#123;<br>    <span class=\"hljs-title function_ invoke__\">system</span>(<span class=\"hljs-variable\">$cmd</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// http://10.94.43.36:8112/rce.php?eval=echo%20%27helloword%27;</span><br><span class=\"hljs-comment\">// eval函数: eval() 函数把字符串按照 PHP 代码来计算。</span><br><br><span class=\"hljs-variable\">$cmd</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;eval&#x27;</span>];<br><br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$cmd</span>)) &#123;<br>    <span class=\"hljs-keyword\">eval</span>(<span class=\"hljs-variable\">$cmd</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"内网代理\"><a href=\"#内网代理\" class=\"headerlink\" title=\"内网代理\"></a>内网代理</h2><p>不可信的用户输入跨越边界进入网络访问或文件系统</p>\n<h2 id=\"信息泄露\"><a href=\"#信息泄露\" class=\"headerlink\" title=\"信息泄露\"></a>信息泄露</h2><p>报错信息（sql, stacktrace）<br>物理路径泄露<br>用户信息泄露</p>\n<p>本身不会带来很严重问题，但是可能会帮助黑客更快的攻克你的系统</p>\n<h1 id=\"常见的客户端漏洞\"><a href=\"#常见的客户端漏洞\" class=\"headerlink\" title=\"常见的客户端漏洞\"></a>常见的客户端漏洞</h1><h2 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h2><p>什么是XSS？跨站脚本攻击(Cross Site Scripting)<br>反射型<br>持久型<br>DOM型</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://cp01-rdqa-dev094.cp01.baidu.com:8112/xsstest.php?username=%3Cscript%3Ealert(document.cookie)%3C/script%3E  </span><br><br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;X-XSS-Protection:0&#x27;</span>);<br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;Content-Security-Policy:0&#x27;</span>);<br><br><span class=\"hljs-variable\">$username</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;username&#x27;</span>];<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&#x27;Welcom &#x27;</span> . <span class=\"hljs-variable\">$username</span>;<br></code></pre></td></tr></table></figure>\n<h2 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h2><p>CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://cp01-rdqa-dev094.cp01.baidu.com:8112/csrftest.php</span><br><br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;X-XSS-Protection:0&#x27;</span>);<br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;Content-Security-Policy:0&#x27;</span>);<br><br><span class=\"hljs-variable\">$username</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;username&#x27;</span>];<br><br><span class=\"hljs-variable\">$test</span> = <span class=\"hljs-string\">&#x27;&lt;img src=&quot;https://passport.baidu.com/passport/?logout&quot;/&gt;&#x27;</span>;<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$test</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Json-Hijack\"><a href=\"#Json-Hijack\" class=\"headerlink\" title=\"Json Hijack\"></a>Json Hijack</h2>","site":{"data":{}},"wordcount":2705,"excerpt":"","more":"<h1 id=\"安全漏洞分类\"><a href=\"#安全漏洞分类\" class=\"headerlink\" title=\"安全漏洞分类\"></a>安全漏洞分类</h1><p>作用于服务端的漏洞，作用于客户端的漏洞</p>\n<h1 id=\"常见的服务端漏洞\"><a href=\"#常见的服务端漏洞\" class=\"headerlink\" title=\"常见的服务端漏洞\"></a>常见的服务端漏洞</h1><h2 id=\"不好的设计\"><a href=\"#不好的设计\" class=\"headerlink\" title=\"不好的设计\"></a>不好的设计</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\">基于机制不可知来隐藏敏感信息是不安全的<br><br><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-comment\">// 用可预测的COOKIE值判断管理员</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&#x27;admin&#x27;</span> == <span class=\"hljs-variable\">$_COOKIE</span>[<span class=\"hljs-string\">&#x27;role&#x27;</span>]) &#123;<br>    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&#x27;Welcom, admin&#x27;</span>;<br>    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&#x27;You can do whatever you want&#x27;</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 基于MD5生成TOKEN</span><br><span class=\"hljs-variable\">$name</span> = <span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;name&#x27;</span>];<br><span class=\"hljs-variable\">$passwd</span> = <span class=\"hljs-variable\">$_POST</span>[<span class=\"hljs-string\">&#x27;passwd&#x27;</span>];<br><br><span class=\"hljs-comment\">// hello hacker, we use double md5, crack it if you can</span><br><span class=\"hljs-comment\">// http://www.cmd5.com/</span><br><span class=\"hljs-variable\">$passwd</span> = <span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-variable\">$passwd</span>));<br><br><span class=\"hljs-title function_ invoke__\">register</span>(<span class=\"hljs-variable\">$name</span>, <span class=\"hljs-variable\">$passwd</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"非法文件上传\"><a href=\"#非法文件上传\" class=\"headerlink\" title=\"非法文件上传\"></a>非法文件上传</h2><h3 id=\"形成漏洞的前提：\"><a href=\"#形成漏洞的前提：\" class=\"headerlink\" title=\"形成漏洞的前提：\"></a>形成漏洞的前提：</h3><ul>\n<li>上传的文件能够被Web容器解释执行。所以文件上传后所在的目录要是Web容器所覆盖到的路径。</li>\n<li>用户能够从Web上访问这个文件。如果文件上传了，但用户无法通过Web访问，或者无法得到Web容器解释这个脚本，那么也不能称之为漏洞。</li>\n</ul>\n<h3 id=\"错误的做法：\"><a href=\"#错误的做法：\" class=\"headerlink\" title=\"错误的做法：\"></a>错误的做法：</h3><ul>\n<li>对于上传的文件不做限制   </li>\n<li>允许上传的文件改名，对改的名字不做限制</li>\n</ul>\n<h3 id=\"正确的做法：\"><a href=\"#正确的做法：\" class=\"headerlink\" title=\"正确的做法：\"></a>正确的做法：</h3><ul>\n<li>白名单限制上传文件的类型  </li>\n<li>抛弃原始文件名，按规则生成新的文件名</li>\n<li>只提供上传功能：不要允许改名</li>\n<li>上传的文件单独存放，取消执行权限</li>\n</ul>\n<h2 id=\"sql注入\"><a href=\"#sql注入\" class=\"headerlink\" title=\"sql注入\"></a>sql注入</h2><p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://10.94.43.36:8112/sqlinject.php?username=&amp;password=%27%20or%20%27%27=%27</span><br><br><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$username</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;username&#x27;</span>];<br><span class=\"hljs-variable\">$password</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;password&#x27;</span>];<br><br><span class=\"hljs-variable\">$conn</span> = <span class=\"hljs-title function_ invoke__\">mysql_connect</span>(<span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"hljs-string\">&#x27;root&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">&quot;connect failed&quot;</span>. <span class=\"hljs-title function_ invoke__\">mysql_error</span>());<br><span class=\"hljs-title function_ invoke__\">mysql_select_db</span>(<span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-variable\">$conn</span>);<br><br><span class=\"hljs-variable\">$sql</span> = <span class=\"hljs-string\">&quot;select name,password from student where </span><br><span class=\"hljs-string\">    name=&#x27;<span class=\"hljs-subst\">$username</span>&#x27; and password=&#x27;<span class=\"hljs-subst\">$password</span>&#x27;&quot;</span>;<br><br><span class=\"hljs-variable\">$ret</span> = <span class=\"hljs-title function_ invoke__\">mysql_query</span>(<span class=\"hljs-variable\">$sql</span>, <span class=\"hljs-variable\">$conn</span>);<br><br><span class=\"hljs-variable\">$result</span> = [];<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$row</span> = <span class=\"hljs-title function_ invoke__\">mysql_fetch_array</span>(<span class=\"hljs-variable\">$ret</span>)) &#123;<br>    <span class=\"hljs-variable\">$result</span>[] = <span class=\"hljs-variable\">$row</span>;<br>&#125;<br><br><span class=\"hljs-variable\">$data</span> = [<br>   <span class=\"hljs-string\">&#x27;sql&#x27;</span> =&gt; <span class=\"hljs-variable\">$sql</span>,<br>   <span class=\"hljs-string\">&#x27;data&#x27;</span> =&gt; <span class=\"hljs-variable\">$result</span>,<br>];<br><br><span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-title function_ invoke__\">json_encode</span>(<span class=\"hljs-variable\">$data</span>));<br></code></pre></td></tr></table></figure>\n<h2 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h2><p>不可信的用户输入跨越边界进入SHELL</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://10.94.43.36:8112/rce.php?cmd=whoami</span><br><span class=\"hljs-comment\">// system函数</span><br><span class=\"hljs-variable\">$cmd</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;system&#x27;</span>];<br><br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$cmd</span>)) &#123;<br>    <span class=\"hljs-title function_ invoke__\">system</span>(<span class=\"hljs-variable\">$cmd</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// http://10.94.43.36:8112/rce.php?eval=echo%20%27helloword%27;</span><br><span class=\"hljs-comment\">// eval函数: eval() 函数把字符串按照 PHP 代码来计算。</span><br><br><span class=\"hljs-variable\">$cmd</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;eval&#x27;</span>];<br><br><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$cmd</span>)) &#123;<br>    <span class=\"hljs-keyword\">eval</span>(<span class=\"hljs-variable\">$cmd</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"内网代理\"><a href=\"#内网代理\" class=\"headerlink\" title=\"内网代理\"></a>内网代理</h2><p>不可信的用户输入跨越边界进入网络访问或文件系统</p>\n<h2 id=\"信息泄露\"><a href=\"#信息泄露\" class=\"headerlink\" title=\"信息泄露\"></a>信息泄露</h2><p>报错信息（sql, stacktrace）<br>物理路径泄露<br>用户信息泄露</p>\n<p>本身不会带来很严重问题，但是可能会帮助黑客更快的攻克你的系统</p>\n<h1 id=\"常见的客户端漏洞\"><a href=\"#常见的客户端漏洞\" class=\"headerlink\" title=\"常见的客户端漏洞\"></a>常见的客户端漏洞</h1><h2 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h2><p>什么是XSS？跨站脚本攻击(Cross Site Scripting)<br>反射型<br>持久型<br>DOM型</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://cp01-rdqa-dev094.cp01.baidu.com:8112/xsstest.php?username=%3Cscript%3Ealert(document.cookie)%3C/script%3E  </span><br><br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;X-XSS-Protection:0&#x27;</span>);<br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;Content-Security-Policy:0&#x27;</span>);<br><br><span class=\"hljs-variable\">$username</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;username&#x27;</span>];<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&#x27;Welcom &#x27;</span> . <span class=\"hljs-variable\">$username</span>;<br></code></pre></td></tr></table></figure>\n<h2 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h2><p>CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">// http://cp01-rdqa-dev094.cp01.baidu.com:8112/csrftest.php</span><br><br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;X-XSS-Protection:0&#x27;</span>);<br><span class=\"hljs-title function_ invoke__\">header</span>(<span class=\"hljs-string\">&#x27;Content-Security-Policy:0&#x27;</span>);<br><br><span class=\"hljs-variable\">$username</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">&#x27;username&#x27;</span>];<br><br><span class=\"hljs-variable\">$test</span> = <span class=\"hljs-string\">&#x27;&lt;img src=&quot;https://passport.baidu.com/passport/?logout&quot;/&gt;&#x27;</span>;<br><br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$test</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Json-Hijack\"><a href=\"#Json-Hijack\" class=\"headerlink\" title=\"Json Hijack\"></a>Json Hijack</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5arauwa0001tswr9e178k19","category_id":"cl5arauwd0004tswr3rf43o7o","_id":"cl5arauwf000ftswrfqx79aik"},{"post_id":"cl5arauwc0003tswrgoxg29zt","category_id":"cl5arauwf000atswra1g894cv","_id":"cl5arauwh000mtswrgnryd279"},{"post_id":"cl5arauwe0008tswrfuch61kz","category_id":"cl5arauwf000atswra1g894cv","_id":"cl5arauwi000rtswrdvm28zih"},{"post_id":"cl5arauwe0009tswrc9jggp4p","category_id":"cl5arauwh000ltswrgxml8r8n","_id":"cl5arauwj000xtswrap094oyd"},{"post_id":"cl5arauwi000utswrc1u4dk9t","category_id":"cl5arauwi000stswr5e1ehwgd","_id":"cl5arauwj0013tswrbus27dei"},{"post_id":"cl5arauwf000dtswr4uk2hwsw","category_id":"cl5arauwi000stswr5e1ehwgd","_id":"cl5arauwj0015tswr5boy64k2"},{"post_id":"cl5arauwj0012tswr9z2y3oxh","category_id":"cl5arauwf000atswra1g894cv","_id":"cl5arauwk001atswrb8i4fkp1"},{"post_id":"cl5arauwf000etswrhlhtgucn","category_id":"cl5arauwj000ytswrhk9y1fx3","_id":"cl5arauwk001etswr57n80omu"},{"post_id":"cl5arauwk0018tswraeg6dy4w","category_id":"cl5arauwi000stswr5e1ehwgd","_id":"cl5arauwl001gtswreqjd24gv"},{"post_id":"cl5arauwg000itswr6u7vaeqj","category_id":"cl5arauwj0016tswr2nkc74iv","_id":"cl5arauwl001ktswr2our2lo0"},{"post_id":"cl5arauwk0019tswr2a032uqa","category_id":"cl5arauwi000stswr5e1ehwgd","_id":"cl5arauwm001ntswr040q166a"},{"post_id":"cl5arauwg000ktswr11cifbl0","category_id":"cl5arauwk001btswrhnnc3d2o","_id":"cl5arauwm001rtswr1uw1ca2i"},{"post_id":"cl5arauwl001jtswres4p67t0","category_id":"cl5arauwf000atswra1g894cv","_id":"cl5arauwm001vtswrb32sdcuu"},{"post_id":"cl5arauwh000otswrh40o0hdk","category_id":"cl5arauwi000stswr5e1ehwgd","_id":"cl5arauwm001ztswrho748b34"},{"post_id":"cl5arauwl001mtswreemqhvw1","category_id":"cl5arauwf000atswra1g894cv","_id":"cl5arauwn0022tswr007wbvep"},{"post_id":"cl5arauwm001qtswrbb8wgi6x","category_id":"cl5arauwf000atswra1g894cv","_id":"cl5arauwn0024tswr3bpe55n1"},{"post_id":"cl5arauwh000qtswrhem62dtk","category_id":"cl5arauwm001otswrg8o872qj","_id":"cl5arauwn0026tswrffr715ld"},{"post_id":"cl5arauwm001ytswrhr0narfw","category_id":"cl5arauwj000ytswrhk9y1fx3","_id":"cl5arauwn0029tswr5z8u8745"},{"post_id":"cl5arauwi000wtswr0kul1tpe","category_id":"cl5arauwj000ytswrhk9y1fx3","_id":"cl5arauwo002ctswrdvf71o4h"},{"post_id":"cl5arauwn0021tswr6pap1bv9","category_id":"cl5arauwi000stswr5e1ehwgd","_id":"cl5arauwo002dtswrcpz9ewfn"},{"post_id":"cl5arauwj000ztswrdi9g1ynn","category_id":"cl5arauwj000ytswrhk9y1fx3","_id":"cl5arauwo002ftswr7hzt0d3d"},{"post_id":"cl5arauwj0014tswrhen0bxhm","category_id":"cl5arauwn0028tswrauq6g3hg","_id":"cl5arauwo002itswr2n1z3zh4"},{"post_id":"cl5arauwk001dtswrbree7v0n","category_id":"cl5arauwo002etswrcjf69l11","_id":"cl5arauwo002otswrcjbcgkrl"},{"post_id":"cl5arauwl001ftswr3vhxfv9m","category_id":"cl5arauwn0028tswrauq6g3hg","_id":"cl5arauwo002qtswrgkrl65r5"},{"post_id":"cl5arauwm001utswrhl96dxg2","category_id":"cl5arauwo002ntswr214o2xea","_id":"cl5arauwo002ttswrclev7jg1"}],"PostTag":[{"post_id":"cl5arauwa0001tswr9e178k19","tag_id":"cl5arauwd0005tswr7avndt6p","_id":"cl5arauwf000ctswr4dvi521z"},{"post_id":"cl5arauwc0003tswrgoxg29zt","tag_id":"cl5arauwf000btswr7gqw2mv6","_id":"cl5arauwg000jtswrb5vhgffm"},{"post_id":"cl5arauwe0008tswrfuch61kz","tag_id":"cl5arauwg000htswrb7w07bdl","_id":"cl5arauwh000ptswrariw61od"},{"post_id":"cl5arauwe0009tswrc9jggp4p","tag_id":"cl5arauwh000ntswr0aw9hwy3","_id":"cl5arauwi000vtswr7sh0g00q"},{"post_id":"cl5arauwf000dtswr4uk2hwsw","tag_id":"cl5arauwi000ttswr9oao112s","_id":"cl5arauwj0011tswrhcyf3epj"},{"post_id":"cl5arauwf000etswrhlhtgucn","tag_id":"cl5arauwj0010tswrhr5da2in","_id":"cl5arauwl001ltswrdu6v1m4g"},{"post_id":"cl5arauwf000etswrhlhtgucn","tag_id":"cl5arauwk0017tswr64t6hx7x","_id":"cl5arauwm001ptswr2qgr4yz2"},{"post_id":"cl5arauwf000etswrhlhtgucn","tag_id":"cl5arauwk001ctswr61720mxw","_id":"cl5arauwm001ttswrfodpdiw5"},{"post_id":"cl5arauwg000itswr6u7vaeqj","tag_id":"cl5arauwl001itswr85n55ohi","_id":"cl5arauwm001wtswrfl2s7whj"},{"post_id":"cl5arauwg000ktswr11cifbl0","tag_id":"cl5arauwm001stswrhnwsg1ws","_id":"cl5arauwn0027tswrf4zxa0et"},{"post_id":"cl5arauwg000ktswr11cifbl0","tag_id":"cl5arauwn0020tswr4ui8beqn","_id":"cl5arauwn002atswrgylec6jg"},{"post_id":"cl5arauwh000otswrh40o0hdk","tag_id":"cl5arauwn0025tswrcg603x8j","_id":"cl5arauwo002htswr027maqm5"},{"post_id":"cl5arauwh000otswrh40o0hdk","tag_id":"cl5arauwn002btswr8fzk0q86","_id":"cl5arauwo002ktswr3rujambu"},{"post_id":"cl5arauwh000qtswrhem62dtk","tag_id":"cl5arauwo002gtswrd16g0uut","_id":"cl5arauwo002mtswrer5sb3os"},{"post_id":"cl5arauwi000utswrc1u4dk9t","tag_id":"cl5arauwo002ltswr1jqv6l34","_id":"cl5arauwo002rtswrf1k61k0c"},{"post_id":"cl5arauwi000wtswr0kul1tpe","tag_id":"cl5arauwo002ptswr2rzs6h3q","_id":"cl5arauwp002vtswr5bq50hph"},{"post_id":"cl5arauwi000wtswr0kul1tpe","tag_id":"cl5arauwo002stswr0jin1upe","_id":"cl5arauwp002wtswr3xd16r1p"},{"post_id":"cl5arauwj000ztswrdi9g1ynn","tag_id":"cl5arauwj0010tswrhr5da2in","_id":"cl5arauwp002ytswr3jihcjz6"},{"post_id":"cl5arauwj0012tswr9z2y3oxh","tag_id":"cl5arauwp002xtswr67yg49f4","_id":"cl5arauwp0030tswr5gome0qo"},{"post_id":"cl5arauwj0014tswrhen0bxhm","tag_id":"cl5arauwp002ztswr0uaae19m","_id":"cl5arauwp0033tswr79ki7lvy"},{"post_id":"cl5arauwj0014tswrhen0bxhm","tag_id":"cl5arauwp0031tswr4kdn9wcq","_id":"cl5arauwp0034tswr9wyr7zhk"},{"post_id":"cl5arauwk0018tswraeg6dy4w","tag_id":"cl5arauwo002ltswr1jqv6l34","_id":"cl5arauwp0036tswreohh9pga"},{"post_id":"cl5arauwk0019tswr2a032uqa","tag_id":"cl5arauwp0035tswr259j8gsx","_id":"cl5arauwp0038tswrchy04bli"},{"post_id":"cl5arauwk001dtswrbree7v0n","tag_id":"cl5arauwp0037tswrdfr66h79","_id":"cl5arauwp003atswreccx80h5"},{"post_id":"cl5arauwl001ftswr3vhxfv9m","tag_id":"cl5arauwp0031tswr4kdn9wcq","_id":"cl5arauwp003ctswrga2jh3hs"},{"post_id":"cl5arauwl001jtswres4p67t0","tag_id":"cl5arauwp002xtswr67yg49f4","_id":"cl5arauwq003etswrbyo5c5pa"},{"post_id":"cl5arauwl001mtswreemqhvw1","tag_id":"cl5arauwp002xtswr67yg49f4","_id":"cl5arauwq003gtswr3mwzd3gl"},{"post_id":"cl5arauwm001qtswrbb8wgi6x","tag_id":"cl5arauwp002xtswr67yg49f4","_id":"cl5arauwq003itswr899l7w58"},{"post_id":"cl5arauwm001utswrhl96dxg2","tag_id":"cl5arauwq003htswr50033t8t","_id":"cl5arauwq003mtswr27ri5kod"},{"post_id":"cl5arauwm001utswrhl96dxg2","tag_id":"cl5arauwq003jtswr5e1t38cb","_id":"cl5arauwq003ntswr5gryerqq"},{"post_id":"cl5arauwm001utswrhl96dxg2","tag_id":"cl5arauwq003ktswr5pxk1n0z","_id":"cl5arauwq003ptswrg8ru3rxg"},{"post_id":"cl5arauwm001ytswrhr0narfw","tag_id":"cl5arauwq003ltswr2d8a2ok0","_id":"cl5arauwq003rtswr91v0dofg"},{"post_id":"cl5arauwm001ytswrhr0narfw","tag_id":"cl5arauwq003otswr9ahf5ntl","_id":"cl5arauwq003stswrhr7065eu"},{"post_id":"cl5arauwn0021tswr6pap1bv9","tag_id":"cl5arauwq003qtswr9oe8bq8i","_id":"cl5arauwq003ttswr58645ibq"}],"Tag":[{"name":"教育","_id":"cl5arauwd0005tswr7avndt6p"},{"name":"信用卡","_id":"cl5arauwf000btswr7gqw2mv6"},{"name":"沪C","_id":"cl5arauwg000htswrb7w07bdl"},{"name":"小米Max","_id":"cl5arauwh000ntswr0aw9hwy3"},{"name":"https","_id":"cl5arauwi000ttswr9oao112s"},{"name":"JVM","_id":"cl5arauwj0010tswrhr5da2in"},{"name":"类加载","_id":"cl5arauwk0017tswr64t6hx7x"},{"name":"双亲委派模型","_id":"cl5arauwk001ctswr61720mxw"},{"name":"awk","_id":"cl5arauwl001itswr85n55ohi"},{"name":"markdown","_id":"cl5arauwm001stswrhnwsg1ws"},{"name":"ppt","_id":"cl5arauwn0020tswr4ui8beqn"},{"name":"H5","_id":"cl5arauwn0025tswrcg603x8j"},{"name":"WEBAPP","_id":"cl5arauwn002btswr8fzk0q86"},{"name":"索引","_id":"cl5arauwo002gtswrd16g0uut"},{"name":"mysql","_id":"cl5arauwo002ltswr1jqv6l34"},{"name":"java","_id":"cl5arauwo002ptswr2rzs6h3q"},{"name":"maven","_id":"cl5arauwo002stswr0jin1upe"},{"name":"生活","_id":"cl5arauwp002xtswr67yg49f4"},{"name":"email","_id":"cl5arauwp002ztswr0uaae19m"},{"name":"PHP","_id":"cl5arauwp0031tswr4kdn9wcq"},{"name":"nginx","_id":"cl5arauwp0035tswr259j8gsx"},{"name":"Python","_id":"cl5arauwp0037tswrdfr66h79"},{"name":"python","_id":"cl5arauwq003htswr50033t8t"},{"name":"scikitlearn","_id":"cl5arauwq003jtswr5e1t38cb"},{"name":"jieba","_id":"cl5arauwq003ktswr5pxk1n0z"},{"name":"springboot","_id":"cl5arauwq003ltswr2d8a2ok0"},{"name":"mybatis","_id":"cl5arauwq003otswr9ahf5ntl"},{"name":"网络安全","_id":"cl5arauwq003qtswr9oe8bq8i"}]}}